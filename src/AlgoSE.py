# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AlgoSE')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AlgoSE')
    _AlgoSE = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AlgoSE', [dirname(__file__)])
        except ImportError:
            import _AlgoSE
            return _AlgoSE
        try:
            _mod = imp.load_module('_AlgoSE', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AlgoSE = swig_import_helper()
    del swig_import_helper
else:
    import _AlgoSE
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class TimeStamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeStamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeStamp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sec"] = _AlgoSE.TimeStamp_sec_set
    __swig_getmethods__["sec"] = _AlgoSE.TimeStamp_sec_get
    if _newclass:
        sec = _swig_property(_AlgoSE.TimeStamp_sec_get, _AlgoSE.TimeStamp_sec_set)
    __swig_setmethods__["usec"] = _AlgoSE.TimeStamp_usec_set
    __swig_getmethods__["usec"] = _AlgoSE.TimeStamp_usec_get
    if _newclass:
        usec = _swig_property(_AlgoSE.TimeStamp_usec_get, _AlgoSE.TimeStamp_usec_set)

    def __init__(self):
        this = _AlgoSE.new_TimeStamp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_TimeStamp
    __del__ = lambda self: None
TimeStamp_swigregister = _AlgoSE.TimeStamp_swigregister
TimeStamp_swigregister(TimeStamp)

class LogLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLevel, name)
    __repr__ = _swig_repr
    LOG_VERBOSE = _AlgoSE.LogLevel_LOG_VERBOSE
    LOG_TRACE = _AlgoSE.LogLevel_LOG_TRACE
    LOG_DEBUG = _AlgoSE.LogLevel_LOG_DEBUG
    LOG_INFO = _AlgoSE.LogLevel_LOG_INFO
    LOG_WARN = _AlgoSE.LogLevel_LOG_WARN
    LOG_ERROR = _AlgoSE.LogLevel_LOG_ERROR
    LOG_FATAL = _AlgoSE.LogLevel_LOG_FATAL

    def __init__(self):
        this = _AlgoSE.new_LogLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_LogLevel
    __del__ = lambda self: None
LogLevel_swigregister = _AlgoSE.LogLevel_swigregister
LogLevel_swigregister(LogLevel)
cvar = _AlgoSE.cvar
LEN_ID = cvar.LEN_ID
LEN_NAME = cvar.LEN_NAME
LEN_INSTRUMENT = cvar.LEN_INSTRUMENT
LEN_EXCHANGE = cvar.LEN_EXCHANGE
LEN_STATE_MSG = cvar.LEN_STATE_MSG
LEN_TEXT = cvar.LEN_TEXT

class RunningMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunningMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunningMode, name)
    __repr__ = _swig_repr
    LIVE = _AlgoSE.RunningMode_LIVE
    SIMULATION = _AlgoSE.RunningMode_SIMULATION
    OPTIMIZATION = _AlgoSE.RunningMode_OPTIMIZATION

    def __init__(self):
        this = _AlgoSE.new_RunningMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_RunningMode
    __del__ = lambda self: None
RunningMode_swigregister = _AlgoSE.RunningMode_swigregister
RunningMode_swigregister(RunningMode)

class DataFileFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataFileFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataFileFormat, name)
    __repr__ = _swig_repr
    CSV_DATA_FILE = _AlgoSE.DataFileFormat_CSV_DATA_FILE
    BIN_DATA_FILE = _AlgoSE.DataFileFormat_BIN_DATA_FILE

    def __init__(self):
        this = _AlgoSE.new_DataFileFormat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_DataFileFormat
    __del__ = lambda self: None
DataFileFormat_swigregister = _AlgoSE.DataFileFormat_swigregister
DataFileFormat_swigregister(DataFileFormat)

class SecurityType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityType, name)
    __repr__ = _swig_repr
    UNKNOWN = _AlgoSE.SecurityType_UNKNOWN
    STOCK = _AlgoSE.SecurityType_STOCK
    FUTURE = _AlgoSE.SecurityType_FUTURE
    FOREX = _AlgoSE.SecurityType_FOREX
    OPTION = _AlgoSE.SecurityType_OPTION

    def __init__(self):
        this = _AlgoSE.new_SecurityType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_SecurityType
    __del__ = lambda self: None
SecurityType_swigregister = _AlgoSE.SecurityType_swigregister
SecurityType_swigregister(SecurityType)

class Resolution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Resolution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Resolution, name)
    __repr__ = _swig_repr
    TICK = _AlgoSE.Resolution_TICK
    SECOND = _AlgoSE.Resolution_SECOND
    MINUTE = _AlgoSE.Resolution_MINUTE
    HOUR = _AlgoSE.Resolution_HOUR
    DAY = _AlgoSE.Resolution_DAY
    WEEK = _AlgoSE.Resolution_WEEK

    def __init__(self):
        this = _AlgoSE.new_Resolution()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Resolution
    __del__ = lambda self: None
Resolution_swigregister = _AlgoSE.Resolution_swigregister
Resolution_swigregister(Resolution)

class ExchangeCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeCode, name)
    __repr__ = _swig_repr
    EXCHG_UNKNOWN = _AlgoSE.ExchangeCode_EXCHG_UNKNOWN
    EXCHG_SSE = _AlgoSE.ExchangeCode_EXCHG_SSE
    EXCHG_SZE = _AlgoSE.ExchangeCode_EXCHG_SZE
    EXCHG_SHFE = _AlgoSE.ExchangeCode_EXCHG_SHFE
    EXCHG_DCE = _AlgoSE.ExchangeCode_EXCHG_DCE
    EXCHG_CZCE = _AlgoSE.ExchangeCode_EXCHG_CZCE
    EXCHG_CFFEX = _AlgoSE.ExchangeCode_EXCHG_CFFEX
    EXCHG_GOLD = _AlgoSE.ExchangeCode_EXCHG_GOLD

    def __init__(self):
        this = _AlgoSE.new_ExchangeCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_ExchangeCode
    __del__ = lambda self: None
ExchangeCode_swigregister = _AlgoSE.ExchangeCode_swigregister
ExchangeCode_swigregister(ExchangeCode)

class TickType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TickType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TickType, name)
    __repr__ = _swig_repr
    SNAPSHOT = _AlgoSE.TickType_SNAPSHOT
    TRADES = _AlgoSE.TickType_TRADES

    def __init__(self):
        this = _AlgoSE.new_TickType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_TickType
    __del__ = lambda self: None
TickType_swigregister = _AlgoSE.TickType_swigregister
TickType_swigregister(TickType)

class Tick(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tick, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tick, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _AlgoSE.Tick_type_set
    __swig_getmethods__["type"] = _AlgoSE.Tick_type_get
    if _newclass:
        type = _swig_property(_AlgoSE.Tick_type_get, _AlgoSE.Tick_type_set)
    __swig_setmethods__["secType"] = _AlgoSE.Tick_secType_set
    __swig_getmethods__["secType"] = _AlgoSE.Tick_secType_get
    if _newclass:
        secType = _swig_property(_AlgoSE.Tick_secType_get, _AlgoSE.Tick_secType_set)
    __swig_setmethods__["instrument"] = _AlgoSE.Tick_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.Tick_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.Tick_instrument_get, _AlgoSE.Tick_instrument_set)
    __swig_setmethods__["exchange"] = _AlgoSE.Tick_exchange_set
    __swig_getmethods__["exchange"] = _AlgoSE.Tick_exchange_get
    if _newclass:
        exchange = _swig_property(_AlgoSE.Tick_exchange_get, _AlgoSE.Tick_exchange_set)
    __swig_setmethods__["timestamp"] = _AlgoSE.Tick_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.Tick_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.Tick_timestamp_get, _AlgoSE.Tick_timestamp_set)
    __swig_setmethods__["lastPrice"] = _AlgoSE.Tick_lastPrice_set
    __swig_getmethods__["lastPrice"] = _AlgoSE.Tick_lastPrice_get
    if _newclass:
        lastPrice = _swig_property(_AlgoSE.Tick_lastPrice_get, _AlgoSE.Tick_lastPrice_set)
    __swig_setmethods__["openPrice"] = _AlgoSE.Tick_openPrice_set
    __swig_getmethods__["openPrice"] = _AlgoSE.Tick_openPrice_get
    if _newclass:
        openPrice = _swig_property(_AlgoSE.Tick_openPrice_get, _AlgoSE.Tick_openPrice_set)
    __swig_setmethods__["highestPrice"] = _AlgoSE.Tick_highestPrice_set
    __swig_getmethods__["highestPrice"] = _AlgoSE.Tick_highestPrice_get
    if _newclass:
        highestPrice = _swig_property(_AlgoSE.Tick_highestPrice_get, _AlgoSE.Tick_highestPrice_set)
    __swig_setmethods__["lowestPrice"] = _AlgoSE.Tick_lowestPrice_set
    __swig_getmethods__["lowestPrice"] = _AlgoSE.Tick_lowestPrice_get
    if _newclass:
        lowestPrice = _swig_property(_AlgoSE.Tick_lowestPrice_get, _AlgoSE.Tick_lowestPrice_set)
    __swig_setmethods__["closePrice"] = _AlgoSE.Tick_closePrice_set
    __swig_getmethods__["closePrice"] = _AlgoSE.Tick_closePrice_get
    if _newclass:
        closePrice = _swig_property(_AlgoSE.Tick_closePrice_get, _AlgoSE.Tick_closePrice_set)
    __swig_setmethods__["volume"] = _AlgoSE.Tick_volume_set
    __swig_getmethods__["volume"] = _AlgoSE.Tick_volume_get
    if _newclass:
        volume = _swig_property(_AlgoSE.Tick_volume_get, _AlgoSE.Tick_volume_set)
    __swig_setmethods__["openInterest"] = _AlgoSE.Tick_openInterest_set
    __swig_getmethods__["openInterest"] = _AlgoSE.Tick_openInterest_get
    if _newclass:
        openInterest = _swig_property(_AlgoSE.Tick_openInterest_get, _AlgoSE.Tick_openInterest_set)
    __swig_setmethods__["turnover"] = _AlgoSE.Tick_turnover_set
    __swig_getmethods__["turnover"] = _AlgoSE.Tick_turnover_get
    if _newclass:
        turnover = _swig_property(_AlgoSE.Tick_turnover_get, _AlgoSE.Tick_turnover_set)
    __swig_setmethods__["upperLimitPrice"] = _AlgoSE.Tick_upperLimitPrice_set
    __swig_getmethods__["upperLimitPrice"] = _AlgoSE.Tick_upperLimitPrice_get
    if _newclass:
        upperLimitPrice = _swig_property(_AlgoSE.Tick_upperLimitPrice_get, _AlgoSE.Tick_upperLimitPrice_set)
    __swig_setmethods__["lowerLimitPrice"] = _AlgoSE.Tick_lowerLimitPrice_set
    __swig_getmethods__["lowerLimitPrice"] = _AlgoSE.Tick_lowerLimitPrice_get
    if _newclass:
        lowerLimitPrice = _swig_property(_AlgoSE.Tick_lowerLimitPrice_get, _AlgoSE.Tick_lowerLimitPrice_set)
    __swig_setmethods__["preSettlePrice"] = _AlgoSE.Tick_preSettlePrice_set
    __swig_getmethods__["preSettlePrice"] = _AlgoSE.Tick_preSettlePrice_get
    if _newclass:
        preSettlePrice = _swig_property(_AlgoSE.Tick_preSettlePrice_get, _AlgoSE.Tick_preSettlePrice_set)
    __swig_setmethods__["preClosePrice"] = _AlgoSE.Tick_preClosePrice_set
    __swig_getmethods__["preClosePrice"] = _AlgoSE.Tick_preClosePrice_get
    if _newclass:
        preClosePrice = _swig_property(_AlgoSE.Tick_preClosePrice_get, _AlgoSE.Tick_preClosePrice_set)
    __swig_setmethods__["settlePrice"] = _AlgoSE.Tick_settlePrice_set
    __swig_getmethods__["settlePrice"] = _AlgoSE.Tick_settlePrice_get
    if _newclass:
        settlePrice = _swig_property(_AlgoSE.Tick_settlePrice_get, _AlgoSE.Tick_settlePrice_set)
    __swig_setmethods__["preOpenInterest"] = _AlgoSE.Tick_preOpenInterest_set
    __swig_getmethods__["preOpenInterest"] = _AlgoSE.Tick_preOpenInterest_get
    if _newclass:
        preOpenInterest = _swig_property(_AlgoSE.Tick_preOpenInterest_get, _AlgoSE.Tick_preOpenInterest_set)
    __swig_setmethods__["averagePrice"] = _AlgoSE.Tick_averagePrice_set
    __swig_getmethods__["averagePrice"] = _AlgoSE.Tick_averagePrice_get
    if _newclass:
        averagePrice = _swig_property(_AlgoSE.Tick_averagePrice_get, _AlgoSE.Tick_averagePrice_set)
    __swig_setmethods__["depth"] = _AlgoSE.Tick_depth_set
    __swig_getmethods__["depth"] = _AlgoSE.Tick_depth_get
    if _newclass:
        depth = _swig_property(_AlgoSE.Tick_depth_get, _AlgoSE.Tick_depth_set)
    __swig_setmethods__["bidPrice1"] = _AlgoSE.Tick_bidPrice1_set
    __swig_getmethods__["bidPrice1"] = _AlgoSE.Tick_bidPrice1_get
    if _newclass:
        bidPrice1 = _swig_property(_AlgoSE.Tick_bidPrice1_get, _AlgoSE.Tick_bidPrice1_set)
    __swig_setmethods__["bidVolume1"] = _AlgoSE.Tick_bidVolume1_set
    __swig_getmethods__["bidVolume1"] = _AlgoSE.Tick_bidVolume1_get
    if _newclass:
        bidVolume1 = _swig_property(_AlgoSE.Tick_bidVolume1_get, _AlgoSE.Tick_bidVolume1_set)
    __swig_setmethods__["bidPrice2"] = _AlgoSE.Tick_bidPrice2_set
    __swig_getmethods__["bidPrice2"] = _AlgoSE.Tick_bidPrice2_get
    if _newclass:
        bidPrice2 = _swig_property(_AlgoSE.Tick_bidPrice2_get, _AlgoSE.Tick_bidPrice2_set)
    __swig_setmethods__["bidVolume2"] = _AlgoSE.Tick_bidVolume2_set
    __swig_getmethods__["bidVolume2"] = _AlgoSE.Tick_bidVolume2_get
    if _newclass:
        bidVolume2 = _swig_property(_AlgoSE.Tick_bidVolume2_get, _AlgoSE.Tick_bidVolume2_set)
    __swig_setmethods__["bidPrice3"] = _AlgoSE.Tick_bidPrice3_set
    __swig_getmethods__["bidPrice3"] = _AlgoSE.Tick_bidPrice3_get
    if _newclass:
        bidPrice3 = _swig_property(_AlgoSE.Tick_bidPrice3_get, _AlgoSE.Tick_bidPrice3_set)
    __swig_setmethods__["bidVolume3"] = _AlgoSE.Tick_bidVolume3_set
    __swig_getmethods__["bidVolume3"] = _AlgoSE.Tick_bidVolume3_get
    if _newclass:
        bidVolume3 = _swig_property(_AlgoSE.Tick_bidVolume3_get, _AlgoSE.Tick_bidVolume3_set)
    __swig_setmethods__["bidPrice4"] = _AlgoSE.Tick_bidPrice4_set
    __swig_getmethods__["bidPrice4"] = _AlgoSE.Tick_bidPrice4_get
    if _newclass:
        bidPrice4 = _swig_property(_AlgoSE.Tick_bidPrice4_get, _AlgoSE.Tick_bidPrice4_set)
    __swig_setmethods__["bidVolume4"] = _AlgoSE.Tick_bidVolume4_set
    __swig_getmethods__["bidVolume4"] = _AlgoSE.Tick_bidVolume4_get
    if _newclass:
        bidVolume4 = _swig_property(_AlgoSE.Tick_bidVolume4_get, _AlgoSE.Tick_bidVolume4_set)
    __swig_setmethods__["bidPrice5"] = _AlgoSE.Tick_bidPrice5_set
    __swig_getmethods__["bidPrice5"] = _AlgoSE.Tick_bidPrice5_get
    if _newclass:
        bidPrice5 = _swig_property(_AlgoSE.Tick_bidPrice5_get, _AlgoSE.Tick_bidPrice5_set)
    __swig_setmethods__["bidVolume5"] = _AlgoSE.Tick_bidVolume5_set
    __swig_getmethods__["bidVolume5"] = _AlgoSE.Tick_bidVolume5_get
    if _newclass:
        bidVolume5 = _swig_property(_AlgoSE.Tick_bidVolume5_get, _AlgoSE.Tick_bidVolume5_set)
    __swig_setmethods__["askPrice1"] = _AlgoSE.Tick_askPrice1_set
    __swig_getmethods__["askPrice1"] = _AlgoSE.Tick_askPrice1_get
    if _newclass:
        askPrice1 = _swig_property(_AlgoSE.Tick_askPrice1_get, _AlgoSE.Tick_askPrice1_set)
    __swig_setmethods__["askVolume1"] = _AlgoSE.Tick_askVolume1_set
    __swig_getmethods__["askVolume1"] = _AlgoSE.Tick_askVolume1_get
    if _newclass:
        askVolume1 = _swig_property(_AlgoSE.Tick_askVolume1_get, _AlgoSE.Tick_askVolume1_set)
    __swig_setmethods__["askPrice2"] = _AlgoSE.Tick_askPrice2_set
    __swig_getmethods__["askPrice2"] = _AlgoSE.Tick_askPrice2_get
    if _newclass:
        askPrice2 = _swig_property(_AlgoSE.Tick_askPrice2_get, _AlgoSE.Tick_askPrice2_set)
    __swig_setmethods__["askVolume2"] = _AlgoSE.Tick_askVolume2_set
    __swig_getmethods__["askVolume2"] = _AlgoSE.Tick_askVolume2_get
    if _newclass:
        askVolume2 = _swig_property(_AlgoSE.Tick_askVolume2_get, _AlgoSE.Tick_askVolume2_set)
    __swig_setmethods__["askPrice3"] = _AlgoSE.Tick_askPrice3_set
    __swig_getmethods__["askPrice3"] = _AlgoSE.Tick_askPrice3_get
    if _newclass:
        askPrice3 = _swig_property(_AlgoSE.Tick_askPrice3_get, _AlgoSE.Tick_askPrice3_set)
    __swig_setmethods__["askVolume3"] = _AlgoSE.Tick_askVolume3_set
    __swig_getmethods__["askVolume3"] = _AlgoSE.Tick_askVolume3_get
    if _newclass:
        askVolume3 = _swig_property(_AlgoSE.Tick_askVolume3_get, _AlgoSE.Tick_askVolume3_set)
    __swig_setmethods__["askPrice4"] = _AlgoSE.Tick_askPrice4_set
    __swig_getmethods__["askPrice4"] = _AlgoSE.Tick_askPrice4_get
    if _newclass:
        askPrice4 = _swig_property(_AlgoSE.Tick_askPrice4_get, _AlgoSE.Tick_askPrice4_set)
    __swig_setmethods__["askVolume4"] = _AlgoSE.Tick_askVolume4_set
    __swig_getmethods__["askVolume4"] = _AlgoSE.Tick_askVolume4_get
    if _newclass:
        askVolume4 = _swig_property(_AlgoSE.Tick_askVolume4_get, _AlgoSE.Tick_askVolume4_set)
    __swig_setmethods__["askPrice5"] = _AlgoSE.Tick_askPrice5_set
    __swig_getmethods__["askPrice5"] = _AlgoSE.Tick_askPrice5_get
    if _newclass:
        askPrice5 = _swig_property(_AlgoSE.Tick_askPrice5_get, _AlgoSE.Tick_askPrice5_set)
    __swig_setmethods__["askVolume5"] = _AlgoSE.Tick_askVolume5_set
    __swig_getmethods__["askVolume5"] = _AlgoSE.Tick_askVolume5_get
    if _newclass:
        askVolume5 = _swig_property(_AlgoSE.Tick_askVolume5_get, _AlgoSE.Tick_askVolume5_set)
    __swig_setmethods__["srvId"] = _AlgoSE.Tick_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.Tick_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.Tick_srvId_get, _AlgoSE.Tick_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_Tick()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Tick
    __del__ = lambda self: None
Tick_swigregister = _AlgoSE.Tick_swigregister
Tick_swigregister(Tick)

class Bar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["secType"] = _AlgoSE.Bar_secType_set
    __swig_getmethods__["secType"] = _AlgoSE.Bar_secType_get
    if _newclass:
        secType = _swig_property(_AlgoSE.Bar_secType_get, _AlgoSE.Bar_secType_set)
    __swig_setmethods__["instrument"] = _AlgoSE.Bar_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.Bar_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.Bar_instrument_get, _AlgoSE.Bar_instrument_set)
    __swig_setmethods__["exchange"] = _AlgoSE.Bar_exchange_set
    __swig_getmethods__["exchange"] = _AlgoSE.Bar_exchange_get
    if _newclass:
        exchange = _swig_property(_AlgoSE.Bar_exchange_get, _AlgoSE.Bar_exchange_set)
    __swig_setmethods__["timestamp"] = _AlgoSE.Bar_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.Bar_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.Bar_timestamp_get, _AlgoSE.Bar_timestamp_set)
    __swig_setmethods__["resolution"] = _AlgoSE.Bar_resolution_set
    __swig_getmethods__["resolution"] = _AlgoSE.Bar_resolution_get
    if _newclass:
        resolution = _swig_property(_AlgoSE.Bar_resolution_get, _AlgoSE.Bar_resolution_set)
    __swig_setmethods__["interval"] = _AlgoSE.Bar_interval_set
    __swig_getmethods__["interval"] = _AlgoSE.Bar_interval_get
    if _newclass:
        interval = _swig_property(_AlgoSE.Bar_interval_get, _AlgoSE.Bar_interval_set)
    __swig_setmethods__["open"] = _AlgoSE.Bar_open_set
    __swig_getmethods__["open"] = _AlgoSE.Bar_open_get
    if _newclass:
        open = _swig_property(_AlgoSE.Bar_open_get, _AlgoSE.Bar_open_set)
    __swig_setmethods__["high"] = _AlgoSE.Bar_high_set
    __swig_getmethods__["high"] = _AlgoSE.Bar_high_get
    if _newclass:
        high = _swig_property(_AlgoSE.Bar_high_get, _AlgoSE.Bar_high_set)
    __swig_setmethods__["low"] = _AlgoSE.Bar_low_set
    __swig_getmethods__["low"] = _AlgoSE.Bar_low_get
    if _newclass:
        low = _swig_property(_AlgoSE.Bar_low_get, _AlgoSE.Bar_low_set)
    __swig_setmethods__["close"] = _AlgoSE.Bar_close_set
    __swig_getmethods__["close"] = _AlgoSE.Bar_close_get
    if _newclass:
        close = _swig_property(_AlgoSE.Bar_close_get, _AlgoSE.Bar_close_set)
    __swig_setmethods__["last"] = _AlgoSE.Bar_last_set
    __swig_getmethods__["last"] = _AlgoSE.Bar_last_get
    if _newclass:
        last = _swig_property(_AlgoSE.Bar_last_get, _AlgoSE.Bar_last_set)
    __swig_setmethods__["volume"] = _AlgoSE.Bar_volume_set
    __swig_getmethods__["volume"] = _AlgoSE.Bar_volume_get
    if _newclass:
        volume = _swig_property(_AlgoSE.Bar_volume_get, _AlgoSE.Bar_volume_set)
    __swig_setmethods__["openInt"] = _AlgoSE.Bar_openInt_set
    __swig_getmethods__["openInt"] = _AlgoSE.Bar_openInt_get
    if _newclass:
        openInt = _swig_property(_AlgoSE.Bar_openInt_get, _AlgoSE.Bar_openInt_set)
    __swig_setmethods__["amount"] = _AlgoSE.Bar_amount_set
    __swig_getmethods__["amount"] = _AlgoSE.Bar_amount_get
    if _newclass:
        amount = _swig_property(_AlgoSE.Bar_amount_get, _AlgoSE.Bar_amount_set)

    def __init__(self):
        this = _AlgoSE.new_Bar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Bar
    __del__ = lambda self: None
Bar_swigregister = _AlgoSE.Bar_swigregister
Bar_swigregister(Bar)

class HistoricalData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoricalData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoricalData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reqId"] = _AlgoSE.HistoricalData_reqId_set
    __swig_getmethods__["reqId"] = _AlgoSE.HistoricalData_reqId_get
    if _newclass:
        reqId = _swig_property(_AlgoSE.HistoricalData_reqId_get, _AlgoSE.HistoricalData_reqId_set)
    __swig_setmethods__["isLast"] = _AlgoSE.HistoricalData_isLast_set
    __swig_getmethods__["isLast"] = _AlgoSE.HistoricalData_isLast_get
    if _newclass:
        isLast = _swig_property(_AlgoSE.HistoricalData_isLast_get, _AlgoSE.HistoricalData_isLast_set)
    __swig_setmethods__["secType"] = _AlgoSE.HistoricalData_secType_set
    __swig_getmethods__["secType"] = _AlgoSE.HistoricalData_secType_get
    if _newclass:
        secType = _swig_property(_AlgoSE.HistoricalData_secType_get, _AlgoSE.HistoricalData_secType_set)
    __swig_setmethods__["exchange"] = _AlgoSE.HistoricalData_exchange_set
    __swig_getmethods__["exchange"] = _AlgoSE.HistoricalData_exchange_get
    if _newclass:
        exchange = _swig_property(_AlgoSE.HistoricalData_exchange_get, _AlgoSE.HistoricalData_exchange_set)
    __swig_setmethods__["instrument"] = _AlgoSE.HistoricalData_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.HistoricalData_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.HistoricalData_instrument_get, _AlgoSE.HistoricalData_instrument_set)
    __swig_setmethods__["timestamp"] = _AlgoSE.HistoricalData_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.HistoricalData_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.HistoricalData_timestamp_get, _AlgoSE.HistoricalData_timestamp_set)
    __swig_setmethods__["resolution"] = _AlgoSE.HistoricalData_resolution_set
    __swig_getmethods__["resolution"] = _AlgoSE.HistoricalData_resolution_get
    if _newclass:
        resolution = _swig_property(_AlgoSE.HistoricalData_resolution_get, _AlgoSE.HistoricalData_resolution_set)
    __swig_setmethods__["interval"] = _AlgoSE.HistoricalData_interval_set
    __swig_getmethods__["interval"] = _AlgoSE.HistoricalData_interval_get
    if _newclass:
        interval = _swig_property(_AlgoSE.HistoricalData_interval_get, _AlgoSE.HistoricalData_interval_set)
    __swig_setmethods__["open"] = _AlgoSE.HistoricalData_open_set
    __swig_getmethods__["open"] = _AlgoSE.HistoricalData_open_get
    if _newclass:
        open = _swig_property(_AlgoSE.HistoricalData_open_get, _AlgoSE.HistoricalData_open_set)
    __swig_setmethods__["high"] = _AlgoSE.HistoricalData_high_set
    __swig_getmethods__["high"] = _AlgoSE.HistoricalData_high_get
    if _newclass:
        high = _swig_property(_AlgoSE.HistoricalData_high_get, _AlgoSE.HistoricalData_high_set)
    __swig_setmethods__["low"] = _AlgoSE.HistoricalData_low_set
    __swig_getmethods__["low"] = _AlgoSE.HistoricalData_low_get
    if _newclass:
        low = _swig_property(_AlgoSE.HistoricalData_low_get, _AlgoSE.HistoricalData_low_set)
    __swig_setmethods__["close"] = _AlgoSE.HistoricalData_close_set
    __swig_getmethods__["close"] = _AlgoSE.HistoricalData_close_get
    if _newclass:
        close = _swig_property(_AlgoSE.HistoricalData_close_get, _AlgoSE.HistoricalData_close_set)
    __swig_setmethods__["last"] = _AlgoSE.HistoricalData_last_set
    __swig_getmethods__["last"] = _AlgoSE.HistoricalData_last_get
    if _newclass:
        last = _swig_property(_AlgoSE.HistoricalData_last_get, _AlgoSE.HistoricalData_last_set)
    __swig_setmethods__["openInt"] = _AlgoSE.HistoricalData_openInt_set
    __swig_getmethods__["openInt"] = _AlgoSE.HistoricalData_openInt_get
    if _newclass:
        openInt = _swig_property(_AlgoSE.HistoricalData_openInt_get, _AlgoSE.HistoricalData_openInt_set)
    __swig_setmethods__["volume"] = _AlgoSE.HistoricalData_volume_set
    __swig_getmethods__["volume"] = _AlgoSE.HistoricalData_volume_get
    if _newclass:
        volume = _swig_property(_AlgoSE.HistoricalData_volume_get, _AlgoSE.HistoricalData_volume_set)
    __swig_setmethods__["turnover"] = _AlgoSE.HistoricalData_turnover_set
    __swig_getmethods__["turnover"] = _AlgoSE.HistoricalData_turnover_get
    if _newclass:
        turnover = _swig_property(_AlgoSE.HistoricalData_turnover_get, _AlgoSE.HistoricalData_turnover_set)
    __swig_setmethods__["upperLimitPrice"] = _AlgoSE.HistoricalData_upperLimitPrice_set
    __swig_getmethods__["upperLimitPrice"] = _AlgoSE.HistoricalData_upperLimitPrice_get
    if _newclass:
        upperLimitPrice = _swig_property(_AlgoSE.HistoricalData_upperLimitPrice_get, _AlgoSE.HistoricalData_upperLimitPrice_set)
    __swig_setmethods__["lowerLimitPrice"] = _AlgoSE.HistoricalData_lowerLimitPrice_set
    __swig_getmethods__["lowerLimitPrice"] = _AlgoSE.HistoricalData_lowerLimitPrice_get
    if _newclass:
        lowerLimitPrice = _swig_property(_AlgoSE.HistoricalData_lowerLimitPrice_get, _AlgoSE.HistoricalData_lowerLimitPrice_set)
    __swig_setmethods__["preSettlePrice"] = _AlgoSE.HistoricalData_preSettlePrice_set
    __swig_getmethods__["preSettlePrice"] = _AlgoSE.HistoricalData_preSettlePrice_get
    if _newclass:
        preSettlePrice = _swig_property(_AlgoSE.HistoricalData_preSettlePrice_get, _AlgoSE.HistoricalData_preSettlePrice_set)
    __swig_setmethods__["preClosePrice"] = _AlgoSE.HistoricalData_preClosePrice_set
    __swig_getmethods__["preClosePrice"] = _AlgoSE.HistoricalData_preClosePrice_get
    if _newclass:
        preClosePrice = _swig_property(_AlgoSE.HistoricalData_preClosePrice_get, _AlgoSE.HistoricalData_preClosePrice_set)
    __swig_setmethods__["settlePrice"] = _AlgoSE.HistoricalData_settlePrice_set
    __swig_getmethods__["settlePrice"] = _AlgoSE.HistoricalData_settlePrice_get
    if _newclass:
        settlePrice = _swig_property(_AlgoSE.HistoricalData_settlePrice_get, _AlgoSE.HistoricalData_settlePrice_set)
    __swig_setmethods__["preOpenInterest"] = _AlgoSE.HistoricalData_preOpenInterest_set
    __swig_getmethods__["preOpenInterest"] = _AlgoSE.HistoricalData_preOpenInterest_get
    if _newclass:
        preOpenInterest = _swig_property(_AlgoSE.HistoricalData_preOpenInterest_get, _AlgoSE.HistoricalData_preOpenInterest_set)
    __swig_setmethods__["averagePrice"] = _AlgoSE.HistoricalData_averagePrice_set
    __swig_getmethods__["averagePrice"] = _AlgoSE.HistoricalData_averagePrice_get
    if _newclass:
        averagePrice = _swig_property(_AlgoSE.HistoricalData_averagePrice_get, _AlgoSE.HistoricalData_averagePrice_set)
    __swig_setmethods__["depth"] = _AlgoSE.HistoricalData_depth_set
    __swig_getmethods__["depth"] = _AlgoSE.HistoricalData_depth_get
    if _newclass:
        depth = _swig_property(_AlgoSE.HistoricalData_depth_get, _AlgoSE.HistoricalData_depth_set)
    __swig_setmethods__["bidPrice1"] = _AlgoSE.HistoricalData_bidPrice1_set
    __swig_getmethods__["bidPrice1"] = _AlgoSE.HistoricalData_bidPrice1_get
    if _newclass:
        bidPrice1 = _swig_property(_AlgoSE.HistoricalData_bidPrice1_get, _AlgoSE.HistoricalData_bidPrice1_set)
    __swig_setmethods__["bidVolume1"] = _AlgoSE.HistoricalData_bidVolume1_set
    __swig_getmethods__["bidVolume1"] = _AlgoSE.HistoricalData_bidVolume1_get
    if _newclass:
        bidVolume1 = _swig_property(_AlgoSE.HistoricalData_bidVolume1_get, _AlgoSE.HistoricalData_bidVolume1_set)
    __swig_setmethods__["bidPrice2"] = _AlgoSE.HistoricalData_bidPrice2_set
    __swig_getmethods__["bidPrice2"] = _AlgoSE.HistoricalData_bidPrice2_get
    if _newclass:
        bidPrice2 = _swig_property(_AlgoSE.HistoricalData_bidPrice2_get, _AlgoSE.HistoricalData_bidPrice2_set)
    __swig_setmethods__["bidVolume2"] = _AlgoSE.HistoricalData_bidVolume2_set
    __swig_getmethods__["bidVolume2"] = _AlgoSE.HistoricalData_bidVolume2_get
    if _newclass:
        bidVolume2 = _swig_property(_AlgoSE.HistoricalData_bidVolume2_get, _AlgoSE.HistoricalData_bidVolume2_set)
    __swig_setmethods__["bidPrice3"] = _AlgoSE.HistoricalData_bidPrice3_set
    __swig_getmethods__["bidPrice3"] = _AlgoSE.HistoricalData_bidPrice3_get
    if _newclass:
        bidPrice3 = _swig_property(_AlgoSE.HistoricalData_bidPrice3_get, _AlgoSE.HistoricalData_bidPrice3_set)
    __swig_setmethods__["bidVolume3"] = _AlgoSE.HistoricalData_bidVolume3_set
    __swig_getmethods__["bidVolume3"] = _AlgoSE.HistoricalData_bidVolume3_get
    if _newclass:
        bidVolume3 = _swig_property(_AlgoSE.HistoricalData_bidVolume3_get, _AlgoSE.HistoricalData_bidVolume3_set)
    __swig_setmethods__["bidPrice4"] = _AlgoSE.HistoricalData_bidPrice4_set
    __swig_getmethods__["bidPrice4"] = _AlgoSE.HistoricalData_bidPrice4_get
    if _newclass:
        bidPrice4 = _swig_property(_AlgoSE.HistoricalData_bidPrice4_get, _AlgoSE.HistoricalData_bidPrice4_set)
    __swig_setmethods__["bidVolume4"] = _AlgoSE.HistoricalData_bidVolume4_set
    __swig_getmethods__["bidVolume4"] = _AlgoSE.HistoricalData_bidVolume4_get
    if _newclass:
        bidVolume4 = _swig_property(_AlgoSE.HistoricalData_bidVolume4_get, _AlgoSE.HistoricalData_bidVolume4_set)
    __swig_setmethods__["bidPrice5"] = _AlgoSE.HistoricalData_bidPrice5_set
    __swig_getmethods__["bidPrice5"] = _AlgoSE.HistoricalData_bidPrice5_get
    if _newclass:
        bidPrice5 = _swig_property(_AlgoSE.HistoricalData_bidPrice5_get, _AlgoSE.HistoricalData_bidPrice5_set)
    __swig_setmethods__["bidVolume5"] = _AlgoSE.HistoricalData_bidVolume5_set
    __swig_getmethods__["bidVolume5"] = _AlgoSE.HistoricalData_bidVolume5_get
    if _newclass:
        bidVolume5 = _swig_property(_AlgoSE.HistoricalData_bidVolume5_get, _AlgoSE.HistoricalData_bidVolume5_set)
    __swig_setmethods__["askPrice1"] = _AlgoSE.HistoricalData_askPrice1_set
    __swig_getmethods__["askPrice1"] = _AlgoSE.HistoricalData_askPrice1_get
    if _newclass:
        askPrice1 = _swig_property(_AlgoSE.HistoricalData_askPrice1_get, _AlgoSE.HistoricalData_askPrice1_set)
    __swig_setmethods__["askVolume1"] = _AlgoSE.HistoricalData_askVolume1_set
    __swig_getmethods__["askVolume1"] = _AlgoSE.HistoricalData_askVolume1_get
    if _newclass:
        askVolume1 = _swig_property(_AlgoSE.HistoricalData_askVolume1_get, _AlgoSE.HistoricalData_askVolume1_set)
    __swig_setmethods__["askPrice2"] = _AlgoSE.HistoricalData_askPrice2_set
    __swig_getmethods__["askPrice2"] = _AlgoSE.HistoricalData_askPrice2_get
    if _newclass:
        askPrice2 = _swig_property(_AlgoSE.HistoricalData_askPrice2_get, _AlgoSE.HistoricalData_askPrice2_set)
    __swig_setmethods__["askVolume2"] = _AlgoSE.HistoricalData_askVolume2_set
    __swig_getmethods__["askVolume2"] = _AlgoSE.HistoricalData_askVolume2_get
    if _newclass:
        askVolume2 = _swig_property(_AlgoSE.HistoricalData_askVolume2_get, _AlgoSE.HistoricalData_askVolume2_set)
    __swig_setmethods__["askPrice3"] = _AlgoSE.HistoricalData_askPrice3_set
    __swig_getmethods__["askPrice3"] = _AlgoSE.HistoricalData_askPrice3_get
    if _newclass:
        askPrice3 = _swig_property(_AlgoSE.HistoricalData_askPrice3_get, _AlgoSE.HistoricalData_askPrice3_set)
    __swig_setmethods__["askVolume3"] = _AlgoSE.HistoricalData_askVolume3_set
    __swig_getmethods__["askVolume3"] = _AlgoSE.HistoricalData_askVolume3_get
    if _newclass:
        askVolume3 = _swig_property(_AlgoSE.HistoricalData_askVolume3_get, _AlgoSE.HistoricalData_askVolume3_set)
    __swig_setmethods__["askPrice4"] = _AlgoSE.HistoricalData_askPrice4_set
    __swig_getmethods__["askPrice4"] = _AlgoSE.HistoricalData_askPrice4_get
    if _newclass:
        askPrice4 = _swig_property(_AlgoSE.HistoricalData_askPrice4_get, _AlgoSE.HistoricalData_askPrice4_set)
    __swig_setmethods__["askVolume4"] = _AlgoSE.HistoricalData_askVolume4_set
    __swig_getmethods__["askVolume4"] = _AlgoSE.HistoricalData_askVolume4_get
    if _newclass:
        askVolume4 = _swig_property(_AlgoSE.HistoricalData_askVolume4_get, _AlgoSE.HistoricalData_askVolume4_set)
    __swig_setmethods__["askPrice5"] = _AlgoSE.HistoricalData_askPrice5_set
    __swig_getmethods__["askPrice5"] = _AlgoSE.HistoricalData_askPrice5_get
    if _newclass:
        askPrice5 = _swig_property(_AlgoSE.HistoricalData_askPrice5_get, _AlgoSE.HistoricalData_askPrice5_set)
    __swig_setmethods__["askVolume5"] = _AlgoSE.HistoricalData_askVolume5_set
    __swig_getmethods__["askVolume5"] = _AlgoSE.HistoricalData_askVolume5_get
    if _newclass:
        askVolume5 = _swig_property(_AlgoSE.HistoricalData_askVolume5_get, _AlgoSE.HistoricalData_askVolume5_set)
    __swig_setmethods__["uncompleted"] = _AlgoSE.HistoricalData_uncompleted_set
    __swig_getmethods__["uncompleted"] = _AlgoSE.HistoricalData_uncompleted_get
    if _newclass:
        uncompleted = _swig_property(_AlgoSE.HistoricalData_uncompleted_get, _AlgoSE.HistoricalData_uncompleted_set)
    __swig_setmethods__["srvId"] = _AlgoSE.HistoricalData_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.HistoricalData_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.HistoricalData_srvId_get, _AlgoSE.HistoricalData_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_HistoricalData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_HistoricalData
    __del__ = lambda self: None
HistoricalData_swigregister = _AlgoSE.HistoricalData_swigregister
HistoricalData_swigregister(HistoricalData)

class OrderState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderState, name)
    __repr__ = _swig_repr
    UNKNOWN = _AlgoSE.OrderState_UNKNOWN
    INITIAL = _AlgoSE.OrderState_INITIAL
    PENDING_NEW = _AlgoSE.OrderState_PENDING_NEW
    SUBMITTED = _AlgoSE.OrderState_SUBMITTED
    ACCEPTED = _AlgoSE.OrderState_ACCEPTED
    PENDING_CANCEL = _AlgoSE.OrderState_PENDING_CANCEL
    CANCELED = _AlgoSE.OrderState_CANCELED
    PARTIALLY_FILLED = _AlgoSE.OrderState_PARTIALLY_FILLED
    FILLED = _AlgoSE.OrderState_FILLED
    REJECTED = _AlgoSE.OrderState_REJECTED

    def __init__(self):
        this = _AlgoSE.new_OrderState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_OrderState
    __del__ = lambda self: None
OrderState_swigregister = _AlgoSE.OrderState_swigregister
OrderState_swigregister(OrderState)

class OrderType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderType, name)
    __repr__ = _swig_repr
    MARKET = _AlgoSE.OrderType_MARKET
    LIMIT = _AlgoSE.OrderType_LIMIT
    STOP = _AlgoSE.OrderType_STOP
    STOP_LIMIT = _AlgoSE.OrderType_STOP_LIMIT

    def __init__(self):
        this = _AlgoSE.new_OrderType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_OrderType
    __del__ = lambda self: None
OrderType_swigregister = _AlgoSE.OrderType_swigregister
OrderType_swigregister(OrderType)

class OrderAction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderAction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderAction, name)
    __repr__ = _swig_repr
    BUY = _AlgoSE.OrderAction_BUY
    BUY_TO_COVER = _AlgoSE.OrderAction_BUY_TO_COVER
    SELL = _AlgoSE.OrderAction_SELL
    SELL_SHORT = _AlgoSE.OrderAction_SELL_SHORT

    def __init__(self):
        this = _AlgoSE.new_OrderAction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_OrderAction
    __del__ = lambda self: None
OrderAction_swigregister = _AlgoSE.OrderAction_swigregister
OrderAction_swigregister(OrderAction)

class OrderOperationRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderOperationRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderOperationRequest, name)
    __repr__ = _swig_repr
    CANCEL = _AlgoSE.OrderOperationRequest_CANCEL
    MODIFY = _AlgoSE.OrderOperationRequest_MODIFY
    SUSPEND = _AlgoSE.OrderOperationRequest_SUSPEND
    RESUME = _AlgoSE.OrderOperationRequest_RESUME

    def __init__(self):
        this = _AlgoSE.new_OrderOperationRequest()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_OrderOperationRequest
    __del__ = lambda self: None
OrderOperationRequest_swigregister = _AlgoSE.OrderOperationRequest_swigregister
OrderOperationRequest_swigregister(OrderOperationRequest)

class TimeInForce(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInForce, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInForce, name)
    __repr__ = _swig_repr
    DAY = _AlgoSE.TimeInForce_DAY
    GTC = _AlgoSE.TimeInForce_GTC
    OPG = _AlgoSE.TimeInForce_OPG
    IOC = _AlgoSE.TimeInForce_IOC
    FOK = _AlgoSE.TimeInForce_FOK
    GTX = _AlgoSE.TimeInForce_GTX
    GTD = _AlgoSE.TimeInForce_GTD

    def __init__(self):
        this = _AlgoSE.new_TimeInForce()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_TimeInForce
    __del__ = lambda self: None
TimeInForce_swigregister = _AlgoSE.TimeInForce_swigregister
TimeInForce_swigregister(TimeInForce)

class Order(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Order, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Order, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clOrdId"] = _AlgoSE.Order_clOrdId_set
    __swig_getmethods__["clOrdId"] = _AlgoSE.Order_clOrdId_get
    if _newclass:
        clOrdId = _swig_property(_AlgoSE.Order_clOrdId_get, _AlgoSE.Order_clOrdId_set)
    __swig_setmethods__["ordId"] = _AlgoSE.Order_ordId_set
    __swig_getmethods__["ordId"] = _AlgoSE.Order_ordId_get
    if _newclass:
        ordId = _swig_property(_AlgoSE.Order_ordId_get, _AlgoSE.Order_ordId_set)
    __swig_setmethods__["instrument"] = _AlgoSE.Order_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.Order_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.Order_instrument_get, _AlgoSE.Order_instrument_set)
    __swig_setmethods__["exchange"] = _AlgoSE.Order_exchange_set
    __swig_getmethods__["exchange"] = _AlgoSE.Order_exchange_get
    if _newclass:
        exchange = _swig_property(_AlgoSE.Order_exchange_get, _AlgoSE.Order_exchange_set)
    __swig_setmethods__["type"] = _AlgoSE.Order_type_set
    __swig_getmethods__["type"] = _AlgoSE.Order_type_get
    if _newclass:
        type = _swig_property(_AlgoSE.Order_type_get, _AlgoSE.Order_type_set)
    __swig_setmethods__["action"] = _AlgoSE.Order_action_set
    __swig_getmethods__["action"] = _AlgoSE.Order_action_get
    if _newclass:
        action = _swig_property(_AlgoSE.Order_action_get, _AlgoSE.Order_action_set)
    __swig_setmethods__["timeInforce"] = _AlgoSE.Order_timeInforce_set
    __swig_getmethods__["timeInforce"] = _AlgoSE.Order_timeInforce_get
    if _newclass:
        timeInforce = _swig_property(_AlgoSE.Order_timeInforce_get, _AlgoSE.Order_timeInforce_set)
    __swig_setmethods__["allOrNone"] = _AlgoSE.Order_allOrNone_set
    __swig_getmethods__["allOrNone"] = _AlgoSE.Order_allOrNone_get
    if _newclass:
        allOrNone = _swig_property(_AlgoSE.Order_allOrNone_get, _AlgoSE.Order_allOrNone_set)
    __swig_setmethods__["status"] = _AlgoSE.Order_status_set
    __swig_getmethods__["status"] = _AlgoSE.Order_status_get
    if _newclass:
        status = _swig_property(_AlgoSE.Order_status_get, _AlgoSE.Order_status_set)
    __swig_setmethods__["quantity"] = _AlgoSE.Order_quantity_set
    __swig_getmethods__["quantity"] = _AlgoSE.Order_quantity_get
    if _newclass:
        quantity = _swig_property(_AlgoSE.Order_quantity_get, _AlgoSE.Order_quantity_set)
    __swig_setmethods__["price"] = _AlgoSE.Order_price_set
    __swig_getmethods__["price"] = _AlgoSE.Order_price_get
    if _newclass:
        price = _swig_property(_AlgoSE.Order_price_get, _AlgoSE.Order_price_set)
    __swig_setmethods__["stopPx"] = _AlgoSE.Order_stopPx_set
    __swig_getmethods__["stopPx"] = _AlgoSE.Order_stopPx_get
    if _newclass:
        stopPx = _swig_property(_AlgoSE.Order_stopPx_get, _AlgoSE.Order_stopPx_set)
    __swig_setmethods__["tradedQty"] = _AlgoSE.Order_tradedQty_set
    __swig_getmethods__["tradedQty"] = _AlgoSE.Order_tradedQty_get
    if _newclass:
        tradedQty = _swig_property(_AlgoSE.Order_tradedQty_get, _AlgoSE.Order_tradedQty_set)
    __swig_setmethods__["avgTradedPx"] = _AlgoSE.Order_avgTradedPx_set
    __swig_getmethods__["avgTradedPx"] = _AlgoSE.Order_avgTradedPx_get
    if _newclass:
        avgTradedPx = _swig_property(_AlgoSE.Order_avgTradedPx_get, _AlgoSE.Order_avgTradedPx_set)
    __swig_setmethods__["lastTradedQty"] = _AlgoSE.Order_lastTradedQty_set
    __swig_getmethods__["lastTradedQty"] = _AlgoSE.Order_lastTradedQty_get
    if _newclass:
        lastTradedQty = _swig_property(_AlgoSE.Order_lastTradedQty_get, _AlgoSE.Order_lastTradedQty_set)
    __swig_setmethods__["lastTradedPx"] = _AlgoSE.Order_lastTradedPx_set
    __swig_getmethods__["lastTradedPx"] = _AlgoSE.Order_lastTradedPx_get
    if _newclass:
        lastTradedPx = _swig_property(_AlgoSE.Order_lastTradedPx_get, _AlgoSE.Order_lastTradedPx_set)
    __swig_setmethods__["timestamp"] = _AlgoSE.Order_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.Order_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.Order_timestamp_get, _AlgoSE.Order_timestamp_set)
    __swig_setmethods__["commissions"] = _AlgoSE.Order_commissions_set
    __swig_getmethods__["commissions"] = _AlgoSE.Order_commissions_get
    if _newclass:
        commissions = _swig_property(_AlgoSE.Order_commissions_get, _AlgoSE.Order_commissions_set)
    __swig_setmethods__["stateMsg"] = _AlgoSE.Order_stateMsg_set
    __swig_getmethods__["stateMsg"] = _AlgoSE.Order_stateMsg_get
    if _newclass:
        stateMsg = _swig_property(_AlgoSE.Order_stateMsg_get, _AlgoSE.Order_stateMsg_set)
    __swig_setmethods__["parentClOrdId"] = _AlgoSE.Order_parentClOrdId_set
    __swig_getmethods__["parentClOrdId"] = _AlgoSE.Order_parentClOrdId_get
    if _newclass:
        parentClOrdId = _swig_property(_AlgoSE.Order_parentClOrdId_get, _AlgoSE.Order_parentClOrdId_set)
    __swig_setmethods__["closeEffect"] = _AlgoSE.Order_closeEffect_set
    __swig_getmethods__["closeEffect"] = _AlgoSE.Order_closeEffect_get
    if _newclass:
        closeEffect = _swig_property(_AlgoSE.Order_closeEffect_get, _AlgoSE.Order_closeEffect_set)
    __swig_setmethods__["compId"] = _AlgoSE.Order_compId_set
    __swig_getmethods__["compId"] = _AlgoSE.Order_compId_get
    if _newclass:
        compId = _swig_property(_AlgoSE.Order_compId_get, _AlgoSE.Order_compId_set)
    __swig_setmethods__["ownerId"] = _AlgoSE.Order_ownerId_set
    __swig_getmethods__["ownerId"] = _AlgoSE.Order_ownerId_get
    if _newclass:
        ownerId = _swig_property(_AlgoSE.Order_ownerId_get, _AlgoSE.Order_ownerId_set)
    __swig_setmethods__["srvId"] = _AlgoSE.Order_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.Order_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.Order_srvId_get, _AlgoSE.Order_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_Order()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Order
    __del__ = lambda self: None
Order_swigregister = _AlgoSE.Order_swigregister
Order_swigregister(Order)

class Execution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Execution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Execution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["instrument"] = _AlgoSE.Execution_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.Execution_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.Execution_instrument_get, _AlgoSE.Execution_instrument_set)
    __swig_setmethods__["type"] = _AlgoSE.Execution_type_set
    __swig_getmethods__["type"] = _AlgoSE.Execution_type_get
    if _newclass:
        type = _swig_property(_AlgoSE.Execution_type_get, _AlgoSE.Execution_type_set)
    __swig_setmethods__["action"] = _AlgoSE.Execution_action_set
    __swig_getmethods__["action"] = _AlgoSE.Execution_action_get
    if _newclass:
        action = _swig_property(_AlgoSE.Execution_action_get, _AlgoSE.Execution_action_set)
    __swig_setmethods__["timestamp"] = _AlgoSE.Execution_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.Execution_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.Execution_timestamp_get, _AlgoSE.Execution_timestamp_set)
    __swig_setmethods__["quantity"] = _AlgoSE.Execution_quantity_set
    __swig_getmethods__["quantity"] = _AlgoSE.Execution_quantity_get
    if _newclass:
        quantity = _swig_property(_AlgoSE.Execution_quantity_get, _AlgoSE.Execution_quantity_set)
    __swig_setmethods__["price"] = _AlgoSE.Execution_price_set
    __swig_getmethods__["price"] = _AlgoSE.Execution_price_get
    if _newclass:
        price = _swig_property(_AlgoSE.Execution_price_get, _AlgoSE.Execution_price_set)
    __swig_setmethods__["closeEffect"] = _AlgoSE.Execution_closeEffect_set
    __swig_getmethods__["closeEffect"] = _AlgoSE.Execution_closeEffect_get
    if _newclass:
        closeEffect = _swig_property(_AlgoSE.Execution_closeEffect_get, _AlgoSE.Execution_closeEffect_set)
    __swig_setmethods__["clOrdId"] = _AlgoSE.Execution_clOrdId_set
    __swig_getmethods__["clOrdId"] = _AlgoSE.Execution_clOrdId_get
    if _newclass:
        clOrdId = _swig_property(_AlgoSE.Execution_clOrdId_get, _AlgoSE.Execution_clOrdId_set)
    __swig_setmethods__["ordId"] = _AlgoSE.Execution_ordId_set
    __swig_getmethods__["ordId"] = _AlgoSE.Execution_ordId_get
    if _newclass:
        ordId = _swig_property(_AlgoSE.Execution_ordId_get, _AlgoSE.Execution_ordId_set)
    __swig_setmethods__["execId"] = _AlgoSE.Execution_execId_set
    __swig_getmethods__["execId"] = _AlgoSE.Execution_execId_get
    if _newclass:
        execId = _swig_property(_AlgoSE.Execution_execId_get, _AlgoSE.Execution_execId_set)
    __swig_setmethods__["srvId"] = _AlgoSE.Execution_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.Execution_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.Execution_srvId_get, _AlgoSE.Execution_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_Execution()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Execution
    __del__ = lambda self: None
Execution_swigregister = _AlgoSE.Execution_swigregister
Execution_swigregister(Execution)

class CloseEffect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CloseEffect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CloseEffect, name)
    __repr__ = _swig_repr
    CLOSE = _AlgoSE.CloseEffect_CLOSE
    CLOSE_TODAY = _AlgoSE.CloseEffect_CLOSE_TODAY
    CLOSE_YESTERDAY = _AlgoSE.CloseEffect_CLOSE_YESTERDAY

    def __init__(self):
        this = _AlgoSE.new_CloseEffect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_CloseEffect
    __del__ = lambda self: None
CloseEffect_swigregister = _AlgoSE.CloseEffect_swigregister
CloseEffect_swigregister(CloseEffect)

class OrderOperation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderOperation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderOperation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clOrdId"] = _AlgoSE.OrderOperation_clOrdId_set
    __swig_getmethods__["clOrdId"] = _AlgoSE.OrderOperation_clOrdId_get
    if _newclass:
        clOrdId = _swig_property(_AlgoSE.OrderOperation_clOrdId_get, _AlgoSE.OrderOperation_clOrdId_set)
    __swig_setmethods__["ordId"] = _AlgoSE.OrderOperation_ordId_set
    __swig_getmethods__["ordId"] = _AlgoSE.OrderOperation_ordId_get
    if _newclass:
        ordId = _swig_property(_AlgoSE.OrderOperation_ordId_get, _AlgoSE.OrderOperation_ordId_set)
    __swig_setmethods__["origClOrdId"] = _AlgoSE.OrderOperation_origClOrdId_set
    __swig_getmethods__["origClOrdId"] = _AlgoSE.OrderOperation_origClOrdId_get
    if _newclass:
        origClOrdId = _swig_property(_AlgoSE.OrderOperation_origClOrdId_get, _AlgoSE.OrderOperation_origClOrdId_set)
    __swig_setmethods__["instrument"] = _AlgoSE.OrderOperation_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.OrderOperation_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.OrderOperation_instrument_get, _AlgoSE.OrderOperation_instrument_set)
    __swig_setmethods__["operation"] = _AlgoSE.OrderOperation_operation_set
    __swig_getmethods__["operation"] = _AlgoSE.OrderOperation_operation_get
    if _newclass:
        operation = _swig_property(_AlgoSE.OrderOperation_operation_get, _AlgoSE.OrderOperation_operation_set)
    __swig_setmethods__["timestamp"] = _AlgoSE.OrderOperation_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.OrderOperation_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.OrderOperation_timestamp_get, _AlgoSE.OrderOperation_timestamp_set)
    __swig_setmethods__["side"] = _AlgoSE.OrderOperation_side_set
    __swig_getmethods__["side"] = _AlgoSE.OrderOperation_side_get
    if _newclass:
        side = _swig_property(_AlgoSE.OrderOperation_side_get, _AlgoSE.OrderOperation_side_set)
    __swig_setmethods__["price"] = _AlgoSE.OrderOperation_price_set
    __swig_getmethods__["price"] = _AlgoSE.OrderOperation_price_get
    if _newclass:
        price = _swig_property(_AlgoSE.OrderOperation_price_get, _AlgoSE.OrderOperation_price_set)
    __swig_setmethods__["quantity"] = _AlgoSE.OrderOperation_quantity_set
    __swig_getmethods__["quantity"] = _AlgoSE.OrderOperation_quantity_get
    if _newclass:
        quantity = _swig_property(_AlgoSE.OrderOperation_quantity_get, _AlgoSE.OrderOperation_quantity_set)
    __swig_setmethods__["success"] = _AlgoSE.OrderOperation_success_set
    __swig_getmethods__["success"] = _AlgoSE.OrderOperation_success_get
    if _newclass:
        success = _swig_property(_AlgoSE.OrderOperation_success_get, _AlgoSE.OrderOperation_success_set)
    __swig_setmethods__["stateMsg"] = _AlgoSE.OrderOperation_stateMsg_set
    __swig_getmethods__["stateMsg"] = _AlgoSE.OrderOperation_stateMsg_get
    if _newclass:
        stateMsg = _swig_property(_AlgoSE.OrderOperation_stateMsg_get, _AlgoSE.OrderOperation_stateMsg_set)
    __swig_setmethods__["compId"] = _AlgoSE.OrderOperation_compId_set
    __swig_getmethods__["compId"] = _AlgoSE.OrderOperation_compId_get
    if _newclass:
        compId = _swig_property(_AlgoSE.OrderOperation_compId_get, _AlgoSE.OrderOperation_compId_set)
    __swig_setmethods__["ownerId"] = _AlgoSE.OrderOperation_ownerId_set
    __swig_getmethods__["ownerId"] = _AlgoSE.OrderOperation_ownerId_get
    if _newclass:
        ownerId = _swig_property(_AlgoSE.OrderOperation_ownerId_get, _AlgoSE.OrderOperation_ownerId_set)
    __swig_setmethods__["srvId"] = _AlgoSE.OrderOperation_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.OrderOperation_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.OrderOperation_srvId_get, _AlgoSE.OrderOperation_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_OrderOperation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_OrderOperation
    __del__ = lambda self: None
OrderOperation_swigregister = _AlgoSE.OrderOperation_swigregister
OrderOperation_swigregister(OrderOperation)

class AccountDetails(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountDetails, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccountDetails, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userId"] = _AlgoSE.AccountDetails_userId_set
    __swig_getmethods__["userId"] = _AlgoSE.AccountDetails_userId_get
    if _newclass:
        userId = _swig_property(_AlgoSE.AccountDetails_userId_get, _AlgoSE.AccountDetails_userId_set)
    __swig_setmethods__["password"] = _AlgoSE.AccountDetails_password_set
    __swig_getmethods__["password"] = _AlgoSE.AccountDetails_password_get
    if _newclass:
        password = _swig_property(_AlgoSE.AccountDetails_password_get, _AlgoSE.AccountDetails_password_set)
    __swig_setmethods__["userName"] = _AlgoSE.AccountDetails_userName_set
    __swig_getmethods__["userName"] = _AlgoSE.AccountDetails_userName_get
    if _newclass:
        userName = _swig_property(_AlgoSE.AccountDetails_userName_get, _AlgoSE.AccountDetails_userName_set)
    __swig_setmethods__["currency"] = _AlgoSE.AccountDetails_currency_set
    __swig_getmethods__["currency"] = _AlgoSE.AccountDetails_currency_get
    if _newclass:
        currency = _swig_property(_AlgoSE.AccountDetails_currency_get, _AlgoSE.AccountDetails_currency_set)
    __swig_setmethods__["preBalance"] = _AlgoSE.AccountDetails_preBalance_set
    __swig_getmethods__["preBalance"] = _AlgoSE.AccountDetails_preBalance_get
    if _newclass:
        preBalance = _swig_property(_AlgoSE.AccountDetails_preBalance_get, _AlgoSE.AccountDetails_preBalance_set)
    __swig_setmethods__["preDeposit"] = _AlgoSE.AccountDetails_preDeposit_set
    __swig_getmethods__["preDeposit"] = _AlgoSE.AccountDetails_preDeposit_get
    if _newclass:
        preDeposit = _swig_property(_AlgoSE.AccountDetails_preDeposit_get, _AlgoSE.AccountDetails_preDeposit_set)
    __swig_setmethods__["margin"] = _AlgoSE.AccountDetails_margin_set
    __swig_getmethods__["margin"] = _AlgoSE.AccountDetails_margin_get
    if _newclass:
        margin = _swig_property(_AlgoSE.AccountDetails_margin_get, _AlgoSE.AccountDetails_margin_set)
    __swig_setmethods__["lastFund"] = _AlgoSE.AccountDetails_lastFund_set
    __swig_getmethods__["lastFund"] = _AlgoSE.AccountDetails_lastFund_get
    if _newclass:
        lastFund = _swig_property(_AlgoSE.AccountDetails_lastFund_get, _AlgoSE.AccountDetails_lastFund_set)
    __swig_setmethods__["currMargin"] = _AlgoSE.AccountDetails_currMargin_set
    __swig_getmethods__["currMargin"] = _AlgoSE.AccountDetails_currMargin_get
    if _newclass:
        currMargin = _swig_property(_AlgoSE.AccountDetails_currMargin_get, _AlgoSE.AccountDetails_currMargin_set)
    __swig_setmethods__["deposit"] = _AlgoSE.AccountDetails_deposit_set
    __swig_getmethods__["deposit"] = _AlgoSE.AccountDetails_deposit_get
    if _newclass:
        deposit = _swig_property(_AlgoSE.AccountDetails_deposit_get, _AlgoSE.AccountDetails_deposit_set)
    __swig_setmethods__["withdraw"] = _AlgoSE.AccountDetails_withdraw_set
    __swig_getmethods__["withdraw"] = _AlgoSE.AccountDetails_withdraw_get
    if _newclass:
        withdraw = _swig_property(_AlgoSE.AccountDetails_withdraw_get, _AlgoSE.AccountDetails_withdraw_set)
    __swig_setmethods__["equity"] = _AlgoSE.AccountDetails_equity_set
    __swig_getmethods__["equity"] = _AlgoSE.AccountDetails_equity_get
    if _newclass:
        equity = _swig_property(_AlgoSE.AccountDetails_equity_get, _AlgoSE.AccountDetails_equity_set)
    __swig_setmethods__["availFunds"] = _AlgoSE.AccountDetails_availFunds_set
    __swig_getmethods__["availFunds"] = _AlgoSE.AccountDetails_availFunds_get
    if _newclass:
        availFunds = _swig_property(_AlgoSE.AccountDetails_availFunds_get, _AlgoSE.AccountDetails_availFunds_set)
    __swig_setmethods__["buyFreeze"] = _AlgoSE.AccountDetails_buyFreeze_set
    __swig_getmethods__["buyFreeze"] = _AlgoSE.AccountDetails_buyFreeze_get
    if _newclass:
        buyFreeze = _swig_property(_AlgoSE.AccountDetails_buyFreeze_get, _AlgoSE.AccountDetails_buyFreeze_set)
    __swig_setmethods__["sellFreeze"] = _AlgoSE.AccountDetails_sellFreeze_set
    __swig_getmethods__["sellFreeze"] = _AlgoSE.AccountDetails_sellFreeze_get
    if _newclass:
        sellFreeze = _swig_property(_AlgoSE.AccountDetails_sellFreeze_get, _AlgoSE.AccountDetails_sellFreeze_set)
    __swig_setmethods__["buyBond"] = _AlgoSE.AccountDetails_buyBond_set
    __swig_getmethods__["buyBond"] = _AlgoSE.AccountDetails_buyBond_get
    if _newclass:
        buyBond = _swig_property(_AlgoSE.AccountDetails_buyBond_get, _AlgoSE.AccountDetails_buyBond_set)
    __swig_setmethods__["sellBond"] = _AlgoSE.AccountDetails_sellBond_set
    __swig_getmethods__["sellBond"] = _AlgoSE.AccountDetails_sellBond_get
    if _newclass:
        sellBond = _swig_property(_AlgoSE.AccountDetails_sellBond_get, _AlgoSE.AccountDetails_sellBond_set)
    __swig_setmethods__["realizedPnL"] = _AlgoSE.AccountDetails_realizedPnL_set
    __swig_getmethods__["realizedPnL"] = _AlgoSE.AccountDetails_realizedPnL_get
    if _newclass:
        realizedPnL = _swig_property(_AlgoSE.AccountDetails_realizedPnL_get, _AlgoSE.AccountDetails_realizedPnL_set)
    __swig_setmethods__["unrealizedPnL"] = _AlgoSE.AccountDetails_unrealizedPnL_set
    __swig_getmethods__["unrealizedPnL"] = _AlgoSE.AccountDetails_unrealizedPnL_get
    if _newclass:
        unrealizedPnL = _swig_property(_AlgoSE.AccountDetails_unrealizedPnL_get, _AlgoSE.AccountDetails_unrealizedPnL_set)
    __swig_setmethods__["totalBond"] = _AlgoSE.AccountDetails_totalBond_set
    __swig_getmethods__["totalBond"] = _AlgoSE.AccountDetails_totalBond_get
    if _newclass:
        totalBond = _swig_property(_AlgoSE.AccountDetails_totalBond_get, _AlgoSE.AccountDetails_totalBond_set)
    __swig_setmethods__["totalExBond"] = _AlgoSE.AccountDetails_totalExBond_set
    __swig_getmethods__["totalExBond"] = _AlgoSE.AccountDetails_totalExBond_get
    if _newclass:
        totalExBond = _swig_property(_AlgoSE.AccountDetails_totalExBond_get, _AlgoSE.AccountDetails_totalExBond_set)
    __swig_setmethods__["todayReleaseFund"] = _AlgoSE.AccountDetails_todayReleaseFund_set
    __swig_getmethods__["todayReleaseFund"] = _AlgoSE.AccountDetails_todayReleaseFund_get
    if _newclass:
        todayReleaseFund = _swig_property(_AlgoSE.AccountDetails_todayReleaseFund_get, _AlgoSE.AccountDetails_todayReleaseFund_set)
    __swig_setmethods__["comFreeze"] = _AlgoSE.AccountDetails_comFreeze_set
    __swig_getmethods__["comFreeze"] = _AlgoSE.AccountDetails_comFreeze_get
    if _newclass:
        comFreeze = _swig_property(_AlgoSE.AccountDetails_comFreeze_get, _AlgoSE.AccountDetails_comFreeze_set)
    __swig_setmethods__["commission"] = _AlgoSE.AccountDetails_commission_set
    __swig_getmethods__["commission"] = _AlgoSE.AccountDetails_commission_get
    if _newclass:
        commission = _swig_property(_AlgoSE.AccountDetails_commission_get, _AlgoSE.AccountDetails_commission_set)
    __swig_setmethods__["otherFreeze"] = _AlgoSE.AccountDetails_otherFreeze_set
    __swig_getmethods__["otherFreeze"] = _AlgoSE.AccountDetails_otherFreeze_get
    if _newclass:
        otherFreeze = _swig_property(_AlgoSE.AccountDetails_otherFreeze_get, _AlgoSE.AccountDetails_otherFreeze_set)
    __swig_setmethods__["totalFreeze"] = _AlgoSE.AccountDetails_totalFreeze_set
    __swig_getmethods__["totalFreeze"] = _AlgoSE.AccountDetails_totalFreeze_get
    if _newclass:
        totalFreeze = _swig_property(_AlgoSE.AccountDetails_totalFreeze_get, _AlgoSE.AccountDetails_totalFreeze_set)
    __swig_setmethods__["riskLevel"] = _AlgoSE.AccountDetails_riskLevel_set
    __swig_getmethods__["riskLevel"] = _AlgoSE.AccountDetails_riskLevel_get
    if _newclass:
        riskLevel = _swig_property(_AlgoSE.AccountDetails_riskLevel_get, _AlgoSE.AccountDetails_riskLevel_set)
    __swig_setmethods__["validFields"] = _AlgoSE.AccountDetails_validFields_set
    __swig_getmethods__["validFields"] = _AlgoSE.AccountDetails_validFields_get
    if _newclass:
        validFields = _swig_property(_AlgoSE.AccountDetails_validFields_get, _AlgoSE.AccountDetails_validFields_set)
    __swig_setmethods__["srvId"] = _AlgoSE.AccountDetails_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.AccountDetails_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.AccountDetails_srvId_get, _AlgoSE.AccountDetails_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_AccountDetails()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_AccountDetails
    __del__ = lambda self: None
AccountDetails_swigregister = _AlgoSE.AccountDetails_swigregister
AccountDetails_swigregister(AccountDetails)

class SecurityDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityDefinition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["instrument"] = _AlgoSE.SecurityDefinition_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.SecurityDefinition_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.SecurityDefinition_instrument_get, _AlgoSE.SecurityDefinition_instrument_set)
    __swig_setmethods__["secType"] = _AlgoSE.SecurityDefinition_secType_set
    __swig_getmethods__["secType"] = _AlgoSE.SecurityDefinition_secType_get
    if _newclass:
        secType = _swig_property(_AlgoSE.SecurityDefinition_secType_get, _AlgoSE.SecurityDefinition_secType_set)
    __swig_setmethods__["secName"] = _AlgoSE.SecurityDefinition_secName_set
    __swig_getmethods__["secName"] = _AlgoSE.SecurityDefinition_secName_get
    if _newclass:
        secName = _swig_property(_AlgoSE.SecurityDefinition_secName_get, _AlgoSE.SecurityDefinition_secName_set)
    __swig_setmethods__["exchgCode"] = _AlgoSE.SecurityDefinition_exchgCode_set
    __swig_getmethods__["exchgCode"] = _AlgoSE.SecurityDefinition_exchgCode_get
    if _newclass:
        exchgCode = _swig_property(_AlgoSE.SecurityDefinition_exchgCode_get, _AlgoSE.SecurityDefinition_exchgCode_set)
    __swig_setmethods__["upperLimitPrice"] = _AlgoSE.SecurityDefinition_upperLimitPrice_set
    __swig_getmethods__["upperLimitPrice"] = _AlgoSE.SecurityDefinition_upperLimitPrice_get
    if _newclass:
        upperLimitPrice = _swig_property(_AlgoSE.SecurityDefinition_upperLimitPrice_get, _AlgoSE.SecurityDefinition_upperLimitPrice_set)
    __swig_setmethods__["lowerLimitPrice"] = _AlgoSE.SecurityDefinition_lowerLimitPrice_set
    __swig_getmethods__["lowerLimitPrice"] = _AlgoSE.SecurityDefinition_lowerLimitPrice_get
    if _newclass:
        lowerLimitPrice = _swig_property(_AlgoSE.SecurityDefinition_lowerLimitPrice_get, _AlgoSE.SecurityDefinition_lowerLimitPrice_set)
    __swig_setmethods__["longMarginRatio"] = _AlgoSE.SecurityDefinition_longMarginRatio_set
    __swig_getmethods__["longMarginRatio"] = _AlgoSE.SecurityDefinition_longMarginRatio_get
    if _newclass:
        longMarginRatio = _swig_property(_AlgoSE.SecurityDefinition_longMarginRatio_get, _AlgoSE.SecurityDefinition_longMarginRatio_set)
    __swig_setmethods__["shortMarginRatio"] = _AlgoSE.SecurityDefinition_shortMarginRatio_set
    __swig_getmethods__["shortMarginRatio"] = _AlgoSE.SecurityDefinition_shortMarginRatio_get
    if _newclass:
        shortMarginRatio = _swig_property(_AlgoSE.SecurityDefinition_shortMarginRatio_get, _AlgoSE.SecurityDefinition_shortMarginRatio_set)
    __swig_setmethods__["multiplier"] = _AlgoSE.SecurityDefinition_multiplier_set
    __swig_getmethods__["multiplier"] = _AlgoSE.SecurityDefinition_multiplier_get
    if _newclass:
        multiplier = _swig_property(_AlgoSE.SecurityDefinition_multiplier_get, _AlgoSE.SecurityDefinition_multiplier_set)
    __swig_setmethods__["tickSize"] = _AlgoSE.SecurityDefinition_tickSize_set
    __swig_getmethods__["tickSize"] = _AlgoSE.SecurityDefinition_tickSize_get
    if _newclass:
        tickSize = _swig_property(_AlgoSE.SecurityDefinition_tickSize_get, _AlgoSE.SecurityDefinition_tickSize_set)
    __swig_setmethods__["isTrading"] = _AlgoSE.SecurityDefinition_isTrading_set
    __swig_getmethods__["isTrading"] = _AlgoSE.SecurityDefinition_isTrading_get
    if _newclass:
        isTrading = _swig_property(_AlgoSE.SecurityDefinition_isTrading_get, _AlgoSE.SecurityDefinition_isTrading_set)
    __swig_setmethods__["srvId"] = _AlgoSE.SecurityDefinition_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.SecurityDefinition_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.SecurityDefinition_srvId_get, _AlgoSE.SecurityDefinition_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_SecurityDefinition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_SecurityDefinition
    __del__ = lambda self: None
SecurityDefinition_swigregister = _AlgoSE.SecurityDefinition_swigregister
SecurityDefinition_swigregister(SecurityDefinition)

class PositionSide(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionSide, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionSide, name)
    __repr__ = _swig_repr
    POSITION_SIDE_LONG = _AlgoSE.PositionSide_POSITION_SIDE_LONG
    POSITION_SIDE_SHORT = _AlgoSE.PositionSide_POSITION_SIDE_SHORT

    def __init__(self):
        this = _AlgoSE.new_PositionSide()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_PositionSide
    __del__ = lambda self: None
PositionSide_swigregister = _AlgoSE.PositionSide_swigregister
PositionSide_swigregister(PositionSide)

class AccountPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccountPosition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["instrument"] = _AlgoSE.AccountPosition_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.AccountPosition_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.AccountPosition_instrument_get, _AlgoSE.AccountPosition_instrument_set)
    __swig_setmethods__["side"] = _AlgoSE.AccountPosition_side_set
    __swig_getmethods__["side"] = _AlgoSE.AccountPosition_side_get
    if _newclass:
        side = _swig_property(_AlgoSE.AccountPosition_side_get, _AlgoSE.AccountPosition_side_set)
    __swig_setmethods__["cumQty"] = _AlgoSE.AccountPosition_cumQty_set
    __swig_getmethods__["cumQty"] = _AlgoSE.AccountPosition_cumQty_get
    if _newclass:
        cumQty = _swig_property(_AlgoSE.AccountPosition_cumQty_get, _AlgoSE.AccountPosition_cumQty_set)
    __swig_setmethods__["todayQty"] = _AlgoSE.AccountPosition_todayQty_set
    __swig_getmethods__["todayQty"] = _AlgoSE.AccountPosition_todayQty_get
    if _newclass:
        todayQty = _swig_property(_AlgoSE.AccountPosition_todayQty_get, _AlgoSE.AccountPosition_todayQty_set)
    __swig_setmethods__["histQty"] = _AlgoSE.AccountPosition_histQty_set
    __swig_getmethods__["histQty"] = _AlgoSE.AccountPosition_histQty_get
    if _newclass:
        histQty = _swig_property(_AlgoSE.AccountPosition_histQty_get, _AlgoSE.AccountPosition_histQty_set)
    __swig_setmethods__["frozen"] = _AlgoSE.AccountPosition_frozen_set
    __swig_getmethods__["frozen"] = _AlgoSE.AccountPosition_frozen_get
    if _newclass:
        frozen = _swig_property(_AlgoSE.AccountPosition_frozen_get, _AlgoSE.AccountPosition_frozen_set)
    __swig_setmethods__["histFrozen"] = _AlgoSE.AccountPosition_histFrozen_set
    __swig_getmethods__["histFrozen"] = _AlgoSE.AccountPosition_histFrozen_get
    if _newclass:
        histFrozen = _swig_property(_AlgoSE.AccountPosition_histFrozen_get, _AlgoSE.AccountPosition_histFrozen_set)
    __swig_setmethods__["unformed"] = _AlgoSE.AccountPosition_unformed_set
    __swig_getmethods__["unformed"] = _AlgoSE.AccountPosition_unformed_get
    if _newclass:
        unformed = _swig_property(_AlgoSE.AccountPosition_unformed_get, _AlgoSE.AccountPosition_unformed_set)
    __swig_setmethods__["preSettlmntPx"] = _AlgoSE.AccountPosition_preSettlmntPx_set
    __swig_getmethods__["preSettlmntPx"] = _AlgoSE.AccountPosition_preSettlmntPx_get
    if _newclass:
        preSettlmntPx = _swig_property(_AlgoSE.AccountPosition_preSettlmntPx_get, _AlgoSE.AccountPosition_preSettlmntPx_set)
    __swig_setmethods__["cost"] = _AlgoSE.AccountPosition_cost_set
    __swig_getmethods__["cost"] = _AlgoSE.AccountPosition_cost_get
    if _newclass:
        cost = _swig_property(_AlgoSE.AccountPosition_cost_get, _AlgoSE.AccountPosition_cost_set)
    __swig_setmethods__["avgPx"] = _AlgoSE.AccountPosition_avgPx_set
    __swig_getmethods__["avgPx"] = _AlgoSE.AccountPosition_avgPx_get
    if _newclass:
        avgPx = _swig_property(_AlgoSE.AccountPosition_avgPx_get, _AlgoSE.AccountPosition_avgPx_set)
    __swig_setmethods__["unrealizedPnL"] = _AlgoSE.AccountPosition_unrealizedPnL_set
    __swig_getmethods__["unrealizedPnL"] = _AlgoSE.AccountPosition_unrealizedPnL_get
    if _newclass:
        unrealizedPnL = _swig_property(_AlgoSE.AccountPosition_unrealizedPnL_get, _AlgoSE.AccountPosition_unrealizedPnL_set)
    __swig_setmethods__["realizedPnL"] = _AlgoSE.AccountPosition_realizedPnL_set
    __swig_getmethods__["realizedPnL"] = _AlgoSE.AccountPosition_realizedPnL_get
    if _newclass:
        realizedPnL = _swig_property(_AlgoSE.AccountPosition_realizedPnL_get, _AlgoSE.AccountPosition_realizedPnL_set)
    __swig_setmethods__["margin"] = _AlgoSE.AccountPosition_margin_set
    __swig_getmethods__["margin"] = _AlgoSE.AccountPosition_margin_get
    if _newclass:
        margin = _swig_property(_AlgoSE.AccountPosition_margin_get, _AlgoSE.AccountPosition_margin_set)
    __swig_setmethods__["lastOpenTime"] = _AlgoSE.AccountPosition_lastOpenTime_set
    __swig_getmethods__["lastOpenTime"] = _AlgoSE.AccountPosition_lastOpenTime_get
    if _newclass:
        lastOpenTime = _swig_property(_AlgoSE.AccountPosition_lastOpenTime_get, _AlgoSE.AccountPosition_lastOpenTime_set)
    __swig_setmethods__["lastOpenPx"] = _AlgoSE.AccountPosition_lastOpenPx_set
    __swig_getmethods__["lastOpenPx"] = _AlgoSE.AccountPosition_lastOpenPx_get
    if _newclass:
        lastOpenPx = _swig_property(_AlgoSE.AccountPosition_lastOpenPx_get, _AlgoSE.AccountPosition_lastOpenPx_set)
    __swig_setmethods__["lastOpenQty"] = _AlgoSE.AccountPosition_lastOpenQty_set
    __swig_getmethods__["lastOpenQty"] = _AlgoSE.AccountPosition_lastOpenQty_get
    if _newclass:
        lastOpenQty = _swig_property(_AlgoSE.AccountPosition_lastOpenQty_get, _AlgoSE.AccountPosition_lastOpenQty_set)
    __swig_setmethods__["lastCloseTime"] = _AlgoSE.AccountPosition_lastCloseTime_set
    __swig_getmethods__["lastCloseTime"] = _AlgoSE.AccountPosition_lastCloseTime_get
    if _newclass:
        lastCloseTime = _swig_property(_AlgoSE.AccountPosition_lastCloseTime_get, _AlgoSE.AccountPosition_lastCloseTime_set)
    __swig_setmethods__["lastClosePx"] = _AlgoSE.AccountPosition_lastClosePx_set
    __swig_getmethods__["lastClosePx"] = _AlgoSE.AccountPosition_lastClosePx_get
    if _newclass:
        lastClosePx = _swig_property(_AlgoSE.AccountPosition_lastClosePx_get, _AlgoSE.AccountPosition_lastClosePx_set)
    __swig_setmethods__["lastCloseQty"] = _AlgoSE.AccountPosition_lastCloseQty_set
    __swig_getmethods__["lastCloseQty"] = _AlgoSE.AccountPosition_lastCloseQty_get
    if _newclass:
        lastCloseQty = _swig_property(_AlgoSE.AccountPosition_lastCloseQty_get, _AlgoSE.AccountPosition_lastCloseQty_set)
    __swig_setmethods__["histHighestPx"] = _AlgoSE.AccountPosition_histHighestPx_set
    __swig_getmethods__["histHighestPx"] = _AlgoSE.AccountPosition_histHighestPx_get
    if _newclass:
        histHighestPx = _swig_property(_AlgoSE.AccountPosition_histHighestPx_get, _AlgoSE.AccountPosition_histHighestPx_set)
    __swig_setmethods__["histLowestPx"] = _AlgoSE.AccountPosition_histLowestPx_set
    __swig_getmethods__["histLowestPx"] = _AlgoSE.AccountPosition_histLowestPx_get
    if _newclass:
        histLowestPx = _swig_property(_AlgoSE.AccountPosition_histLowestPx_get, _AlgoSE.AccountPosition_histLowestPx_set)
    __swig_setmethods__["accountId"] = _AlgoSE.AccountPosition_accountId_set
    __swig_getmethods__["accountId"] = _AlgoSE.AccountPosition_accountId_get
    if _newclass:
        accountId = _swig_property(_AlgoSE.AccountPosition_accountId_get, _AlgoSE.AccountPosition_accountId_set)
    __swig_setmethods__["srvId"] = _AlgoSE.AccountPosition_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.AccountPosition_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.AccountPosition_srvId_get, _AlgoSE.AccountPosition_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_AccountPosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_AccountPosition
    __del__ = lambda self: None
AccountPosition_swigregister = _AlgoSE.AccountPosition_swigregister
AccountPosition_swigregister(AccountPosition)

class ServiceStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srvId"] = _AlgoSE.ServiceStatus_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.ServiceStatus_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.ServiceStatus_srvId_get, _AlgoSE.ServiceStatus_srvId_set)
    __swig_setmethods__["type"] = _AlgoSE.ServiceStatus_type_set
    __swig_getmethods__["type"] = _AlgoSE.ServiceStatus_type_get
    if _newclass:
        type = _swig_property(_AlgoSE.ServiceStatus_type_get, _AlgoSE.ServiceStatus_type_set)
    __swig_setmethods__["state"] = _AlgoSE.ServiceStatus_state_set
    __swig_getmethods__["state"] = _AlgoSE.ServiceStatus_state_get
    if _newclass:
        state = _swig_property(_AlgoSE.ServiceStatus_state_get, _AlgoSE.ServiceStatus_state_set)
    __swig_setmethods__["name"] = _AlgoSE.ServiceStatus_name_set
    __swig_getmethods__["name"] = _AlgoSE.ServiceStatus_name_get
    if _newclass:
        name = _swig_property(_AlgoSE.ServiceStatus_name_get, _AlgoSE.ServiceStatus_name_set)
    __swig_setmethods__["desc"] = _AlgoSE.ServiceStatus_desc_set
    __swig_getmethods__["desc"] = _AlgoSE.ServiceStatus_desc_get
    if _newclass:
        desc = _swig_property(_AlgoSE.ServiceStatus_desc_get, _AlgoSE.ServiceStatus_desc_set)

    def __init__(self):
        this = _AlgoSE.new_ServiceStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_ServiceStatus
    __del__ = lambda self: None
ServiceStatus_swigregister = _AlgoSE.ServiceStatus_swigregister
ServiceStatus_swigregister(ServiceStatus)

class StrategyParamType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyParamType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyParamType, name)
    __repr__ = _swig_repr
    PARAM_TYPE_BOOL = _AlgoSE.StrategyParamType_PARAM_TYPE_BOOL
    PARAM_TYPE_INT = _AlgoSE.StrategyParamType_PARAM_TYPE_INT
    PARAM_TYPE_FLOAT = _AlgoSE.StrategyParamType_PARAM_TYPE_FLOAT
    PARAM_TYPE_STRING = _AlgoSE.StrategyParamType_PARAM_TYPE_STRING

    def __init__(self):
        this = _AlgoSE.new_StrategyParamType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_StrategyParamType
    __del__ = lambda self: None
StrategyParamType_swigregister = _AlgoSE.StrategyParamType_swigregister
StrategyParamType_swigregister(StrategyParamType)

class StrategyParamCategory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyParamCategory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyParamCategory, name)
    __repr__ = _swig_repr
    PARAM_CATEGORY_SYSTEM = _AlgoSE.StrategyParamCategory_PARAM_CATEGORY_SYSTEM
    PARAM_CATEGORY_ALGO_TRADER = _AlgoSE.StrategyParamCategory_PARAM_CATEGORY_ALGO_TRADER
    PARAM_CATEGORY_USER = _AlgoSE.StrategyParamCategory_PARAM_CATEGORY_USER

    def __init__(self):
        this = _AlgoSE.new_StrategyParamCategory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_StrategyParamCategory
    __del__ = lambda self: None
StrategyParamCategory_swigregister = _AlgoSE.StrategyParamCategory_swigregister
StrategyParamCategory_swigregister(StrategyParamCategory)

class StrategyParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["strategyId"] = _AlgoSE.StrategyParam_strategyId_set
    __swig_getmethods__["strategyId"] = _AlgoSE.StrategyParam_strategyId_get
    if _newclass:
        strategyId = _swig_property(_AlgoSE.StrategyParam_strategyId_get, _AlgoSE.StrategyParam_strategyId_set)
    __swig_setmethods__["category"] = _AlgoSE.StrategyParam_category_set
    __swig_getmethods__["category"] = _AlgoSE.StrategyParam_category_get
    if _newclass:
        category = _swig_property(_AlgoSE.StrategyParam_category_get, _AlgoSE.StrategyParam_category_set)
    __swig_setmethods__["type"] = _AlgoSE.StrategyParam_type_set
    __swig_getmethods__["type"] = _AlgoSE.StrategyParam_type_get
    if _newclass:
        type = _swig_property(_AlgoSE.StrategyParam_type_get, _AlgoSE.StrategyParam_type_set)
    __swig_setmethods__["name"] = _AlgoSE.StrategyParam_name_set
    __swig_getmethods__["name"] = _AlgoSE.StrategyParam_name_get
    if _newclass:
        name = _swig_property(_AlgoSE.StrategyParam_name_get, _AlgoSE.StrategyParam_name_set)
    __swig_setmethods__["value"] = _AlgoSE.StrategyParam_value_set
    __swig_getmethods__["value"] = _AlgoSE.StrategyParam_value_get
    if _newclass:
        value = _swig_property(_AlgoSE.StrategyParam_value_get, _AlgoSE.StrategyParam_value_set)
    __swig_setmethods__["start"] = _AlgoSE.StrategyParam_start_set
    __swig_getmethods__["start"] = _AlgoSE.StrategyParam_start_get
    if _newclass:
        start = _swig_property(_AlgoSE.StrategyParam_start_get, _AlgoSE.StrategyParam_start_set)
    __swig_setmethods__["end"] = _AlgoSE.StrategyParam_end_set
    __swig_getmethods__["end"] = _AlgoSE.StrategyParam_end_get
    if _newclass:
        end = _swig_property(_AlgoSE.StrategyParam_end_get, _AlgoSE.StrategyParam_end_set)
    __swig_setmethods__["step"] = _AlgoSE.StrategyParam_step_set
    __swig_getmethods__["step"] = _AlgoSE.StrategyParam_step_get
    if _newclass:
        step = _swig_property(_AlgoSE.StrategyParam_step_get, _AlgoSE.StrategyParam_step_set)
    __swig_setmethods__["isLast"] = _AlgoSE.StrategyParam_isLast_set
    __swig_getmethods__["isLast"] = _AlgoSE.StrategyParam_isLast_get
    if _newclass:
        isLast = _swig_property(_AlgoSE.StrategyParam_isLast_get, _AlgoSE.StrategyParam_isLast_set)

    def __init__(self):
        this = _AlgoSE.new_StrategyParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_StrategyParam
    __del__ = lambda self: None
StrategyParam_swigregister = _AlgoSE.StrategyParam_swigregister
StrategyParam_swigregister(StrategyParam)

class StrategyLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyLog, name)
    __repr__ = _swig_repr
    __swig_setmethods__["strategyId"] = _AlgoSE.StrategyLog_strategyId_set
    __swig_getmethods__["strategyId"] = _AlgoSE.StrategyLog_strategyId_get
    if _newclass:
        strategyId = _swig_property(_AlgoSE.StrategyLog_strategyId_get, _AlgoSE.StrategyLog_strategyId_set)
    __swig_setmethods__["timestamp"] = _AlgoSE.StrategyLog_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.StrategyLog_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.StrategyLog_timestamp_get, _AlgoSE.StrategyLog_timestamp_set)
    __swig_setmethods__["level"] = _AlgoSE.StrategyLog_level_set
    __swig_getmethods__["level"] = _AlgoSE.StrategyLog_level_get
    if _newclass:
        level = _swig_property(_AlgoSE.StrategyLog_level_get, _AlgoSE.StrategyLog_level_set)
    __swig_setmethods__["text"] = _AlgoSE.StrategyLog_text_set
    __swig_getmethods__["text"] = _AlgoSE.StrategyLog_text_get
    if _newclass:
        text = _swig_property(_AlgoSE.StrategyLog_text_get, _AlgoSE.StrategyLog_text_set)

    def __init__(self):
        this = _AlgoSE.new_StrategyLog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_StrategyLog
    __del__ = lambda self: None
StrategyLog_swigregister = _AlgoSE.StrategyLog_swigregister
StrategyLog_swigregister(StrategyLog)

class StrategyPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyPosition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["strategyId"] = _AlgoSE.StrategyPosition_strategyId_set
    __swig_getmethods__["strategyId"] = _AlgoSE.StrategyPosition_strategyId_get
    if _newclass:
        strategyId = _swig_property(_AlgoSE.StrategyPosition_strategyId_get, _AlgoSE.StrategyPosition_strategyId_set)
    __swig_setmethods__["instrument"] = _AlgoSE.StrategyPosition_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.StrategyPosition_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.StrategyPosition_instrument_get, _AlgoSE.StrategyPosition_instrument_set)
    __swig_setmethods__["timestamp"] = _AlgoSE.StrategyPosition_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.StrategyPosition_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.StrategyPosition_timestamp_get, _AlgoSE.StrategyPosition_timestamp_set)
    __swig_setmethods__["side"] = _AlgoSE.StrategyPosition_side_set
    __swig_getmethods__["side"] = _AlgoSE.StrategyPosition_side_get
    if _newclass:
        side = _swig_property(_AlgoSE.StrategyPosition_side_get, _AlgoSE.StrategyPosition_side_set)
    __swig_setmethods__["quantity"] = _AlgoSE.StrategyPosition_quantity_set
    __swig_getmethods__["quantity"] = _AlgoSE.StrategyPosition_quantity_get
    if _newclass:
        quantity = _swig_property(_AlgoSE.StrategyPosition_quantity_get, _AlgoSE.StrategyPosition_quantity_set)
    __swig_setmethods__["frozen"] = _AlgoSE.StrategyPosition_frozen_set
    __swig_getmethods__["frozen"] = _AlgoSE.StrategyPosition_frozen_get
    if _newclass:
        frozen = _swig_property(_AlgoSE.StrategyPosition_frozen_get, _AlgoSE.StrategyPosition_frozen_set)
    __swig_setmethods__["unformed"] = _AlgoSE.StrategyPosition_unformed_set
    __swig_getmethods__["unformed"] = _AlgoSE.StrategyPosition_unformed_get
    if _newclass:
        unformed = _swig_property(_AlgoSE.StrategyPosition_unformed_get, _AlgoSE.StrategyPosition_unformed_set)
    __swig_setmethods__["avgPx"] = _AlgoSE.StrategyPosition_avgPx_set
    __swig_getmethods__["avgPx"] = _AlgoSE.StrategyPosition_avgPx_get
    if _newclass:
        avgPx = _swig_property(_AlgoSE.StrategyPosition_avgPx_get, _AlgoSE.StrategyPosition_avgPx_set)
    __swig_setmethods__["margin"] = _AlgoSE.StrategyPosition_margin_set
    __swig_getmethods__["margin"] = _AlgoSE.StrategyPosition_margin_get
    if _newclass:
        margin = _swig_property(_AlgoSE.StrategyPosition_margin_get, _AlgoSE.StrategyPosition_margin_set)
    __swig_setmethods__["unrealizedPnL"] = _AlgoSE.StrategyPosition_unrealizedPnL_set
    __swig_getmethods__["unrealizedPnL"] = _AlgoSE.StrategyPosition_unrealizedPnL_get
    if _newclass:
        unrealizedPnL = _swig_property(_AlgoSE.StrategyPosition_unrealizedPnL_get, _AlgoSE.StrategyPosition_unrealizedPnL_set)
    __swig_setmethods__["realizedPnL"] = _AlgoSE.StrategyPosition_realizedPnL_set
    __swig_getmethods__["realizedPnL"] = _AlgoSE.StrategyPosition_realizedPnL_get
    if _newclass:
        realizedPnL = _swig_property(_AlgoSE.StrategyPosition_realizedPnL_get, _AlgoSE.StrategyPosition_realizedPnL_set)
    __swig_setmethods__["highestPx"] = _AlgoSE.StrategyPosition_highestPx_set
    __swig_getmethods__["highestPx"] = _AlgoSE.StrategyPosition_highestPx_get
    if _newclass:
        highestPx = _swig_property(_AlgoSE.StrategyPosition_highestPx_get, _AlgoSE.StrategyPosition_highestPx_set)
    __swig_setmethods__["lowestPx"] = _AlgoSE.StrategyPosition_lowestPx_set
    __swig_getmethods__["lowestPx"] = _AlgoSE.StrategyPosition_lowestPx_get
    if _newclass:
        lowestPx = _swig_property(_AlgoSE.StrategyPosition_lowestPx_get, _AlgoSE.StrategyPosition_lowestPx_set)

    def __init__(self):
        this = _AlgoSE.new_StrategyPosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_StrategyPosition
    __del__ = lambda self: None
StrategyPosition_swigregister = _AlgoSE.StrategyPosition_swigregister
StrategyPosition_swigregister(StrategyPosition)

class StrategyStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["strategyId"] = _AlgoSE.StrategyStatus_strategyId_set
    __swig_getmethods__["strategyId"] = _AlgoSE.StrategyStatus_strategyId_get
    if _newclass:
        strategyId = _swig_property(_AlgoSE.StrategyStatus_strategyId_get, _AlgoSE.StrategyStatus_strategyId_set)
    __swig_setmethods__["name"] = _AlgoSE.StrategyStatus_name_set
    __swig_getmethods__["name"] = _AlgoSE.StrategyStatus_name_get
    if _newclass:
        name = _swig_property(_AlgoSE.StrategyStatus_name_get, _AlgoSE.StrategyStatus_name_set)
    __swig_setmethods__["desc"] = _AlgoSE.StrategyStatus_desc_set
    __swig_getmethods__["desc"] = _AlgoSE.StrategyStatus_desc_get
    if _newclass:
        desc = _swig_property(_AlgoSE.StrategyStatus_desc_get, _AlgoSE.StrategyStatus_desc_set)
    __swig_setmethods__["state"] = _AlgoSE.StrategyStatus_state_set
    __swig_getmethods__["state"] = _AlgoSE.StrategyStatus_state_get
    if _newclass:
        state = _swig_property(_AlgoSE.StrategyStatus_state_get, _AlgoSE.StrategyStatus_state_set)
    __swig_setmethods__["verbose"] = _AlgoSE.StrategyStatus_verbose_set
    __swig_getmethods__["verbose"] = _AlgoSE.StrategyStatus_verbose_get
    if _newclass:
        verbose = _swig_property(_AlgoSE.StrategyStatus_verbose_get, _AlgoSE.StrategyStatus_verbose_set)
    __swig_setmethods__["submittion"] = _AlgoSE.StrategyStatus_submittion_set
    __swig_getmethods__["submittion"] = _AlgoSE.StrategyStatus_submittion_get
    if _newclass:
        submittion = _swig_property(_AlgoSE.StrategyStatus_submittion_get, _AlgoSE.StrategyStatus_submittion_set)
    __swig_setmethods__["cancellation"] = _AlgoSE.StrategyStatus_cancellation_set
    __swig_getmethods__["cancellation"] = _AlgoSE.StrategyStatus_cancellation_get
    if _newclass:
        cancellation = _swig_property(_AlgoSE.StrategyStatus_cancellation_get, _AlgoSE.StrategyStatus_cancellation_set)

    def __init__(self):
        this = _AlgoSE.new_StrategyStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_StrategyStatus
    __del__ = lambda self: None
StrategyStatus_swigregister = _AlgoSE.StrategyStatus_swigregister
StrategyStatus_swigregister(StrategyStatus)

class SystemLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SystemLog, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _AlgoSE.SystemLog_timestamp_set
    __swig_getmethods__["timestamp"] = _AlgoSE.SystemLog_timestamp_get
    if _newclass:
        timestamp = _swig_property(_AlgoSE.SystemLog_timestamp_get, _AlgoSE.SystemLog_timestamp_set)
    __swig_setmethods__["level"] = _AlgoSE.SystemLog_level_set
    __swig_getmethods__["level"] = _AlgoSE.SystemLog_level_get
    if _newclass:
        level = _swig_property(_AlgoSE.SystemLog_level_get, _AlgoSE.SystemLog_level_set)
    __swig_setmethods__["text"] = _AlgoSE.SystemLog_text_set
    __swig_getmethods__["text"] = _AlgoSE.SystemLog_text_get
    if _newclass:
        text = _swig_property(_AlgoSE.SystemLog_text_get, _AlgoSE.SystemLog_text_set)

    def __init__(self):
        this = _AlgoSE.new_SystemLog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_SystemLog
    __del__ = lambda self: None
SystemLog_swigregister = _AlgoSE.SystemLog_swigregister
SystemLog_swigregister(SystemLog)

class TradingHour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingHour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TradingHour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["begin"] = _AlgoSE.TradingHour_begin_set
    __swig_getmethods__["begin"] = _AlgoSE.TradingHour_begin_get
    if _newclass:
        begin = _swig_property(_AlgoSE.TradingHour_begin_get, _AlgoSE.TradingHour_begin_set)
    __swig_setmethods__["end"] = _AlgoSE.TradingHour_end_set
    __swig_getmethods__["end"] = _AlgoSE.TradingHour_end_get
    if _newclass:
        end = _swig_property(_AlgoSE.TradingHour_end_get, _AlgoSE.TradingHour_end_set)

    def __init__(self):
        this = _AlgoSE.new_TradingHour()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_TradingHour
    __del__ = lambda self: None
TradingHour_swigregister = _AlgoSE.TradingHour_swigregister
TradingHour_swigregister(TradingHour)

class HistoricalDataRequestType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoricalDataRequestType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoricalDataRequestType, name)
    __repr__ = _swig_repr
    BackRef = _AlgoSE.HistoricalDataRequestType_BackRef
    TimeRange = _AlgoSE.HistoricalDataRequestType_TimeRange

    def __init__(self):
        this = _AlgoSE.new_HistoricalDataRequestType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_HistoricalDataRequestType
    __del__ = lambda self: None
HistoricalDataRequestType_swigregister = _AlgoSE.HistoricalDataRequestType_swigregister
HistoricalDataRequestType_swigregister(HistoricalDataRequestType)

class HistoricalDataLoadMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoricalDataLoadMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoricalDataLoadMode, name)
    __repr__ = _swig_repr
    SyncLoad = _AlgoSE.HistoricalDataLoadMode_SyncLoad
    AsyncLoad = _AlgoSE.HistoricalDataLoadMode_AsyncLoad

    def __init__(self):
        this = _AlgoSE.new_HistoricalDataLoadMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_HistoricalDataLoadMode
    __del__ = lambda self: None
HistoricalDataLoadMode_swigregister = _AlgoSE.HistoricalDataLoadMode_swigregister
HistoricalDataLoadMode_swigregister(HistoricalDataLoadMode)

class HistoricalDataRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoricalDataRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoricalDataRequest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reqId"] = _AlgoSE.HistoricalDataRequest_reqId_set
    __swig_getmethods__["reqId"] = _AlgoSE.HistoricalDataRequest_reqId_get
    if _newclass:
        reqId = _swig_property(_AlgoSE.HistoricalDataRequest_reqId_get, _AlgoSE.HistoricalDataRequest_reqId_set)
    __swig_setmethods__["type"] = _AlgoSE.HistoricalDataRequest_type_set
    __swig_getmethods__["type"] = _AlgoSE.HistoricalDataRequest_type_get
    if _newclass:
        type = _swig_property(_AlgoSE.HistoricalDataRequest_type_get, _AlgoSE.HistoricalDataRequest_type_set)
    __swig_setmethods__["instrument"] = _AlgoSE.HistoricalDataRequest_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.HistoricalDataRequest_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.HistoricalDataRequest_instrument_get, _AlgoSE.HistoricalDataRequest_instrument_set)
    __swig_setmethods__["resolution"] = _AlgoSE.HistoricalDataRequest_resolution_set
    __swig_getmethods__["resolution"] = _AlgoSE.HistoricalDataRequest_resolution_get
    if _newclass:
        resolution = _swig_property(_AlgoSE.HistoricalDataRequest_resolution_get, _AlgoSE.HistoricalDataRequest_resolution_set)
    __swig_setmethods__["interval"] = _AlgoSE.HistoricalDataRequest_interval_set
    __swig_getmethods__["interval"] = _AlgoSE.HistoricalDataRequest_interval_get
    if _newclass:
        interval = _swig_property(_AlgoSE.HistoricalDataRequest_interval_get, _AlgoSE.HistoricalDataRequest_interval_set)
    __swig_setmethods__["beginDate"] = _AlgoSE.HistoricalDataRequest_beginDate_set
    __swig_getmethods__["beginDate"] = _AlgoSE.HistoricalDataRequest_beginDate_get
    if _newclass:
        beginDate = _swig_property(_AlgoSE.HistoricalDataRequest_beginDate_get, _AlgoSE.HistoricalDataRequest_beginDate_set)
    __swig_setmethods__["beginTime"] = _AlgoSE.HistoricalDataRequest_beginTime_set
    __swig_getmethods__["beginTime"] = _AlgoSE.HistoricalDataRequest_beginTime_get
    if _newclass:
        beginTime = _swig_property(_AlgoSE.HistoricalDataRequest_beginTime_get, _AlgoSE.HistoricalDataRequest_beginTime_set)
    __swig_setmethods__["endDate"] = _AlgoSE.HistoricalDataRequest_endDate_set
    __swig_getmethods__["endDate"] = _AlgoSE.HistoricalDataRequest_endDate_get
    if _newclass:
        endDate = _swig_property(_AlgoSE.HistoricalDataRequest_endDate_get, _AlgoSE.HistoricalDataRequest_endDate_set)
    __swig_setmethods__["endTime"] = _AlgoSE.HistoricalDataRequest_endTime_set
    __swig_getmethods__["endTime"] = _AlgoSE.HistoricalDataRequest_endTime_get
    if _newclass:
        endTime = _swig_property(_AlgoSE.HistoricalDataRequest_endTime_get, _AlgoSE.HistoricalDataRequest_endTime_set)
    __swig_setmethods__["refNum"] = _AlgoSE.HistoricalDataRequest_refNum_set
    __swig_getmethods__["refNum"] = _AlgoSE.HistoricalDataRequest_refNum_get
    if _newclass:
        refNum = _swig_property(_AlgoSE.HistoricalDataRequest_refNum_get, _AlgoSE.HistoricalDataRequest_refNum_set)
    __swig_setmethods__["mode"] = _AlgoSE.HistoricalDataRequest_mode_set
    __swig_getmethods__["mode"] = _AlgoSE.HistoricalDataRequest_mode_get
    if _newclass:
        mode = _swig_property(_AlgoSE.HistoricalDataRequest_mode_get, _AlgoSE.HistoricalDataRequest_mode_set)
    __swig_setmethods__["srvId"] = _AlgoSE.HistoricalDataRequest_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.HistoricalDataRequest_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.HistoricalDataRequest_srvId_get, _AlgoSE.HistoricalDataRequest_srvId_set)
    __swig_setmethods__["histDataBuffer"] = _AlgoSE.HistoricalDataRequest_histDataBuffer_set
    __swig_getmethods__["histDataBuffer"] = _AlgoSE.HistoricalDataRequest_histDataBuffer_get
    if _newclass:
        histDataBuffer = _swig_property(_AlgoSE.HistoricalDataRequest_histDataBuffer_get, _AlgoSE.HistoricalDataRequest_histDataBuffer_set)
    __swig_setmethods__["ownerId"] = _AlgoSE.HistoricalDataRequest_ownerId_set
    __swig_getmethods__["ownerId"] = _AlgoSE.HistoricalDataRequest_ownerId_get
    if _newclass:
        ownerId = _swig_property(_AlgoSE.HistoricalDataRequest_ownerId_get, _AlgoSE.HistoricalDataRequest_ownerId_set)
    __swig_setmethods__["respond"] = _AlgoSE.HistoricalDataRequest_respond_set
    __swig_getmethods__["respond"] = _AlgoSE.HistoricalDataRequest_respond_get
    if _newclass:
        respond = _swig_property(_AlgoSE.HistoricalDataRequest_respond_get, _AlgoSE.HistoricalDataRequest_respond_set)
    __swig_setmethods__["retNum"] = _AlgoSE.HistoricalDataRequest_retNum_set
    __swig_getmethods__["retNum"] = _AlgoSE.HistoricalDataRequest_retNum_get
    if _newclass:
        retNum = _swig_property(_AlgoSE.HistoricalDataRequest_retNum_get, _AlgoSE.HistoricalDataRequest_retNum_set)

    def __init__(self):
        this = _AlgoSE.new_HistoricalDataRequest()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_HistoricalDataRequest
    __del__ = lambda self: None
HistoricalDataRequest_swigregister = _AlgoSE.HistoricalDataRequest_swigregister
HistoricalDataRequest_swigregister(HistoricalDataRequest)

class TimerMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimerMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timerId"] = _AlgoSE.TimerMsg_timerId_set
    __swig_getmethods__["timerId"] = _AlgoSE.TimerMsg_timerId_get
    if _newclass:
        timerId = _swig_property(_AlgoSE.TimerMsg_timerId_get, _AlgoSE.TimerMsg_timerId_set)
    __swig_setmethods__["compId"] = _AlgoSE.TimerMsg_compId_set
    __swig_getmethods__["compId"] = _AlgoSE.TimerMsg_compId_get
    if _newclass:
        compId = _swig_property(_AlgoSE.TimerMsg_compId_get, _AlgoSE.TimerMsg_compId_set)
    __swig_setmethods__["ownerId"] = _AlgoSE.TimerMsg_ownerId_set
    __swig_getmethods__["ownerId"] = _AlgoSE.TimerMsg_ownerId_get
    if _newclass:
        ownerId = _swig_property(_AlgoSE.TimerMsg_ownerId_get, _AlgoSE.TimerMsg_ownerId_set)
    __swig_setmethods__["extra"] = _AlgoSE.TimerMsg_extra_set
    __swig_getmethods__["extra"] = _AlgoSE.TimerMsg_extra_get
    if _newclass:
        extra = _swig_property(_AlgoSE.TimerMsg_extra_get, _AlgoSE.TimerMsg_extra_set)
    __swig_setmethods__["srvId"] = _AlgoSE.TimerMsg_srvId_set
    __swig_getmethods__["srvId"] = _AlgoSE.TimerMsg_srvId_get
    if _newclass:
        srvId = _swig_property(_AlgoSE.TimerMsg_srvId_get, _AlgoSE.TimerMsg_srvId_set)

    def __init__(self):
        this = _AlgoSE.new_TimerMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_TimerMsg
    __del__ = lambda self: None
TimerMsg_swigregister = _AlgoSE.TimerMsg_swigregister
TimerMsg_swigregister(TimerMsg)

INVALID_TIMER_ID = _AlgoSE.INVALID_TIMER_ID
INVALID_STRATEGY_ID = _AlgoSE.INVALID_STRATEGY_ID
class CommissionType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommissionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommissionType, name)
    __repr__ = _swig_repr
    NO_COMMISSION = _AlgoSE.CommissionType_NO_COMMISSION
    FIXED_PER_TRADE = _AlgoSE.CommissionType_FIXED_PER_TRADE
    TRADE_PERCENTAGE = _AlgoSE.CommissionType_TRADE_PERCENTAGE

    def __init__(self):
        this = _AlgoSE.new_CommissionType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_CommissionType
    __del__ = lambda self: None
CommissionType_swigregister = _AlgoSE.CommissionType_swigregister
CommissionType_swigregister(CommissionType)

class SlippageType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlippageType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlippageType, name)
    __repr__ = _swig_repr
    NO_SLIPPAGE = _AlgoSE.SlippageType_NO_SLIPPAGE
    FIXED_PER_TRADE = _AlgoSE.SlippageType_FIXED_PER_TRADE
    TRADE_PERCENTAGE = _AlgoSE.SlippageType_TRADE_PERCENTAGE

    def __init__(self):
        this = _AlgoSE.new_SlippageType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_SlippageType
    __del__ = lambda self: None
SlippageType_swigregister = _AlgoSE.SlippageType_swigregister
SlippageType_swigregister(SlippageType)

class Contract(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contract, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contract, name)
    __repr__ = _swig_repr
    __swig_setmethods__["secType"] = _AlgoSE.Contract_secType_set
    __swig_getmethods__["secType"] = _AlgoSE.Contract_secType_get
    if _newclass:
        secType = _swig_property(_AlgoSE.Contract_secType_get, _AlgoSE.Contract_secType_set)
    __swig_setmethods__["instrument"] = _AlgoSE.Contract_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.Contract_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.Contract_instrument_get, _AlgoSE.Contract_instrument_set)
    __swig_setmethods__["exchange"] = _AlgoSE.Contract_exchange_set
    __swig_getmethods__["exchange"] = _AlgoSE.Contract_exchange_get
    if _newclass:
        exchange = _swig_property(_AlgoSE.Contract_exchange_get, _AlgoSE.Contract_exchange_set)
    __swig_setmethods__["multiplier"] = _AlgoSE.Contract_multiplier_set
    __swig_getmethods__["multiplier"] = _AlgoSE.Contract_multiplier_get
    if _newclass:
        multiplier = _swig_property(_AlgoSE.Contract_multiplier_get, _AlgoSE.Contract_multiplier_set)
    __swig_setmethods__["tickSize"] = _AlgoSE.Contract_tickSize_set
    __swig_getmethods__["tickSize"] = _AlgoSE.Contract_tickSize_get
    if _newclass:
        tickSize = _swig_property(_AlgoSE.Contract_tickSize_get, _AlgoSE.Contract_tickSize_set)
    __swig_setmethods__["marginRatio"] = _AlgoSE.Contract_marginRatio_set
    __swig_getmethods__["marginRatio"] = _AlgoSE.Contract_marginRatio_get
    if _newclass:
        marginRatio = _swig_property(_AlgoSE.Contract_marginRatio_get, _AlgoSE.Contract_marginRatio_set)
    __swig_setmethods__["commType"] = _AlgoSE.Contract_commType_set
    __swig_getmethods__["commType"] = _AlgoSE.Contract_commType_get
    if _newclass:
        commType = _swig_property(_AlgoSE.Contract_commType_get, _AlgoSE.Contract_commType_set)
    __swig_setmethods__["commission"] = _AlgoSE.Contract_commission_set
    __swig_getmethods__["commission"] = _AlgoSE.Contract_commission_get
    if _newclass:
        commission = _swig_property(_AlgoSE.Contract_commission_get, _AlgoSE.Contract_commission_set)
    __swig_setmethods__["slippageType"] = _AlgoSE.Contract_slippageType_set
    __swig_getmethods__["slippageType"] = _AlgoSE.Contract_slippageType_get
    if _newclass:
        slippageType = _swig_property(_AlgoSE.Contract_slippageType_get, _AlgoSE.Contract_slippageType_set)
    __swig_setmethods__["slippage"] = _AlgoSE.Contract_slippage_set
    __swig_getmethods__["slippage"] = _AlgoSE.Contract_slippage_get
    if _newclass:
        slippage = _swig_property(_AlgoSE.Contract_slippage_get, _AlgoSE.Contract_slippage_set)
    __swig_setmethods__["mktOpenTime"] = _AlgoSE.Contract_mktOpenTime_set
    __swig_getmethods__["mktOpenTime"] = _AlgoSE.Contract_mktOpenTime_get
    if _newclass:
        mktOpenTime = _swig_property(_AlgoSE.Contract_mktOpenTime_get, _AlgoSE.Contract_mktOpenTime_set)
    __swig_setmethods__["mktCloseTime"] = _AlgoSE.Contract_mktCloseTime_set
    __swig_getmethods__["mktCloseTime"] = _AlgoSE.Contract_mktCloseTime_get
    if _newclass:
        mktCloseTime = _swig_property(_AlgoSE.Contract_mktCloseTime_get, _AlgoSE.Contract_mktCloseTime_set)

    def __init__(self):
        this = _AlgoSE.new_Contract()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Contract
    __del__ = lambda self: None
Contract_swigregister = _AlgoSE.Contract_swigregister
Contract_swigregister(Contract)

class BacktestingMetrics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BacktestingMetrics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BacktestingMetrics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["initialCapital"] = _AlgoSE.BacktestingMetrics_initialCapital_set
    __swig_getmethods__["initialCapital"] = _AlgoSE.BacktestingMetrics_initialCapital_get
    if _newclass:
        initialCapital = _swig_property(_AlgoSE.BacktestingMetrics_initialCapital_get, _AlgoSE.BacktestingMetrics_initialCapital_set)
    __swig_setmethods__["tradingPeriod"] = _AlgoSE.BacktestingMetrics_tradingPeriod_set
    __swig_getmethods__["tradingPeriod"] = _AlgoSE.BacktestingMetrics_tradingPeriod_get
    if _newclass:
        tradingPeriod = _swig_property(_AlgoSE.BacktestingMetrics_tradingPeriod_get, _AlgoSE.BacktestingMetrics_tradingPeriod_set)
    __swig_setmethods__["finalPortfolioValue"] = _AlgoSE.BacktestingMetrics_finalPortfolioValue_set
    __swig_getmethods__["finalPortfolioValue"] = _AlgoSE.BacktestingMetrics_finalPortfolioValue_get
    if _newclass:
        finalPortfolioValue = _swig_property(_AlgoSE.BacktestingMetrics_finalPortfolioValue_get, _AlgoSE.BacktestingMetrics_finalPortfolioValue_set)
    __swig_setmethods__["acctSizeRequired"] = _AlgoSE.BacktestingMetrics_acctSizeRequired_set
    __swig_getmethods__["acctSizeRequired"] = _AlgoSE.BacktestingMetrics_acctSizeRequired_get
    if _newclass:
        acctSizeRequired = _swig_property(_AlgoSE.BacktestingMetrics_acctSizeRequired_get, _AlgoSE.BacktestingMetrics_acctSizeRequired_set)
    __swig_setmethods__["cumReturn"] = _AlgoSE.BacktestingMetrics_cumReturn_set
    __swig_getmethods__["cumReturn"] = _AlgoSE.BacktestingMetrics_cumReturn_get
    if _newclass:
        cumReturn = _swig_property(_AlgoSE.BacktestingMetrics_cumReturn_get, _AlgoSE.BacktestingMetrics_cumReturn_set)
    __swig_setmethods__["annualReturn"] = _AlgoSE.BacktestingMetrics_annualReturn_set
    __swig_getmethods__["annualReturn"] = _AlgoSE.BacktestingMetrics_annualReturn_get
    if _newclass:
        annualReturn = _swig_property(_AlgoSE.BacktestingMetrics_annualReturn_get, _AlgoSE.BacktestingMetrics_annualReturn_set)
    __swig_setmethods__["monthlyReturn"] = _AlgoSE.BacktestingMetrics_monthlyReturn_set
    __swig_getmethods__["monthlyReturn"] = _AlgoSE.BacktestingMetrics_monthlyReturn_get
    if _newclass:
        monthlyReturn = _swig_property(_AlgoSE.BacktestingMetrics_monthlyReturn_get, _AlgoSE.BacktestingMetrics_monthlyReturn_set)
    __swig_setmethods__["totalNetProfits"] = _AlgoSE.BacktestingMetrics_totalNetProfits_set
    __swig_getmethods__["totalNetProfits"] = _AlgoSE.BacktestingMetrics_totalNetProfits_get
    if _newclass:
        totalNetProfits = _swig_property(_AlgoSE.BacktestingMetrics_totalNetProfits_get, _AlgoSE.BacktestingMetrics_totalNetProfits_set)
    __swig_setmethods__["maxDD"] = _AlgoSE.BacktestingMetrics_maxDD_set
    __swig_getmethods__["maxDD"] = _AlgoSE.BacktestingMetrics_maxDD_get
    if _newclass:
        maxDD = _swig_property(_AlgoSE.BacktestingMetrics_maxDD_get, _AlgoSE.BacktestingMetrics_maxDD_set)
    __swig_setmethods__["maxDDPercentage"] = _AlgoSE.BacktestingMetrics_maxDDPercentage_set
    __swig_getmethods__["maxDDPercentage"] = _AlgoSE.BacktestingMetrics_maxDDPercentage_get
    if _newclass:
        maxDDPercentage = _swig_property(_AlgoSE.BacktestingMetrics_maxDDPercentage_get, _AlgoSE.BacktestingMetrics_maxDDPercentage_set)
    __swig_setmethods__["maxCTCDD"] = _AlgoSE.BacktestingMetrics_maxCTCDD_set
    __swig_getmethods__["maxCTCDD"] = _AlgoSE.BacktestingMetrics_maxCTCDD_get
    if _newclass:
        maxCTCDD = _swig_property(_AlgoSE.BacktestingMetrics_maxCTCDD_get, _AlgoSE.BacktestingMetrics_maxCTCDD_set)
    __swig_setmethods__["maxDDBegin"] = _AlgoSE.BacktestingMetrics_maxDDBegin_set
    __swig_getmethods__["maxDDBegin"] = _AlgoSE.BacktestingMetrics_maxDDBegin_get
    if _newclass:
        maxDDBegin = _swig_property(_AlgoSE.BacktestingMetrics_maxDDBegin_get, _AlgoSE.BacktestingMetrics_maxDDBegin_set)
    __swig_setmethods__["maxDDEnd"] = _AlgoSE.BacktestingMetrics_maxDDEnd_set
    __swig_getmethods__["maxDDEnd"] = _AlgoSE.BacktestingMetrics_maxDDEnd_get
    if _newclass:
        maxDDEnd = _swig_property(_AlgoSE.BacktestingMetrics_maxDDEnd_get, _AlgoSE.BacktestingMetrics_maxDDEnd_set)
    __swig_setmethods__["longestDDDuration"] = _AlgoSE.BacktestingMetrics_longestDDDuration_set
    __swig_getmethods__["longestDDDuration"] = _AlgoSE.BacktestingMetrics_longestDDDuration_get
    if _newclass:
        longestDDDuration = _swig_property(_AlgoSE.BacktestingMetrics_longestDDDuration_get, _AlgoSE.BacktestingMetrics_longestDDDuration_set)
    __swig_setmethods__["longestDDDBegin"] = _AlgoSE.BacktestingMetrics_longestDDDBegin_set
    __swig_getmethods__["longestDDDBegin"] = _AlgoSE.BacktestingMetrics_longestDDDBegin_get
    if _newclass:
        longestDDDBegin = _swig_property(_AlgoSE.BacktestingMetrics_longestDDDBegin_get, _AlgoSE.BacktestingMetrics_longestDDDBegin_set)
    __swig_setmethods__["longestDDDEnd"] = _AlgoSE.BacktestingMetrics_longestDDDEnd_set
    __swig_getmethods__["longestDDDEnd"] = _AlgoSE.BacktestingMetrics_longestDDDEnd_get
    if _newclass:
        longestDDDEnd = _swig_property(_AlgoSE.BacktestingMetrics_longestDDDEnd_get, _AlgoSE.BacktestingMetrics_longestDDDEnd_set)
    __swig_setmethods__["retOnMaxDD"] = _AlgoSE.BacktestingMetrics_retOnMaxDD_set
    __swig_getmethods__["retOnMaxDD"] = _AlgoSE.BacktestingMetrics_retOnMaxDD_get
    if _newclass:
        retOnMaxDD = _swig_property(_AlgoSE.BacktestingMetrics_retOnMaxDD_get, _AlgoSE.BacktestingMetrics_retOnMaxDD_set)
    __swig_setmethods__["retOnAcctSizeRequired"] = _AlgoSE.BacktestingMetrics_retOnAcctSizeRequired_set
    __swig_getmethods__["retOnAcctSizeRequired"] = _AlgoSE.BacktestingMetrics_retOnAcctSizeRequired_get
    if _newclass:
        retOnAcctSizeRequired = _swig_property(_AlgoSE.BacktestingMetrics_retOnAcctSizeRequired_get, _AlgoSE.BacktestingMetrics_retOnAcctSizeRequired_set)
    __swig_setmethods__["sharpeRatio"] = _AlgoSE.BacktestingMetrics_sharpeRatio_set
    __swig_getmethods__["sharpeRatio"] = _AlgoSE.BacktestingMetrics_sharpeRatio_get
    if _newclass:
        sharpeRatio = _swig_property(_AlgoSE.BacktestingMetrics_sharpeRatio_get, _AlgoSE.BacktestingMetrics_sharpeRatio_set)
    __swig_setmethods__["totalTrades"] = _AlgoSE.BacktestingMetrics_totalTrades_set
    __swig_getmethods__["totalTrades"] = _AlgoSE.BacktestingMetrics_totalTrades_get
    if _newclass:
        totalTrades = _swig_property(_AlgoSE.BacktestingMetrics_totalTrades_get, _AlgoSE.BacktestingMetrics_totalTrades_set)
    __swig_setmethods__["totalOpenTrades"] = _AlgoSE.BacktestingMetrics_totalOpenTrades_set
    __swig_getmethods__["totalOpenTrades"] = _AlgoSE.BacktestingMetrics_totalOpenTrades_get
    if _newclass:
        totalOpenTrades = _swig_property(_AlgoSE.BacktestingMetrics_totalOpenTrades_get, _AlgoSE.BacktestingMetrics_totalOpenTrades_set)
    __swig_setmethods__["winningTrades"] = _AlgoSE.BacktestingMetrics_winningTrades_set
    __swig_getmethods__["winningTrades"] = _AlgoSE.BacktestingMetrics_winningTrades_get
    if _newclass:
        winningTrades = _swig_property(_AlgoSE.BacktestingMetrics_winningTrades_get, _AlgoSE.BacktestingMetrics_winningTrades_set)
    __swig_setmethods__["losingTrades"] = _AlgoSE.BacktestingMetrics_losingTrades_set
    __swig_getmethods__["losingTrades"] = _AlgoSE.BacktestingMetrics_losingTrades_get
    if _newclass:
        losingTrades = _swig_property(_AlgoSE.BacktestingMetrics_losingTrades_get, _AlgoSE.BacktestingMetrics_losingTrades_set)
    __swig_setmethods__["percentProfitable"] = _AlgoSE.BacktestingMetrics_percentProfitable_set
    __swig_getmethods__["percentProfitable"] = _AlgoSE.BacktestingMetrics_percentProfitable_get
    if _newclass:
        percentProfitable = _swig_property(_AlgoSE.BacktestingMetrics_percentProfitable_get, _AlgoSE.BacktestingMetrics_percentProfitable_set)
    __swig_setmethods__["avgWinningTrade"] = _AlgoSE.BacktestingMetrics_avgWinningTrade_set
    __swig_getmethods__["avgWinningTrade"] = _AlgoSE.BacktestingMetrics_avgWinningTrade_get
    if _newclass:
        avgWinningTrade = _swig_property(_AlgoSE.BacktestingMetrics_avgWinningTrade_get, _AlgoSE.BacktestingMetrics_avgWinningTrade_set)
    __swig_setmethods__["avgLosingTrade"] = _AlgoSE.BacktestingMetrics_avgLosingTrade_set
    __swig_getmethods__["avgLosingTrade"] = _AlgoSE.BacktestingMetrics_avgLosingTrade_get
    if _newclass:
        avgLosingTrade = _swig_property(_AlgoSE.BacktestingMetrics_avgLosingTrade_get, _AlgoSE.BacktestingMetrics_avgLosingTrade_set)
    __swig_setmethods__["ratioAvgWinAvgLoss"] = _AlgoSE.BacktestingMetrics_ratioAvgWinAvgLoss_set
    __swig_getmethods__["ratioAvgWinAvgLoss"] = _AlgoSE.BacktestingMetrics_ratioAvgWinAvgLoss_get
    if _newclass:
        ratioAvgWinAvgLoss = _swig_property(_AlgoSE.BacktestingMetrics_ratioAvgWinAvgLoss_get, _AlgoSE.BacktestingMetrics_ratioAvgWinAvgLoss_set)
    __swig_setmethods__["avgProfit"] = _AlgoSE.BacktestingMetrics_avgProfit_set
    __swig_getmethods__["avgProfit"] = _AlgoSE.BacktestingMetrics_avgProfit_get
    if _newclass:
        avgProfit = _swig_property(_AlgoSE.BacktestingMetrics_avgProfit_get, _AlgoSE.BacktestingMetrics_avgProfit_set)
    __swig_setmethods__["maxProfit"] = _AlgoSE.BacktestingMetrics_maxProfit_set
    __swig_getmethods__["maxProfit"] = _AlgoSE.BacktestingMetrics_maxProfit_get
    if _newclass:
        maxProfit = _swig_property(_AlgoSE.BacktestingMetrics_maxProfit_get, _AlgoSE.BacktestingMetrics_maxProfit_set)
    __swig_setmethods__["minProfit"] = _AlgoSE.BacktestingMetrics_minProfit_set
    __swig_getmethods__["minProfit"] = _AlgoSE.BacktestingMetrics_minProfit_get
    if _newclass:
        minProfit = _swig_property(_AlgoSE.BacktestingMetrics_minProfit_get, _AlgoSE.BacktestingMetrics_minProfit_set)
    __swig_setmethods__["grossProfit"] = _AlgoSE.BacktestingMetrics_grossProfit_set
    __swig_getmethods__["grossProfit"] = _AlgoSE.BacktestingMetrics_grossProfit_get
    if _newclass:
        grossProfit = _swig_property(_AlgoSE.BacktestingMetrics_grossProfit_get, _AlgoSE.BacktestingMetrics_grossProfit_set)
    __swig_setmethods__["grossLoss"] = _AlgoSE.BacktestingMetrics_grossLoss_set
    __swig_getmethods__["grossLoss"] = _AlgoSE.BacktestingMetrics_grossLoss_get
    if _newclass:
        grossLoss = _swig_property(_AlgoSE.BacktestingMetrics_grossLoss_get, _AlgoSE.BacktestingMetrics_grossLoss_set)
    __swig_setmethods__["slippagePaid"] = _AlgoSE.BacktestingMetrics_slippagePaid_set
    __swig_getmethods__["slippagePaid"] = _AlgoSE.BacktestingMetrics_slippagePaid_get
    if _newclass:
        slippagePaid = _swig_property(_AlgoSE.BacktestingMetrics_slippagePaid_get, _AlgoSE.BacktestingMetrics_slippagePaid_set)
    __swig_setmethods__["commissionPaid"] = _AlgoSE.BacktestingMetrics_commissionPaid_set
    __swig_getmethods__["commissionPaid"] = _AlgoSE.BacktestingMetrics_commissionPaid_get
    if _newclass:
        commissionPaid = _swig_property(_AlgoSE.BacktestingMetrics_commissionPaid_get, _AlgoSE.BacktestingMetrics_commissionPaid_set)

    def __init__(self):
        this = _AlgoSE.new_BacktestingMetrics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_BacktestingMetrics
    __del__ = lambda self: None
BacktestingMetrics_swigregister = _AlgoSE.BacktestingMetrics_swigregister
BacktestingMetrics_swigregister(BacktestingMetrics)

class SimplifiedMetrics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplifiedMetrics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimplifiedMetrics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cumReturns"] = _AlgoSE.SimplifiedMetrics_cumReturns_set
    __swig_getmethods__["cumReturns"] = _AlgoSE.SimplifiedMetrics_cumReturns_get
    if _newclass:
        cumReturns = _swig_property(_AlgoSE.SimplifiedMetrics_cumReturns_get, _AlgoSE.SimplifiedMetrics_cumReturns_set)
    __swig_setmethods__["totalNetProfits"] = _AlgoSE.SimplifiedMetrics_totalNetProfits_set
    __swig_getmethods__["totalNetProfits"] = _AlgoSE.SimplifiedMetrics_totalNetProfits_get
    if _newclass:
        totalNetProfits = _swig_property(_AlgoSE.SimplifiedMetrics_totalNetProfits_get, _AlgoSE.SimplifiedMetrics_totalNetProfits_set)
    __swig_setmethods__["sharpeRatio"] = _AlgoSE.SimplifiedMetrics_sharpeRatio_set
    __swig_getmethods__["sharpeRatio"] = _AlgoSE.SimplifiedMetrics_sharpeRatio_get
    if _newclass:
        sharpeRatio = _swig_property(_AlgoSE.SimplifiedMetrics_sharpeRatio_get, _AlgoSE.SimplifiedMetrics_sharpeRatio_set)
    __swig_setmethods__["maxDrawDown"] = _AlgoSE.SimplifiedMetrics_maxDrawDown_set
    __swig_getmethods__["maxDrawDown"] = _AlgoSE.SimplifiedMetrics_maxDrawDown_get
    if _newclass:
        maxDrawDown = _swig_property(_AlgoSE.SimplifiedMetrics_maxDrawDown_get, _AlgoSE.SimplifiedMetrics_maxDrawDown_set)
    __swig_setmethods__["retOnMaxDD"] = _AlgoSE.SimplifiedMetrics_retOnMaxDD_set
    __swig_getmethods__["retOnMaxDD"] = _AlgoSE.SimplifiedMetrics_retOnMaxDD_get
    if _newclass:
        retOnMaxDD = _swig_property(_AlgoSE.SimplifiedMetrics_retOnMaxDD_get, _AlgoSE.SimplifiedMetrics_retOnMaxDD_set)

    def __init__(self):
        this = _AlgoSE.new_SimplifiedMetrics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_SimplifiedMetrics
    __del__ = lambda self: None
SimplifiedMetrics_swigregister = _AlgoSE.SimplifiedMetrics_swigregister
SimplifiedMetrics_swigregister(SimplifiedMetrics)

class DailyMetrics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DailyMetrics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DailyMetrics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tradingDay"] = _AlgoSE.DailyMetrics_tradingDay_set
    __swig_getmethods__["tradingDay"] = _AlgoSE.DailyMetrics_tradingDay_get
    if _newclass:
        tradingDay = _swig_property(_AlgoSE.DailyMetrics_tradingDay_get, _AlgoSE.DailyMetrics_tradingDay_set)
    __swig_setmethods__["closedProfit"] = _AlgoSE.DailyMetrics_closedProfit_set
    __swig_getmethods__["closedProfit"] = _AlgoSE.DailyMetrics_closedProfit_get
    if _newclass:
        closedProfit = _swig_property(_AlgoSE.DailyMetrics_closedProfit_get, _AlgoSE.DailyMetrics_closedProfit_set)
    __swig_setmethods__["realizedProfit"] = _AlgoSE.DailyMetrics_realizedProfit_set
    __swig_getmethods__["realizedProfit"] = _AlgoSE.DailyMetrics_realizedProfit_get
    if _newclass:
        realizedProfit = _swig_property(_AlgoSE.DailyMetrics_realizedProfit_get, _AlgoSE.DailyMetrics_realizedProfit_set)
    __swig_setmethods__["posProfit"] = _AlgoSE.DailyMetrics_posProfit_set
    __swig_getmethods__["posProfit"] = _AlgoSE.DailyMetrics_posProfit_get
    if _newclass:
        posProfit = _swig_property(_AlgoSE.DailyMetrics_posProfit_get, _AlgoSE.DailyMetrics_posProfit_set)
    __swig_setmethods__["tradesNum"] = _AlgoSE.DailyMetrics_tradesNum_set
    __swig_getmethods__["tradesNum"] = _AlgoSE.DailyMetrics_tradesNum_get
    if _newclass:
        tradesNum = _swig_property(_AlgoSE.DailyMetrics_tradesNum_get, _AlgoSE.DailyMetrics_tradesNum_set)
    __swig_setmethods__["openVolume"] = _AlgoSE.DailyMetrics_openVolume_set
    __swig_getmethods__["openVolume"] = _AlgoSE.DailyMetrics_openVolume_get
    if _newclass:
        openVolume = _swig_property(_AlgoSE.DailyMetrics_openVolume_get, _AlgoSE.DailyMetrics_openVolume_set)
    __swig_setmethods__["tradedVolume"] = _AlgoSE.DailyMetrics_tradedVolume_set
    __swig_getmethods__["tradedVolume"] = _AlgoSE.DailyMetrics_tradedVolume_get
    if _newclass:
        tradedVolume = _swig_property(_AlgoSE.DailyMetrics_tradedVolume_get, _AlgoSE.DailyMetrics_tradedVolume_set)
    __swig_setmethods__["todayPosition"] = _AlgoSE.DailyMetrics_todayPosition_set
    __swig_getmethods__["todayPosition"] = _AlgoSE.DailyMetrics_todayPosition_get
    if _newclass:
        todayPosition = _swig_property(_AlgoSE.DailyMetrics_todayPosition_get, _AlgoSE.DailyMetrics_todayPosition_set)
    __swig_setmethods__["commissions"] = _AlgoSE.DailyMetrics_commissions_set
    __swig_getmethods__["commissions"] = _AlgoSE.DailyMetrics_commissions_get
    if _newclass:
        commissions = _swig_property(_AlgoSE.DailyMetrics_commissions_get, _AlgoSE.DailyMetrics_commissions_set)
    __swig_setmethods__["slippages"] = _AlgoSE.DailyMetrics_slippages_set
    __swig_getmethods__["slippages"] = _AlgoSE.DailyMetrics_slippages_get
    if _newclass:
        slippages = _swig_property(_AlgoSE.DailyMetrics_slippages_get, _AlgoSE.DailyMetrics_slippages_set)
    __swig_setmethods__["tradeCost"] = _AlgoSE.DailyMetrics_tradeCost_set
    __swig_getmethods__["tradeCost"] = _AlgoSE.DailyMetrics_tradeCost_get
    if _newclass:
        tradeCost = _swig_property(_AlgoSE.DailyMetrics_tradeCost_get, _AlgoSE.DailyMetrics_tradeCost_set)
    __swig_setmethods__["cash"] = _AlgoSE.DailyMetrics_cash_set
    __swig_getmethods__["cash"] = _AlgoSE.DailyMetrics_cash_get
    if _newclass:
        cash = _swig_property(_AlgoSE.DailyMetrics_cash_get, _AlgoSE.DailyMetrics_cash_set)
    __swig_setmethods__["equity"] = _AlgoSE.DailyMetrics_equity_set
    __swig_getmethods__["equity"] = _AlgoSE.DailyMetrics_equity_get
    if _newclass:
        equity = _swig_property(_AlgoSE.DailyMetrics_equity_get, _AlgoSE.DailyMetrics_equity_set)
    __swig_setmethods__["profit"] = _AlgoSE.DailyMetrics_profit_set
    __swig_getmethods__["profit"] = _AlgoSE.DailyMetrics_profit_get
    if _newclass:
        profit = _swig_property(_AlgoSE.DailyMetrics_profit_get, _AlgoSE.DailyMetrics_profit_set)
    __swig_setmethods__["margin"] = _AlgoSE.DailyMetrics_margin_set
    __swig_getmethods__["margin"] = _AlgoSE.DailyMetrics_margin_get
    if _newclass:
        margin = _swig_property(_AlgoSE.DailyMetrics_margin_get, _AlgoSE.DailyMetrics_margin_set)
    __swig_setmethods__["cumRealizedProfit"] = _AlgoSE.DailyMetrics_cumRealizedProfit_set
    __swig_getmethods__["cumRealizedProfit"] = _AlgoSE.DailyMetrics_cumRealizedProfit_get
    if _newclass:
        cumRealizedProfit = _swig_property(_AlgoSE.DailyMetrics_cumRealizedProfit_get, _AlgoSE.DailyMetrics_cumRealizedProfit_set)
    __swig_setmethods__["cumTradesNum"] = _AlgoSE.DailyMetrics_cumTradesNum_set
    __swig_getmethods__["cumTradesNum"] = _AlgoSE.DailyMetrics_cumTradesNum_get
    if _newclass:
        cumTradesNum = _swig_property(_AlgoSE.DailyMetrics_cumTradesNum_get, _AlgoSE.DailyMetrics_cumTradesNum_set)
    __swig_setmethods__["cumTradedVolume"] = _AlgoSE.DailyMetrics_cumTradedVolume_set
    __swig_getmethods__["cumTradedVolume"] = _AlgoSE.DailyMetrics_cumTradedVolume_get
    if _newclass:
        cumTradedVolume = _swig_property(_AlgoSE.DailyMetrics_cumTradedVolume_get, _AlgoSE.DailyMetrics_cumTradedVolume_set)
    __swig_setmethods__["cumCloseVolume"] = _AlgoSE.DailyMetrics_cumCloseVolume_set
    __swig_getmethods__["cumCloseVolume"] = _AlgoSE.DailyMetrics_cumCloseVolume_get
    if _newclass:
        cumCloseVolume = _swig_property(_AlgoSE.DailyMetrics_cumCloseVolume_get, _AlgoSE.DailyMetrics_cumCloseVolume_set)
    __swig_setmethods__["cumCommissions"] = _AlgoSE.DailyMetrics_cumCommissions_set
    __swig_getmethods__["cumCommissions"] = _AlgoSE.DailyMetrics_cumCommissions_get
    if _newclass:
        cumCommissions = _swig_property(_AlgoSE.DailyMetrics_cumCommissions_get, _AlgoSE.DailyMetrics_cumCommissions_set)
    __swig_setmethods__["cumSlippages"] = _AlgoSE.DailyMetrics_cumSlippages_set
    __swig_getmethods__["cumSlippages"] = _AlgoSE.DailyMetrics_cumSlippages_get
    if _newclass:
        cumSlippages = _swig_property(_AlgoSE.DailyMetrics_cumSlippages_get, _AlgoSE.DailyMetrics_cumSlippages_set)
    __swig_setmethods__["cumTradeCost"] = _AlgoSE.DailyMetrics_cumTradeCost_set
    __swig_getmethods__["cumTradeCost"] = _AlgoSE.DailyMetrics_cumTradeCost_get
    if _newclass:
        cumTradeCost = _swig_property(_AlgoSE.DailyMetrics_cumTradeCost_get, _AlgoSE.DailyMetrics_cumTradeCost_set)

    def __init__(self):
        this = _AlgoSE.new_DailyMetrics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_DailyMetrics
    __del__ = lambda self: None
DailyMetrics_swigregister = _AlgoSE.DailyMetrics_swigregister
DailyMetrics_swigregister(DailyMetrics)

Sunday = _AlgoSE.Sunday
Monday = _AlgoSE.Monday
Tuesday = _AlgoSE.Tuesday
Wednesday = _AlgoSE.Wednesday
Thursday = _AlgoSE.Thursday
Friday = _AlgoSE.Friday
Saturday = _AlgoSE.Saturday
Sun = _AlgoSE.Sun
Mon = _AlgoSE.Mon
Tue = _AlgoSE.Tue
Wed = _AlgoSE.Wed
Thu = _AlgoSE.Thu
Fri = _AlgoSE.Fri
Sat = _AlgoSE.Sat
January = _AlgoSE.January
February = _AlgoSE.February
March = _AlgoSE.March
April = _AlgoSE.April
May = _AlgoSE.May
June = _AlgoSE.June
July = _AlgoSE.July
August = _AlgoSE.August
September = _AlgoSE.September
October = _AlgoSE.October
November = _AlgoSE.November
December = _AlgoSE.December
Jan = _AlgoSE.Jan
Feb = _AlgoSE.Feb
Mar = _AlgoSE.Mar
Apr = _AlgoSE.Apr
Jun = _AlgoSE.Jun
Jul = _AlgoSE.Jul
Aug = _AlgoSE.Aug
Sep = _AlgoSE.Sep
Oct = _AlgoSE.Oct
Nov = _AlgoSE.Nov
Dec = _AlgoSE.Dec
class Date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_Date(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def weekday(self):
        return _AlgoSE.Date_weekday(self)

    def dayOfMonth(self):
        return _AlgoSE.Date_dayOfMonth(self)

    def dayOfYear(self):
        return _AlgoSE.Date_dayOfYear(self)

    def month(self):
        return _AlgoSE.Date_month(self)

    def year(self):
        return _AlgoSE.Date_year(self)

    def serialNumber(self):
        return _AlgoSE.Date_serialNumber(self)

    def __iadd__(self, days):
        return _AlgoSE.Date___iadd__(self, days)

    def __isub__(self, days):
        return _AlgoSE.Date___isub__(self, days)

    def __add__(self, days):
        return _AlgoSE.Date___add__(self, days)

    def __sub__(self, days):
        return _AlgoSE.Date___sub__(self, days)
    if _newclass:
        todaysDate = staticmethod(_AlgoSE.Date_todaysDate)
    else:
        todaysDate = _AlgoSE.Date_todaysDate
    if _newclass:
        minDate = staticmethod(_AlgoSE.Date_minDate)
    else:
        minDate = _AlgoSE.Date_minDate
    if _newclass:
        maxDate = staticmethod(_AlgoSE.Date_maxDate)
    else:
        maxDate = _AlgoSE.Date_maxDate
    if _newclass:
        isLeap = staticmethod(_AlgoSE.Date_isLeap)
    else:
        isLeap = _AlgoSE.Date_isLeap
    if _newclass:
        endOfMonth = staticmethod(_AlgoSE.Date_endOfMonth)
    else:
        endOfMonth = _AlgoSE.Date_endOfMonth
    if _newclass:
        isEndOfMonth = staticmethod(_AlgoSE.Date_isEndOfMonth)
    else:
        isEndOfMonth = _AlgoSE.Date_isEndOfMonth
    if _newclass:
        nextWeekday = staticmethod(_AlgoSE.Date_nextWeekday)
    else:
        nextWeekday = _AlgoSE.Date_nextWeekday
    __swig_destroy__ = _AlgoSE.delete_Date
    __del__ = lambda self: None
Date_swigregister = _AlgoSE.Date_swigregister
Date_swigregister(Date)

def Date_todaysDate():
    return _AlgoSE.Date_todaysDate()
Date_todaysDate = _AlgoSE.Date_todaysDate

def Date_minDate():
    return _AlgoSE.Date_minDate()
Date_minDate = _AlgoSE.Date_minDate

def Date_maxDate():
    return _AlgoSE.Date_maxDate()
Date_maxDate = _AlgoSE.Date_maxDate

def Date_isLeap(y):
    return _AlgoSE.Date_isLeap(y)
Date_isLeap = _AlgoSE.Date_isLeap

def Date_endOfMonth(d):
    return _AlgoSE.Date_endOfMonth(d)
Date_endOfMonth = _AlgoSE.Date_endOfMonth

def Date_isEndOfMonth(d):
    return _AlgoSE.Date_isEndOfMonth(d)
Date_isEndOfMonth = _AlgoSE.Date_isEndOfMonth

def Date_nextWeekday(d, w):
    return _AlgoSE.Date_nextWeekday(d, w)
Date_nextWeekday = _AlgoSE.Date_nextWeekday


def __sub__(d1, d2):
    return _AlgoSE.__sub__(d1, d2)
__sub__ = _AlgoSE.__sub__

def __eq__(d1, d2):
    return _AlgoSE.__eq__(d1, d2)
__eq__ = _AlgoSE.__eq__

def __ne__(d1, d2):
    return _AlgoSE.__ne__(d1, d2)
__ne__ = _AlgoSE.__ne__

def __lt__(d1, d2):
    return _AlgoSE.__lt__(d1, d2)
__lt__ = _AlgoSE.__lt__

def __le__(d1, d2):
    return _AlgoSE.__le__(d1, d2)
__le__ = _AlgoSE.__le__

def __gt__(d1, d2):
    return _AlgoSE.__gt__(d1, d2)
__gt__ = _AlgoSE.__gt__

def __ge__(d1, d2):
    return _AlgoSE.__ge__(d1, d2)
__ge__ = _AlgoSE.__ge__
class DateTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_DateTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_DateTime
    __del__ = lambda self: None

    def toString(self):
        return _AlgoSE.DateTime_toString(self)

    def isValid(self):
        return _AlgoSE.DateTime_isValid(self)

    def markInvalid(self):
        return _AlgoSE.DateTime_markInvalid(self)

    def compare(self, date):
        return _AlgoSE.DateTime_compare(self, date)

    def __eq__(self, date):
        return _AlgoSE.DateTime___eq__(self, date)

    def __lt__(self, date):
        return _AlgoSE.DateTime___lt__(self, date)

    def __gt__(self, date):
        return _AlgoSE.DateTime___gt__(self, date)

    def __ne__(self, date):
        return _AlgoSE.DateTime___ne__(self, date)

    def __le__(self, date):
        return _AlgoSE.DateTime___le__(self, date)

    def __ge__(self, date):
        return _AlgoSE.DateTime___ge__(self, date)

    def DateTimeToString(self):
        return _AlgoSE.DateTime_DateTimeToString(self)

    def __sub__(self, date):
        return _AlgoSE.DateTime___sub__(self, date)

    def date(self):
        return _AlgoSE.DateTime_date(self)

    def toDate(self):
        return _AlgoSE.DateTime_toDate(self)

    def toTimeStamp(self):
        return _AlgoSE.DateTime_toTimeStamp(self)

    def getFields(self, year, month, day, hour, minute, second, millis):
        return _AlgoSE.DateTime_getFields(self, year, month, day, hour, minute, second, millis)

    def yesterday(self):
        return _AlgoSE.DateTime_yesterday(self)

    def secs(self):
        return _AlgoSE.DateTime_secs(self)

    def millisec(self):
        return _AlgoSE.DateTime_millisec(self)

    def dateNum(self):
        return _AlgoSE.DateTime_dateNum(self)

    def timeNum(self):
        return _AlgoSE.DateTime_timeNum(self)

    def days(self):
        return _AlgoSE.DateTime_days(self)

    def year(self):
        return _AlgoSE.DateTime_year(self)

    def month(self):
        return _AlgoSE.DateTime_month(self)

    def dayOfMonth(self):
        return _AlgoSE.DateTime_dayOfMonth(self)

    def ticks(self):
        return _AlgoSE.DateTime_ticks(self)

    def __str__(self):
        return _AlgoSE.DateTime___str__(self)
DateTime_swigregister = _AlgoSE.DateTime_swigregister
DateTime_swigregister(DateTime)
ELAPSED_DAYS_FROM_0000_TO_1970 = _AlgoSE.ELAPSED_DAYS_FROM_0000_TO_1970
ELAPSED_DAYS_FROM_0000_TO_1900 = _AlgoSE.ELAPSED_DAYS_FROM_0000_TO_1900
ELAPSED_DAYS_FROM_1900_TO_1970 = _AlgoSE.ELAPSED_DAYS_FROM_1900_TO_1970


def __lshift__(arg1, arg2):
    return _AlgoSE.__lshift__(arg1, arg2)
__lshift__ = _AlgoSE.__lshift__
class IEventHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEventHandler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def onEvent(self, type, datetime, context):
        return _AlgoSE.IEventHandler_onEvent(self, type, datetime, context)
    __swig_destroy__ = _AlgoSE.delete_IEventHandler
    __del__ = lambda self: None
IEventHandler_swigregister = _AlgoSE.IEventHandler_swigregister
IEventHandler_swigregister(IEventHandler)

class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    EvtNone = _AlgoSE.Event_EvtNone
    EvtDispatcherStart = _AlgoSE.Event_EvtDispatcherStart
    EvtDispatcherIdle = _AlgoSE.Event_EvtDispatcherIdle
    EvtDispatcherTimeElapsed = _AlgoSE.Event_EvtDispatcherTimeElapsed
    EvtDataSeriesNewValue = _AlgoSE.Event_EvtDataSeriesNewValue
    EvtDataSeriesReset = _AlgoSE.Event_EvtDataSeriesReset
    EvtOrderUpdate = _AlgoSE.Event_EvtOrderUpdate
    EvtMarketDataProcessed = _AlgoSE.Event_EvtMarketDataProcessed
    EvtNewMarketData = _AlgoSE.Event_EvtNewMarketData
    EvtNewReturns = _AlgoSE.Event_EvtNewReturns
    EvtNewTradingDay = _AlgoSE.Event_EvtNewTradingDay

    def __init__(self, *args):
        this = _AlgoSE.new_Event(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setType(self, type):
        return _AlgoSE.Event_setType(self, type)

    def getType(self):
        return _AlgoSE.Event_getType(self)

    def subscribe(self, handler):
        return _AlgoSE.Event_subscribe(self, handler)

    def unsubscribe(self):
        return _AlgoSE.Event_unsubscribe(self)

    def emitEvt(self, datetime, context):
        return _AlgoSE.Event_emitEvt(self, datetime, context)
    __swig_destroy__ = _AlgoSE.delete_Event
    __del__ = lambda self: None
Event_swigregister = _AlgoSE.Event_swigregister
Event_swigregister(Event)

class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datetime"] = _AlgoSE.Context_datetime_set
    __swig_getmethods__["datetime"] = _AlgoSE.Context_datetime_get
    if _newclass:
        datetime = _swig_property(_AlgoSE.Context_datetime_get, _AlgoSE.Context_datetime_set)
    __swig_setmethods__["data"] = _AlgoSE.Context_data_set
    __swig_getmethods__["data"] = _AlgoSE.Context_data_get
    if _newclass:
        data = _swig_property(_AlgoSE.Context_data_get, _AlgoSE.Context_data_set)

    def __init__(self):
        this = _AlgoSE.new_Context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Context
    __del__ = lambda self: None
Context_swigregister = _AlgoSE.Context_swigregister
Context_swigregister(Context)

DEFAULT_MAX_LEN = _AlgoSE.DEFAULT_MAX_LEN
class DataSeries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSeries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSeries, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ElemTypeUnknown = _AlgoSE.DataSeries_ElemTypeUnknown
    ElemTypeInt = _AlgoSE.DataSeries_ElemTypeInt
    ElemTypeInt64 = _AlgoSE.DataSeries_ElemTypeInt64
    ElemTypeFloat = _AlgoSE.DataSeries_ElemTypeFloat
    ElemTypeTick = _AlgoSE.DataSeries_ElemTypeTick
    ElemTypeBar = _AlgoSE.DataSeries_ElemTypeBar
    ElemBuiltInTypeEnd = _AlgoSE.DataSeries_ElemBuiltInTypeEnd

    def getType(self):
        return _AlgoSE.DataSeries_getType(self)

    def setType(self, type):
        return _AlgoSE.DataSeries_setType(self, type)

    def __len__(self):
        return _AlgoSE.DataSeries___len__(self)

    def getItem(self, pos):
        return _AlgoSE.DataSeries_getItem(self, pos)

    def getNewValueEvent(self):
        return _AlgoSE.DataSeries_getNewValueEvent(self)

    def appendWithDateTime(self, dateTime, value):
        return _AlgoSE.DataSeries_appendWithDateTime(self, dateTime, value)
    __swig_destroy__ = _AlgoSE.delete_DataSeries
    __del__ = lambda self: None
DataSeries_swigregister = _AlgoSE.DataSeries_swigregister
DataSeries_swigregister(DataSeries)

class DoubleSequenceDataSeries(DataSeries):
    __swig_setmethods__ = {}
    for _s in [DataSeries]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleSequenceDataSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSeries]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleSequenceDataSeries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_DoubleSequenceDataSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __len__(self):
        return _AlgoSE.DoubleSequenceDataSeries___len__(self)

    def getItem(self, idx):
        return _AlgoSE.DoubleSequenceDataSeries_getItem(self, idx)

    def setItem(self, idx, value):
        return _AlgoSE.DoubleSequenceDataSeries_setItem(self, idx, value)

    def at(self, idx):
        return _AlgoSE.DoubleSequenceDataSeries_at(self, idx)

    def setMaxLen(self, maxLen):
        return _AlgoSE.DoubleSequenceDataSeries_setMaxLen(self, maxLen)

    def getMaxLen(self):
        return _AlgoSE.DoubleSequenceDataSeries_getMaxLen(self)

    def getNewValueEvent(self):
        return _AlgoSE.DoubleSequenceDataSeries_getNewValueEvent(self)

    def append(self, value):
        return _AlgoSE.DoubleSequenceDataSeries_append(self, value)

    def appendWithDateTime(self, dateTime, value):
        return _AlgoSE.DoubleSequenceDataSeries_appendWithDateTime(self, dateTime, value)

    def clear(self):
        return _AlgoSE.DoubleSequenceDataSeries_clear(self)

    def __getitem__(self, *args):
        return _AlgoSE.DoubleSequenceDataSeries___getitem__(self, *args)
    __swig_destroy__ = _AlgoSE.delete_DoubleSequenceDataSeries
    __del__ = lambda self: None
DoubleSequenceDataSeries_swigregister = _AlgoSE.DoubleSequenceDataSeries_swigregister
DoubleSequenceDataSeries_swigregister(DoubleSequenceDataSeries)

class TickSequenceDataSeries(DataSeries):
    __swig_setmethods__ = {}
    for _s in [DataSeries]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TickSequenceDataSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSeries]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TickSequenceDataSeries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_TickSequenceDataSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __len__(self):
        return _AlgoSE.TickSequenceDataSeries___len__(self)

    def getItem(self, idx):
        return _AlgoSE.TickSequenceDataSeries_getItem(self, idx)

    def setItem(self, idx, value):
        return _AlgoSE.TickSequenceDataSeries_setItem(self, idx, value)

    def at(self, idx):
        return _AlgoSE.TickSequenceDataSeries_at(self, idx)

    def setMaxLen(self, maxLen):
        return _AlgoSE.TickSequenceDataSeries_setMaxLen(self, maxLen)

    def getMaxLen(self):
        return _AlgoSE.TickSequenceDataSeries_getMaxLen(self)

    def getNewValueEvent(self):
        return _AlgoSE.TickSequenceDataSeries_getNewValueEvent(self)

    def append(self, value):
        return _AlgoSE.TickSequenceDataSeries_append(self, value)

    def appendWithDateTime(self, dateTime, value):
        return _AlgoSE.TickSequenceDataSeries_appendWithDateTime(self, dateTime, value)

    def clear(self):
        return _AlgoSE.TickSequenceDataSeries_clear(self)

    def __getitem__(self, *args):
        return _AlgoSE.TickSequenceDataSeries___getitem__(self, *args)
    __swig_destroy__ = _AlgoSE.delete_TickSequenceDataSeries
    __del__ = lambda self: None
TickSequenceDataSeries_swigregister = _AlgoSE.TickSequenceDataSeries_swigregister
TickSequenceDataSeries_swigregister(TickSequenceDataSeries)

class BarSequenceDataSeries(DataSeries):
    __swig_setmethods__ = {}
    for _s in [DataSeries]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarSequenceDataSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSeries]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarSequenceDataSeries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_BarSequenceDataSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __len__(self):
        return _AlgoSE.BarSequenceDataSeries___len__(self)

    def getItem(self, idx):
        return _AlgoSE.BarSequenceDataSeries_getItem(self, idx)

    def setItem(self, idx, value):
        return _AlgoSE.BarSequenceDataSeries_setItem(self, idx, value)

    def at(self, idx):
        return _AlgoSE.BarSequenceDataSeries_at(self, idx)

    def setMaxLen(self, maxLen):
        return _AlgoSE.BarSequenceDataSeries_setMaxLen(self, maxLen)

    def getMaxLen(self):
        return _AlgoSE.BarSequenceDataSeries_getMaxLen(self)

    def getNewValueEvent(self):
        return _AlgoSE.BarSequenceDataSeries_getNewValueEvent(self)

    def append(self, value):
        return _AlgoSE.BarSequenceDataSeries_append(self, value)

    def appendWithDateTime(self, dateTime, value):
        return _AlgoSE.BarSequenceDataSeries_appendWithDateTime(self, dateTime, value)

    def clear(self):
        return _AlgoSE.BarSequenceDataSeries_clear(self)

    def __getitem__(self, *args):
        return _AlgoSE.BarSequenceDataSeries___getitem__(self, *args)
    __swig_destroy__ = _AlgoSE.delete_BarSequenceDataSeries
    __del__ = lambda self: None
BarSequenceDataSeries_swigregister = _AlgoSE.BarSequenceDataSeries_swigregister
BarSequenceDataSeries_swigregister(BarSequenceDataSeries)

class TickSeries(TickSequenceDataSeries):
    __swig_setmethods__ = {}
    for _s in [TickSequenceDataSeries]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TickSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [TickSequenceDataSeries]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TickSeries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_TickSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, bar):
        return _AlgoSE.TickSeries_append(self, bar)

    def appendWithDateTime(self, datetime, value):
        return _AlgoSE.TickSeries_appendWithDateTime(self, datetime, value)

    def getLastPriceDataSeries(self):
        return _AlgoSE.TickSeries_getLastPriceDataSeries(self)

    def getBidPrice1DataSeries(self):
        return _AlgoSE.TickSeries_getBidPrice1DataSeries(self)

    def getBidVolume1DataSeries(self):
        return _AlgoSE.TickSeries_getBidVolume1DataSeries(self)

    def getAskPrice1DataSeries(self):
        return _AlgoSE.TickSeries_getAskPrice1DataSeries(self)

    def getAskVolume1DataSeries(self):
        return _AlgoSE.TickSeries_getAskVolume1DataSeries(self)
    __swig_destroy__ = _AlgoSE.delete_TickSeries
    __del__ = lambda self: None
TickSeries_swigregister = _AlgoSE.TickSeries_swigregister
TickSeries_swigregister(TickSeries)

class BarSeries(BarSequenceDataSeries):
    __swig_setmethods__ = {}
    for _s in [BarSequenceDataSeries]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [BarSequenceDataSeries]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarSeries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_BarSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setResolution(self, resolution):
        return _AlgoSE.BarSeries_setResolution(self, resolution)

    def getResolution(self):
        return _AlgoSE.BarSeries_getResolution(self)

    def setInterval(self, interval):
        return _AlgoSE.BarSeries_setInterval(self, interval)

    def getInterval(self):
        return _AlgoSE.BarSeries_getInterval(self)

    def append(self, bar):
        return _AlgoSE.BarSeries_append(self, bar)

    def appendWithDateTime(self, datetime, value):
        return _AlgoSE.BarSeries_appendWithDateTime(self, datetime, value)

    def getPriceDataSeries(self):
        return _AlgoSE.BarSeries_getPriceDataSeries(self)

    def getOpenDataSeries(self):
        return _AlgoSE.BarSeries_getOpenDataSeries(self)

    def getCloseDataSeries(self):
        return _AlgoSE.BarSeries_getCloseDataSeries(self)

    def getHighDataSeries(self):
        return _AlgoSE.BarSeries_getHighDataSeries(self)

    def getLowDataSeries(self):
        return _AlgoSE.BarSeries_getLowDataSeries(self)

    def getVolumeDataSeries(self):
        return _AlgoSE.BarSeries_getVolumeDataSeries(self)

    def getOpenIntDataSeries(self):
        return _AlgoSE.BarSeries_getOpenIntDataSeries(self)
    __swig_destroy__ = _AlgoSE.delete_BarSeries
    __del__ = lambda self: None
BarSeries_swigregister = _AlgoSE.BarSeries_swigregister
BarSeries_swigregister(BarSeries)

class IEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AlgoSE.delete_IEngine
    __del__ = lambda self: None

    def registerListener(self, listener):
        return _AlgoSE.IEngine_registerListener(self, listener)

    def unregisterListener(self, listener):
        return _AlgoSE.IEngine_unregisterListener(self, listener)

    def loadStrategy(self, *args):
        return _AlgoSE.IEngine_loadStrategy(self, *args)

    def run(self):
        return _AlgoSE.IEngine_run(self)

    def launchStrategy(self, stratId):
        return _AlgoSE.IEngine_launchStrategy(self, stratId)

    def getStrategyStatus(self, stratId):
        return _AlgoSE.IEngine_getStrategyStatus(self, stratId)

    def assignStrategyPosition(self, stratId, instrument, side, quantity, price):
        return _AlgoSE.IEngine_assignStrategyPosition(self, stratId, instrument, side, quantity, price)

    def sendStrategyCommand(self, stratId, command):
        return _AlgoSE.IEngine_sendStrategyCommand(self, stratId, command)

    def setStrategyParameter(self, stratId, param):
        return _AlgoSE.IEngine_setStrategyParameter(self, stratId, param)

    def showVerboseMsg(self, stratId):
        return _AlgoSE.IEngine_showVerboseMsg(self, stratId)

    def hideVerboseMsg(self, stratId):
        return _AlgoSE.IEngine_hideVerboseMsg(self, stratId)

    def pauseStrategy(self, stratId):
        return _AlgoSE.IEngine_pauseStrategy(self, stratId)

    def resumeStrategy(self, stratId):
        return _AlgoSE.IEngine_resumeStrategy(self, stratId)

    def stopStrategy(self, stratId):
        return _AlgoSE.IEngine_stopStrategy(self, stratId)

    def writeLogMsg(self, level, msg):
        return _AlgoSE.IEngine_writeLogMsg(self, level, msg)

    def getMarketDataAPI(self):
        return _AlgoSE.IEngine_getMarketDataAPI(self)

    def getTradingAPI(self):
        return _AlgoSE.IEngine_getTradingAPI(self)

    def stop(self):
        return _AlgoSE.IEngine_stop(self)

    def version(self):
        return _AlgoSE.IEngine_version(self)
IEngine_swigregister = _AlgoSE.IEngine_swigregister
IEngine_swigregister(IEngine)

class Listener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Listener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Listener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AlgoSE.delete_Listener
    __del__ = lambda self: None

    def onSystemLog(self, log):
        return _AlgoSE.Listener_onSystemLog(self, log)

    def onServiceStatus(self, status):
        return _AlgoSE.Listener_onServiceStatus(self, status)

    def onAccountDetails(self, account):
        return _AlgoSE.Listener_onAccountDetails(self, account)

    def onAccountPosition(self, position):
        return _AlgoSE.Listener_onAccountPosition(self, position)

    def onTick(self, tick):
        return _AlgoSE.Listener_onTick(self, tick)

    def onBar(self, bar):
        return _AlgoSE.Listener_onBar(self, bar)

    def onOrderStatus(self, order):
        return _AlgoSE.Listener_onOrderStatus(self, order)

    def onExecutionReport(self, execution):
        return _AlgoSE.Listener_onExecutionReport(self, execution)

    def onStrategyStatus(self, status):
        return _AlgoSE.Listener_onStrategyStatus(self, status)

    def onStrategyParameter(self, param):
        return _AlgoSE.Listener_onStrategyParameter(self, param)

    def onStrategyPosition(self, position):
        return _AlgoSE.Listener_onStrategyPosition(self, position)

    def onStrategyLog(self, log):
        return _AlgoSE.Listener_onStrategyLog(self, log)

    def onRemoteConnect(self):
        return _AlgoSE.Listener_onRemoteConnect(self)

    def onRemoteDisconnect(self):
        return _AlgoSE.Listener_onRemoteDisconnect(self)

    def __init__(self):
        if self.__class__ == Listener:
            _self = None
        else:
            _self = self
        this = _AlgoSE.new_Listener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _AlgoSE.disown_Listener(self)
        return weakref_proxy(self)
Listener_swigregister = _AlgoSE.Listener_swigregister
Listener_swigregister(Listener)

class MarketDataAPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketDataAPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarketDataAPI, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AlgoSE.delete_MarketDataAPI
    __del__ = lambda self: None

    def subscribe(self, *args):
        return _AlgoSE.MarketDataAPI_subscribe(self, *args)

    def getTickSize(self, instrument, srvId=0):
        return _AlgoSE.MarketDataAPI_getTickSize(self, instrument, srvId)

    def getLastPrice(self, instrument, srvId=0):
        return _AlgoSE.MarketDataAPI_getLastPrice(self, instrument, srvId)

    def getAskPrice(self, instrument, srvId=0):
        return _AlgoSE.MarketDataAPI_getAskPrice(self, instrument, srvId)

    def getBidPrice(self, instrument, srvId=0):
        return _AlgoSE.MarketDataAPI_getBidPrice(self, instrument, srvId)

    def getUpperLimitPrice(self, instrument, srvId=0):
        return _AlgoSE.MarketDataAPI_getUpperLimitPrice(self, instrument, srvId)

    def getLowerLimitPrice(self, instrument, srvId=0):
        return _AlgoSE.MarketDataAPI_getLowerLimitPrice(self, instrument, srvId)
MarketDataAPI_swigregister = _AlgoSE.MarketDataAPI_swigregister
MarketDataAPI_swigregister(MarketDataAPI)

class TradingAPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingAPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TradingAPI, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AlgoSE.delete_TradingAPI
    __del__ = lambda self: None

    def buy(self, instrument, quantity, price, srvId=0):
        return _AlgoSE.TradingAPI_buy(self, instrument, quantity, price, srvId)

    def sell(self, instrument, quantity, price, srvId=0):
        return _AlgoSE.TradingAPI_sell(self, instrument, quantity, price, srvId)

    def sellShort(self, instrument, quantity, price, srvId=0):
        return _AlgoSE.TradingAPI_sellShort(self, instrument, quantity, price, srvId)

    def buyToCover(self, instrument, quantity, price, srvId=0):
        return _AlgoSE.TradingAPI_buyToCover(self, instrument, quantity, price, srvId)

    def submitOrder(self, order):
        return _AlgoSE.TradingAPI_submitOrder(self, order)

    def cancelOrder(self, *args):
        return _AlgoSE.TradingAPI_cancelOrder(self, *args)

    def closeAllPos(self):
        return _AlgoSE.TradingAPI_closeAllPos(self)
TradingAPI_swigregister = _AlgoSE.TradingAPI_swigregister
TradingAPI_swigregister(TradingAPI)

DEFAULT_ENGINE_CONFIG_FILE = _AlgoSE.DEFAULT_ENGINE_CONFIG_FILE
class Engine(IEngine):
    __swig_setmethods__ = {}
    for _s in [IEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    for _s in [IEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_AlgoSE.Engine_getInstance)
    else:
        getInstance = _AlgoSE.Engine_getInstance

    def setRunningMode(self, mode):
        return _AlgoSE.Engine_setRunningMode(self, mode)

    def enableRemoteSrvAccess(self):
        return _AlgoSE.Engine_enableRemoteSrvAccess(self)

    def setRemoteSrvAddress(self, addr, port):
        return _AlgoSE.Engine_setRemoteSrvAddress(self, addr, port)

    def setRemoteMgrListenPort(self, port):
        return _AlgoSE.Engine_setRemoteMgrListenPort(self, port)

    def setRemoteMgrUnderlyingServiceName(self, type, name):
        return _AlgoSE.Engine_setRemoteMgrUnderlyingServiceName(self, type, name)

    def enableRemoteManager(self):
        return _AlgoSE.Engine_enableRemoteManager(self)

    def setLogFilePath(self, path):
        return _AlgoSE.Engine_setLogFilePath(self, path)

    def disableConsoleLog(self, mask):
        return _AlgoSE.Engine_disableConsoleLog(self, mask)

    def enableConsoleLog(self, mask):
        return _AlgoSE.Engine_enableConsoleLog(self, mask)

    def setSimulatorConfig(self, config):
        return _AlgoSE.Engine_setSimulatorConfig(self, config)

    def enablePerformanceMode(self):
        return _AlgoSE.Engine_enablePerformanceMode(self)

    def isPerformanceMode(self):
        return _AlgoSE.Engine_isPerformanceMode(self)

    def registerListener(self, listener):
        return _AlgoSE.Engine_registerListener(self, listener)

    def unregisterListener(self, listener):
        return _AlgoSE.Engine_unregisterListener(self, listener)

    def initialize(self, *args):
        return _AlgoSE.Engine_initialize(self, *args)

    def loadStrategy(self, *args):
        return _AlgoSE.Engine_loadStrategy(self, *args)

    def run(self):
        return _AlgoSE.Engine_run(self)

    def launchStrategy(self, stratId):
        return _AlgoSE.Engine_launchStrategy(self, stratId)

    def getStrategyStatus(self, stratId):
        return _AlgoSE.Engine_getStrategyStatus(self, stratId)

    def assignStrategyPosition(self, stratId, instrument, side, quantity, price):
        return _AlgoSE.Engine_assignStrategyPosition(self, stratId, instrument, side, quantity, price)

    def sendStrategyCommand(self, stratId, command):
        return _AlgoSE.Engine_sendStrategyCommand(self, stratId, command)

    def setStrategyParameter(self, stratId, param):
        return _AlgoSE.Engine_setStrategyParameter(self, stratId, param)

    def showVerboseMsg(self, stratId):
        return _AlgoSE.Engine_showVerboseMsg(self, stratId)

    def hideVerboseMsg(self, stratId):
        return _AlgoSE.Engine_hideVerboseMsg(self, stratId)

    def pauseStrategy(self, stratId):
        return _AlgoSE.Engine_pauseStrategy(self, stratId)

    def resumeStrategy(self, stratId):
        return _AlgoSE.Engine_resumeStrategy(self, stratId)

    def stopStrategy(self, stratId):
        return _AlgoSE.Engine_stopStrategy(self, stratId)

    def registerService(self, *args):
        return _AlgoSE.Engine_registerService(self, *args)

    def reloadService(self, type, id):
        return _AlgoSE.Engine_reloadService(self, type, id)

    def reinitializeService(self, type, id):
        return _AlgoSE.Engine_reinitializeService(self, type, id)

    def writeLogMsg(self, level, msg):
        return _AlgoSE.Engine_writeLogMsg(self, level, msg)

    def getMarketDataAPI(self):
        return _AlgoSE.Engine_getMarketDataAPI(self)

    def getTradingAPI(self):
        return _AlgoSE.Engine_getTradingAPI(self)

    def stop(self):
        return _AlgoSE.Engine_stop(self)

    def version(self):
        return _AlgoSE.Engine_version(self)

    def release(self):
        return _AlgoSE.Engine_release(self)
Engine_swigregister = _AlgoSE.Engine_swigregister
Engine_swigregister(Engine)

def Engine_getInstance():
    return _AlgoSE.Engine_getInstance()
Engine_getInstance = _AlgoSE.Engine_getInstance

class ServiceType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceType, name)
    __repr__ = _swig_repr
    SERVICE_UNKNOWN = _AlgoSE.ServiceType_SERVICE_UNKNOWN
    SERVICE_TIMER = _AlgoSE.ServiceType_SERVICE_TIMER
    SERVICE_INSTRUMENT = _AlgoSE.ServiceType_SERVICE_INSTRUMENT
    SERVICE_MARKET_DATA = _AlgoSE.ServiceType_SERVICE_MARKET_DATA
    SERVICE_HISTORICAL_DATA = _AlgoSE.ServiceType_SERVICE_HISTORICAL_DATA
    SERVICE_ORDER_EXECUTION = _AlgoSE.ServiceType_SERVICE_ORDER_EXECUTION

    def __init__(self):
        this = _AlgoSE.new_ServiceType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_ServiceType
    __del__ = lambda self: None
ServiceType_swigregister = _AlgoSE.ServiceType_swigregister
ServiceType_swigregister(ServiceType)

class MarketDataServiceState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketDataServiceState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarketDataServiceState, name)
    __repr__ = _swig_repr
    LOADED = _AlgoSE.MarketDataServiceState_LOADED
    CONNECTED = _AlgoSE.MarketDataServiceState_CONNECTED
    CONNECT_ERROR = _AlgoSE.MarketDataServiceState_CONNECT_ERROR
    DISCONNECTED = _AlgoSE.MarketDataServiceState_DISCONNECTED
    INITIALIZE_DONE = _AlgoSE.MarketDataServiceState_INITIALIZE_DONE

    def __init__(self):
        this = _AlgoSE.new_MarketDataServiceState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_MarketDataServiceState
    __del__ = lambda self: None
MarketDataServiceState_swigregister = _AlgoSE.MarketDataServiceState_swigregister
MarketDataServiceState_swigregister(MarketDataServiceState)

class ExecutionServiceState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecutionServiceState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExecutionServiceState, name)
    __repr__ = _swig_repr
    LOADED = _AlgoSE.ExecutionServiceState_LOADED
    CONNECTED = _AlgoSE.ExecutionServiceState_CONNECTED
    CONNECT_ERROR = _AlgoSE.ExecutionServiceState_CONNECT_ERROR
    DISCONNECTED = _AlgoSE.ExecutionServiceState_DISCONNECTED
    INITIALIZE_DONE = _AlgoSE.ExecutionServiceState_INITIALIZE_DONE
    READY = _AlgoSE.ExecutionServiceState_READY
    RESET = _AlgoSE.ExecutionServiceState_RESET

    def __init__(self):
        this = _AlgoSE.new_ExecutionServiceState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_ExecutionServiceState
    __del__ = lambda self: None
ExecutionServiceState_swigregister = _AlgoSE.ExecutionServiceState_swigregister
ExecutionServiceState_swigregister(ExecutionServiceState)

class HistoricalDataServiceState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoricalDataServiceState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoricalDataServiceState, name)
    __repr__ = _swig_repr
    LOADED = _AlgoSE.HistoricalDataServiceState_LOADED
    CONNECTED = _AlgoSE.HistoricalDataServiceState_CONNECTED
    CONNECT_ERROR = _AlgoSE.HistoricalDataServiceState_CONNECT_ERROR
    DISCONNECTED = _AlgoSE.HistoricalDataServiceState_DISCONNECTED
    INITIALIZE_DONE = _AlgoSE.HistoricalDataServiceState_INITIALIZE_DONE

    def __init__(self):
        this = _AlgoSE.new_HistoricalDataServiceState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_HistoricalDataServiceState
    __del__ = lambda self: None
HistoricalDataServiceState_swigregister = _AlgoSE.HistoricalDataServiceState_swigregister
HistoricalDataServiceState_swigregister(HistoricalDataServiceState)

class TimerServiceState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerServiceState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimerServiceState, name)
    __repr__ = _swig_repr
    LOADED = _AlgoSE.TimerServiceState_LOADED
    CONNECTED = _AlgoSE.TimerServiceState_CONNECTED
    CONNECT_ERROR = _AlgoSE.TimerServiceState_CONNECT_ERROR
    DISCONNECTED = _AlgoSE.TimerServiceState_DISCONNECTED
    INITIALIZE_DONE = _AlgoSE.TimerServiceState_INITIALIZE_DONE

    def __init__(self):
        this = _AlgoSE.new_TimerServiceState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_TimerServiceState
    __del__ = lambda self: None
TimerServiceState_swigregister = _AlgoSE.TimerServiceState_swigregister
TimerServiceState_swigregister(TimerServiceState)

class ServiceBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AlgoSE.delete_ServiceBase
    __del__ = lambda self: None

    def initialize(self, config):
        return _AlgoSE.ServiceBase_initialize(self, config)

    def reinitialize(self):
        return _AlgoSE.ServiceBase_reinitialize(self)

    def release(self):
        return _AlgoSE.ServiceBase_release(self)

    def setId(self, id):
        return _AlgoSE.ServiceBase_setId(self, id)

    def getId(self):
        return _AlgoSE.ServiceBase_getId(self)

    def setType(self, type):
        return _AlgoSE.ServiceBase_setType(self, type)

    def getType(self):
        return _AlgoSE.ServiceBase_getType(self)

    def setName(self, name):
        return _AlgoSE.ServiceBase_setName(self, name)

    def getName(self):
        return _AlgoSE.ServiceBase_getName(self)

    def attach(self, engine):
        return _AlgoSE.ServiceBase_attach(self, engine)
ServiceBase_swigregister = _AlgoSE.ServiceBase_swigregister
ServiceBase_swigregister(ServiceBase)

INVALID_SERVICE_ID = _AlgoSE.INVALID_SERVICE_ID
TIMER_SERVICE_TYPE_NAME = _AlgoSE.TIMER_SERVICE_TYPE_NAME
class TimerService(ServiceBase):
    __swig_setmethods__ = {}
    for _s in [ServiceBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerService, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimerService, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def registerTimer(self, msFromNow, extra, compId, ownerId):
        return _AlgoSE.TimerService_registerTimer(self, msFromNow, extra, compId, ownerId)

    def unregisterTimer(self, timerId):
        return _AlgoSE.TimerService_unregisterTimer(self, timerId)
    __swig_destroy__ = _AlgoSE.delete_TimerService
    __del__ = lambda self: None
TimerService_swigregister = _AlgoSE.TimerService_swigregister
TimerService_swigregister(TimerService)

INSTRUMENT_SERVICE_TYPE_NAME = _AlgoSE.INSTRUMENT_SERVICE_TYPE_NAME
class SecurityDefinitionService(ServiceBase):
    __swig_setmethods__ = {}
    for _s in [ServiceBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityDefinitionService, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityDefinitionService, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AlgoSE.delete_SecurityDefinitionService
    __del__ = lambda self: None
SecurityDefinitionService_swigregister = _AlgoSE.SecurityDefinitionService_swigregister
SecurityDefinitionService_swigregister(SecurityDefinitionService)

MARKET_DATA_SERVICE_TYPE_NAME = _AlgoSE.MARKET_DATA_SERVICE_TYPE_NAME
class MarketDataService(ServiceBase):
    __swig_setmethods__ = {}
    for _s in [ServiceBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketDataService, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketDataService, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getSupportedExchanges(self):
        return _AlgoSE.MarketDataService_getSupportedExchanges(self)

    def subscribe(self, instruments, num):
        return _AlgoSE.MarketDataService_subscribe(self, instruments, num)

    def unsubscribe(self, instruments, num):
        return _AlgoSE.MarketDataService_unsubscribe(self, instruments, num)
    __swig_destroy__ = _AlgoSE.delete_MarketDataService
    __del__ = lambda self: None
MarketDataService_swigregister = _AlgoSE.MarketDataService_swigregister
MarketDataService_swigregister(MarketDataService)

EXECUTION_SERVICE_TYPE_NAME = _AlgoSE.EXECUTION_SERVICE_TYPE_NAME
EXEC_SRV_POS_PRICING_MODEL_PARAM_NAME = _AlgoSE.EXEC_SRV_POS_PRICING_MODEL_PARAM_NAME
EXEC_SRV_POS_PRICING_FIFO = _AlgoSE.EXEC_SRV_POS_PRICING_FIFO
EXEC_SRV_POS_PRICING_COMBINED = _AlgoSE.EXEC_SRV_POS_PRICING_COMBINED
class ExecutionService(ServiceBase):
    __swig_setmethods__ = {}
    for _s in [ServiceBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecutionService, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecutionService, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def submitOrder(self, order):
        return _AlgoSE.ExecutionService_submitOrder(self, order)

    def cancelOrder(self, order):
        return _AlgoSE.ExecutionService_cancelOrder(self, order)

    def motifyOrder(self, order):
        return _AlgoSE.ExecutionService_motifyOrder(self, order)
    __swig_destroy__ = _AlgoSE.delete_ExecutionService
    __del__ = lambda self: None
ExecutionService_swigregister = _AlgoSE.ExecutionService_swigregister
ExecutionService_swigregister(ExecutionService)

HISTORICAL_DATA_SERVICE_TYPE_NAME = _AlgoSE.HISTORICAL_DATA_SERVICE_TYPE_NAME
class HistoricalDataService(ServiceBase):
    __swig_setmethods__ = {}
    for _s in [ServiceBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoricalDataService, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HistoricalDataService, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def requestHistoricMarketData(self, request):
        return _AlgoSE.HistoricalDataService_requestHistoricMarketData(self, request)

    def freeRequest(self, reqId):
        return _AlgoSE.HistoricalDataService_freeRequest(self, reqId)
    __swig_destroy__ = _AlgoSE.delete_HistoricalDataService
    __del__ = lambda self: None
HistoricalDataService_swigregister = _AlgoSE.HistoricalDataService_swigregister
HistoricalDataService_swigregister(HistoricalDataService)

ALERT_SERVICE_TYPE_NAME = _AlgoSE.ALERT_SERVICE_TYPE_NAME
class AlertService(ServiceBase):
    __swig_setmethods__ = {}
    for _s in [ServiceBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlertService, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlertService, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def sendAlertMessage(self, level, text):
        return _AlgoSE.AlertService_sendAlertMessage(self, level, text)

    def cancelAlert(self, alertId):
        return _AlgoSE.AlertService_cancelAlert(self, alertId)
    __swig_destroy__ = _AlgoSE.delete_AlertService
    __del__ = lambda self: None
AlertService_swigregister = _AlgoSE.AlertService_swigregister
AlertService_swigregister(AlertService)

class OrderList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_OrderList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_OrderList
    __del__ = lambda self: None

    def push_back(self, order):
        return _AlgoSE.OrderList_push_back(self, order)

    def clear(self):
        return _AlgoSE.OrderList_clear(self)

    def size(self):
        return _AlgoSE.OrderList_size(self)

    def getImplementor(self):
        return _AlgoSE.OrderList_getImplementor(self)
OrderList_swigregister = _AlgoSE.OrderList_swigregister
OrderList_swigregister(OrderList)

class AccountPositionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountPositionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccountPositionList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_AccountPositionList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_AccountPositionList
    __del__ = lambda self: None

    def clear(self):
        return _AlgoSE.AccountPositionList_clear(self)

    def size(self):
        return _AlgoSE.AccountPositionList_size(self)

    def getImplementor(self):
        return _AlgoSE.AccountPositionList_getImplementor(self)
AccountPositionList_swigregister = _AlgoSE.AccountPositionList_swigregister
AccountPositionList_swigregister(AccountPositionList)

class StrategyPositionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyPositionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyPositionList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_StrategyPositionList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_StrategyPositionList
    __del__ = lambda self: None

    def clear(self):
        return _AlgoSE.StrategyPositionList_clear(self)

    def size(self):
        return _AlgoSE.StrategyPositionList_size(self)

    def begin(self, *args):
        return _AlgoSE.StrategyPositionList_begin(self, *args)

    def end(self, *args):
        return _AlgoSE.StrategyPositionList_end(self, *args)

    def getImplementor(self):
        return _AlgoSE.StrategyPositionList_getImplementor(self)
StrategyPositionList_swigregister = _AlgoSE.StrategyPositionList_swigregister
StrategyPositionList_swigregister(StrategyPositionList)

class AlgoParamID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlgoParamID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlgoParamID, name)
    __repr__ = _swig_repr
    ParamId_Start = _AlgoSE.AlgoParamID_ParamId_Start
    LowerLimit_PriceTicks = _AlgoSE.AlgoParamID_LowerLimit_PriceTicks
    UpperLimit_PriceTicks = _AlgoSE.AlgoParamID_UpperLimit_PriceTicks
    Float_PriceTicks = _AlgoSE.AlgoParamID_Float_PriceTicks
    TimeToLive_Ms = _AlgoSE.AlgoParamID_TimeToLive_Ms
    CloseAction_TimeToLive_Ms = _AlgoSE.AlgoParamID_CloseAction_TimeToLive_Ms
    PriceCancel_SeekBestPrice = _AlgoSE.AlgoParamID_PriceCancel_SeekBestPrice
    NormalPhase_PriceType = _AlgoSE.AlgoParamID_NormalPhase_PriceType
    NormalPhase_CloseAction_PriceType = _AlgoSE.AlgoParamID_NormalPhase_CloseAction_PriceType
    NormalPhase_Order_TimeInforce = _AlgoSE.AlgoParamID_NormalPhase_Order_TimeInforce
    NormalPhase_CloseAction_Order_TimeInforce = _AlgoSE.AlgoParamID_NormalPhase_CloseAction_Order_TimeInforce
    NormalPhase_LowerCancel_PriceTicks = _AlgoSE.AlgoParamID_NormalPhase_LowerCancel_PriceTicks
    NormalPhase_UpperCancel_PriceTicks = _AlgoSE.AlgoParamID_NormalPhase_UpperCancel_PriceTicks
    NormalPhase_CloseAction_LowerCancel_PriceTicks = _AlgoSE.AlgoParamID_NormalPhase_CloseAction_LowerCancel_PriceTicks
    NormalPhase_CloseAction_UpperCancel_PriceTicks = _AlgoSE.AlgoParamID_NormalPhase_CloseAction_UpperCancel_PriceTicks
    NormalPhase_CancelTime_Ms = _AlgoSE.AlgoParamID_NormalPhase_CancelTime_Ms
    NormalPhase_CloseAction_CancelTime_Ms = _AlgoSE.AlgoParamID_NormalPhase_CloseAction_CancelTime_Ms
    CatchPhase_PriceType = _AlgoSE.AlgoParamID_CatchPhase_PriceType
    CatchPhase_CloseAction_PriceType = _AlgoSE.AlgoParamID_CatchPhase_CloseAction_PriceType
    CatchPhase_Order_TimeInforce = _AlgoSE.AlgoParamID_CatchPhase_Order_TimeInforce
    CatchPhase_CloseAction_Order_TimeInforce = _AlgoSE.AlgoParamID_CatchPhase_CloseAction_Order_TimeInforce
    CatchPhase_LowerCancel_PriceTicks = _AlgoSE.AlgoParamID_CatchPhase_LowerCancel_PriceTicks
    CatchPhase_UpperCancel_PriceTicks = _AlgoSE.AlgoParamID_CatchPhase_UpperCancel_PriceTicks
    CatchPhase_CloseAction_LowerCancel_PriceTicks = _AlgoSE.AlgoParamID_CatchPhase_CloseAction_LowerCancel_PriceTicks
    CatchPhase_CloseAction_UpperCancel_PriceTicks = _AlgoSE.AlgoParamID_CatchPhase_CloseAction_UpperCancel_PriceTicks
    CatchPhase_CancelTime_Ms = _AlgoSE.AlgoParamID_CatchPhase_CancelTime_Ms
    CatchPhase_CloseAction_CancelTime_Ms = _AlgoSE.AlgoParamID_CatchPhase_CloseAction_CancelTime_Ms
    ParamId_End = _AlgoSE.AlgoParamID_ParamId_End

    def __init__(self):
        this = _AlgoSE.new_AlgoParamID()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_AlgoParamID
    __del__ = lambda self: None
AlgoParamID_swigregister = _AlgoSE.AlgoParamID_swigregister
AlgoParamID_swigregister(AlgoParamID)

LowerLimit_PriceTicks_ParamName = _AlgoSE.LowerLimit_PriceTicks_ParamName
UpperLimit_PriceTicks_ParamName = _AlgoSE.UpperLimit_PriceTicks_ParamName
Float_PriceTicks_ParamName = _AlgoSE.Float_PriceTicks_ParamName
TimeToLive_Ms_ParamName = _AlgoSE.TimeToLive_Ms_ParamName
CloseAction_TimeToLive_Ms_ParamName = _AlgoSE.CloseAction_TimeToLive_Ms_ParamName
PriceCancel_SeekBestPrice_ParamName = _AlgoSE.PriceCancel_SeekBestPrice_ParamName
NormalPhase_PriceType_ParamName = _AlgoSE.NormalPhase_PriceType_ParamName
NormalPhase_CloseAction_PriceType_ParamName = _AlgoSE.NormalPhase_CloseAction_PriceType_ParamName
NormalPhase_Order_TimeInforce_ParamName = _AlgoSE.NormalPhase_Order_TimeInforce_ParamName
NormalPhase_CloseAction_Order_TimeInforce_ParamName = _AlgoSE.NormalPhase_CloseAction_Order_TimeInforce_ParamName
NormalPhase_LowerCancel_PriceTicks_ParamName = _AlgoSE.NormalPhase_LowerCancel_PriceTicks_ParamName
NormalPhase_UpperCancel_PriceTicks_ParamName = _AlgoSE.NormalPhase_UpperCancel_PriceTicks_ParamName
NormalPhase_CloseAction_LowerCancel_PriceTicks_ParamName = _AlgoSE.NormalPhase_CloseAction_LowerCancel_PriceTicks_ParamName
NormalPhase_CloseAction_UpperCancel_PriceTicks_ParamName = _AlgoSE.NormalPhase_CloseAction_UpperCancel_PriceTicks_ParamName
NormalPhase_CancelTime_Ms_ParamName = _AlgoSE.NormalPhase_CancelTime_Ms_ParamName
NormalPhase_CloseAction_CancelTime_Ms_ParamName = _AlgoSE.NormalPhase_CloseAction_CancelTime_Ms_ParamName
CatchPhase_PriceType_ParamName = _AlgoSE.CatchPhase_PriceType_ParamName
CatchPhase_CloseAction_PriceType_ParamName = _AlgoSE.CatchPhase_CloseAction_PriceType_ParamName
CatchPhase_Order_TimeInforce_ParamName = _AlgoSE.CatchPhase_Order_TimeInforce_ParamName
CatchPhase_CloseAction_Order_TimeInforce_ParamName = _AlgoSE.CatchPhase_CloseAction_Order_TimeInforce_ParamName
CatchPhase_LowerCancel_PriceTicks_ParamName = _AlgoSE.CatchPhase_LowerCancel_PriceTicks_ParamName
CatchPhase_UpperCancel_PriceTicks_ParamName = _AlgoSE.CatchPhase_UpperCancel_PriceTicks_ParamName
CatchPhase_CloseAction_LowerCancel_PriceTicks_ParamName = _AlgoSE.CatchPhase_CloseAction_LowerCancel_PriceTicks_ParamName
CatchPhase_CloseAction_UpperCancel_PriceTicks_ParamName = _AlgoSE.CatchPhase_CloseAction_UpperCancel_PriceTicks_ParamName
CatchPhase_CancelTime_Ms_ParamName = _AlgoSE.CatchPhase_CancelTime_Ms_ParamName
CatchPhase_CloseAction_CancelTime_Ms_ParamName = _AlgoSE.CatchPhase_CloseAction_CancelTime_Ms_ParamName
class Params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NormalPhase_PriceType"] = _AlgoSE.Params_NormalPhase_PriceType_set
    __swig_getmethods__["NormalPhase_PriceType"] = _AlgoSE.Params_NormalPhase_PriceType_get
    if _newclass:
        NormalPhase_PriceType = _swig_property(_AlgoSE.Params_NormalPhase_PriceType_get, _AlgoSE.Params_NormalPhase_PriceType_set)
    __swig_setmethods__["NormalPhase_CloseAction_PriceType"] = _AlgoSE.Params_NormalPhase_CloseAction_PriceType_set
    __swig_getmethods__["NormalPhase_CloseAction_PriceType"] = _AlgoSE.Params_NormalPhase_CloseAction_PriceType_get
    if _newclass:
        NormalPhase_CloseAction_PriceType = _swig_property(_AlgoSE.Params_NormalPhase_CloseAction_PriceType_get, _AlgoSE.Params_NormalPhase_CloseAction_PriceType_set)
    __swig_setmethods__["NormalPhase_Order_TimeInforce"] = _AlgoSE.Params_NormalPhase_Order_TimeInforce_set
    __swig_getmethods__["NormalPhase_Order_TimeInforce"] = _AlgoSE.Params_NormalPhase_Order_TimeInforce_get
    if _newclass:
        NormalPhase_Order_TimeInforce = _swig_property(_AlgoSE.Params_NormalPhase_Order_TimeInforce_get, _AlgoSE.Params_NormalPhase_Order_TimeInforce_set)
    __swig_setmethods__["NormalPhase_CloseAction_Order_TimeInforce"] = _AlgoSE.Params_NormalPhase_CloseAction_Order_TimeInforce_set
    __swig_getmethods__["NormalPhase_CloseAction_Order_TimeInforce"] = _AlgoSE.Params_NormalPhase_CloseAction_Order_TimeInforce_get
    if _newclass:
        NormalPhase_CloseAction_Order_TimeInforce = _swig_property(_AlgoSE.Params_NormalPhase_CloseAction_Order_TimeInforce_get, _AlgoSE.Params_NormalPhase_CloseAction_Order_TimeInforce_set)
    __swig_setmethods__["CatchPhase_PriceType"] = _AlgoSE.Params_CatchPhase_PriceType_set
    __swig_getmethods__["CatchPhase_PriceType"] = _AlgoSE.Params_CatchPhase_PriceType_get
    if _newclass:
        CatchPhase_PriceType = _swig_property(_AlgoSE.Params_CatchPhase_PriceType_get, _AlgoSE.Params_CatchPhase_PriceType_set)
    __swig_setmethods__["CatchPhase_CloseAction_PriceType"] = _AlgoSE.Params_CatchPhase_CloseAction_PriceType_set
    __swig_getmethods__["CatchPhase_CloseAction_PriceType"] = _AlgoSE.Params_CatchPhase_CloseAction_PriceType_get
    if _newclass:
        CatchPhase_CloseAction_PriceType = _swig_property(_AlgoSE.Params_CatchPhase_CloseAction_PriceType_get, _AlgoSE.Params_CatchPhase_CloseAction_PriceType_set)
    __swig_setmethods__["CatchPhase_Order_TimeInforce"] = _AlgoSE.Params_CatchPhase_Order_TimeInforce_set
    __swig_getmethods__["CatchPhase_Order_TimeInforce"] = _AlgoSE.Params_CatchPhase_Order_TimeInforce_get
    if _newclass:
        CatchPhase_Order_TimeInforce = _swig_property(_AlgoSE.Params_CatchPhase_Order_TimeInforce_get, _AlgoSE.Params_CatchPhase_Order_TimeInforce_set)
    __swig_setmethods__["CatchPhase_CloseAction_Order_TimeInforce"] = _AlgoSE.Params_CatchPhase_CloseAction_Order_TimeInforce_set
    __swig_getmethods__["CatchPhase_CloseAction_Order_TimeInforce"] = _AlgoSE.Params_CatchPhase_CloseAction_Order_TimeInforce_get
    if _newclass:
        CatchPhase_CloseAction_Order_TimeInforce = _swig_property(_AlgoSE.Params_CatchPhase_CloseAction_Order_TimeInforce_get, _AlgoSE.Params_CatchPhase_CloseAction_Order_TimeInforce_set)
    __swig_setmethods__["LowerLimit_PriceTicks"] = _AlgoSE.Params_LowerLimit_PriceTicks_set
    __swig_getmethods__["LowerLimit_PriceTicks"] = _AlgoSE.Params_LowerLimit_PriceTicks_get
    if _newclass:
        LowerLimit_PriceTicks = _swig_property(_AlgoSE.Params_LowerLimit_PriceTicks_get, _AlgoSE.Params_LowerLimit_PriceTicks_set)
    __swig_setmethods__["UpperLimit_PriceTicks"] = _AlgoSE.Params_UpperLimit_PriceTicks_set
    __swig_getmethods__["UpperLimit_PriceTicks"] = _AlgoSE.Params_UpperLimit_PriceTicks_get
    if _newclass:
        UpperLimit_PriceTicks = _swig_property(_AlgoSE.Params_UpperLimit_PriceTicks_get, _AlgoSE.Params_UpperLimit_PriceTicks_set)
    __swig_setmethods__["Cancelation_Num_Limit"] = _AlgoSE.Params_Cancelation_Num_Limit_set
    __swig_getmethods__["Cancelation_Num_Limit"] = _AlgoSE.Params_Cancelation_Num_Limit_get
    if _newclass:
        Cancelation_Num_Limit = _swig_property(_AlgoSE.Params_Cancelation_Num_Limit_get, _AlgoSE.Params_Cancelation_Num_Limit_set)
    __swig_setmethods__["Float_PriceTicks"] = _AlgoSE.Params_Float_PriceTicks_set
    __swig_getmethods__["Float_PriceTicks"] = _AlgoSE.Params_Float_PriceTicks_get
    if _newclass:
        Float_PriceTicks = _swig_property(_AlgoSE.Params_Float_PriceTicks_get, _AlgoSE.Params_Float_PriceTicks_set)
    __swig_setmethods__["PriceCancel_SeekBestPrice"] = _AlgoSE.Params_PriceCancel_SeekBestPrice_set
    __swig_getmethods__["PriceCancel_SeekBestPrice"] = _AlgoSE.Params_PriceCancel_SeekBestPrice_get
    if _newclass:
        PriceCancel_SeekBestPrice = _swig_property(_AlgoSE.Params_PriceCancel_SeekBestPrice_get, _AlgoSE.Params_PriceCancel_SeekBestPrice_set)
    __swig_setmethods__["NormalPhase_LowerCancel_PriceTicks"] = _AlgoSE.Params_NormalPhase_LowerCancel_PriceTicks_set
    __swig_getmethods__["NormalPhase_LowerCancel_PriceTicks"] = _AlgoSE.Params_NormalPhase_LowerCancel_PriceTicks_get
    if _newclass:
        NormalPhase_LowerCancel_PriceTicks = _swig_property(_AlgoSE.Params_NormalPhase_LowerCancel_PriceTicks_get, _AlgoSE.Params_NormalPhase_LowerCancel_PriceTicks_set)
    __swig_setmethods__["NormalPhase_UpperCancel_PriceTicks"] = _AlgoSE.Params_NormalPhase_UpperCancel_PriceTicks_set
    __swig_getmethods__["NormalPhase_UpperCancel_PriceTicks"] = _AlgoSE.Params_NormalPhase_UpperCancel_PriceTicks_get
    if _newclass:
        NormalPhase_UpperCancel_PriceTicks = _swig_property(_AlgoSE.Params_NormalPhase_UpperCancel_PriceTicks_get, _AlgoSE.Params_NormalPhase_UpperCancel_PriceTicks_set)
    __swig_setmethods__["NormalPhase_CloseAction_LowerCancel_PriceTicks"] = _AlgoSE.Params_NormalPhase_CloseAction_LowerCancel_PriceTicks_set
    __swig_getmethods__["NormalPhase_CloseAction_LowerCancel_PriceTicks"] = _AlgoSE.Params_NormalPhase_CloseAction_LowerCancel_PriceTicks_get
    if _newclass:
        NormalPhase_CloseAction_LowerCancel_PriceTicks = _swig_property(_AlgoSE.Params_NormalPhase_CloseAction_LowerCancel_PriceTicks_get, _AlgoSE.Params_NormalPhase_CloseAction_LowerCancel_PriceTicks_set)
    __swig_setmethods__["NormalPhase_CloseAction_UpperCancel_PriceTicks"] = _AlgoSE.Params_NormalPhase_CloseAction_UpperCancel_PriceTicks_set
    __swig_getmethods__["NormalPhase_CloseAction_UpperCancel_PriceTicks"] = _AlgoSE.Params_NormalPhase_CloseAction_UpperCancel_PriceTicks_get
    if _newclass:
        NormalPhase_CloseAction_UpperCancel_PriceTicks = _swig_property(_AlgoSE.Params_NormalPhase_CloseAction_UpperCancel_PriceTicks_get, _AlgoSE.Params_NormalPhase_CloseAction_UpperCancel_PriceTicks_set)
    __swig_setmethods__["CatchPhase_LowerCancel_PriceTicks"] = _AlgoSE.Params_CatchPhase_LowerCancel_PriceTicks_set
    __swig_getmethods__["CatchPhase_LowerCancel_PriceTicks"] = _AlgoSE.Params_CatchPhase_LowerCancel_PriceTicks_get
    if _newclass:
        CatchPhase_LowerCancel_PriceTicks = _swig_property(_AlgoSE.Params_CatchPhase_LowerCancel_PriceTicks_get, _AlgoSE.Params_CatchPhase_LowerCancel_PriceTicks_set)
    __swig_setmethods__["CatchPhase_UpperCancel_PriceTicks"] = _AlgoSE.Params_CatchPhase_UpperCancel_PriceTicks_set
    __swig_getmethods__["CatchPhase_UpperCancel_PriceTicks"] = _AlgoSE.Params_CatchPhase_UpperCancel_PriceTicks_get
    if _newclass:
        CatchPhase_UpperCancel_PriceTicks = _swig_property(_AlgoSE.Params_CatchPhase_UpperCancel_PriceTicks_get, _AlgoSE.Params_CatchPhase_UpperCancel_PriceTicks_set)
    __swig_setmethods__["CatchPhase_CloseAction_LowerCancel_PriceTicks"] = _AlgoSE.Params_CatchPhase_CloseAction_LowerCancel_PriceTicks_set
    __swig_getmethods__["CatchPhase_CloseAction_LowerCancel_PriceTicks"] = _AlgoSE.Params_CatchPhase_CloseAction_LowerCancel_PriceTicks_get
    if _newclass:
        CatchPhase_CloseAction_LowerCancel_PriceTicks = _swig_property(_AlgoSE.Params_CatchPhase_CloseAction_LowerCancel_PriceTicks_get, _AlgoSE.Params_CatchPhase_CloseAction_LowerCancel_PriceTicks_set)
    __swig_setmethods__["CatchPhase_CloseAction_UpperCancel_PriceTicks"] = _AlgoSE.Params_CatchPhase_CloseAction_UpperCancel_PriceTicks_set
    __swig_getmethods__["CatchPhase_CloseAction_UpperCancel_PriceTicks"] = _AlgoSE.Params_CatchPhase_CloseAction_UpperCancel_PriceTicks_get
    if _newclass:
        CatchPhase_CloseAction_UpperCancel_PriceTicks = _swig_property(_AlgoSE.Params_CatchPhase_CloseAction_UpperCancel_PriceTicks_get, _AlgoSE.Params_CatchPhase_CloseAction_UpperCancel_PriceTicks_set)
    __swig_setmethods__["NormalPhase_CancelTime_Ms"] = _AlgoSE.Params_NormalPhase_CancelTime_Ms_set
    __swig_getmethods__["NormalPhase_CancelTime_Ms"] = _AlgoSE.Params_NormalPhase_CancelTime_Ms_get
    if _newclass:
        NormalPhase_CancelTime_Ms = _swig_property(_AlgoSE.Params_NormalPhase_CancelTime_Ms_get, _AlgoSE.Params_NormalPhase_CancelTime_Ms_set)
    __swig_setmethods__["NormalPhase_CloseAction_CancelTime_Ms"] = _AlgoSE.Params_NormalPhase_CloseAction_CancelTime_Ms_set
    __swig_getmethods__["NormalPhase_CloseAction_CancelTime_Ms"] = _AlgoSE.Params_NormalPhase_CloseAction_CancelTime_Ms_get
    if _newclass:
        NormalPhase_CloseAction_CancelTime_Ms = _swig_property(_AlgoSE.Params_NormalPhase_CloseAction_CancelTime_Ms_get, _AlgoSE.Params_NormalPhase_CloseAction_CancelTime_Ms_set)
    __swig_setmethods__["CatchPhase_CancelTime_Ms"] = _AlgoSE.Params_CatchPhase_CancelTime_Ms_set
    __swig_getmethods__["CatchPhase_CancelTime_Ms"] = _AlgoSE.Params_CatchPhase_CancelTime_Ms_get
    if _newclass:
        CatchPhase_CancelTime_Ms = _swig_property(_AlgoSE.Params_CatchPhase_CancelTime_Ms_get, _AlgoSE.Params_CatchPhase_CancelTime_Ms_set)
    __swig_setmethods__["CatchPhase_CloseAction_CancelTime_Ms"] = _AlgoSE.Params_CatchPhase_CloseAction_CancelTime_Ms_set
    __swig_getmethods__["CatchPhase_CloseAction_CancelTime_Ms"] = _AlgoSE.Params_CatchPhase_CloseAction_CancelTime_Ms_get
    if _newclass:
        CatchPhase_CloseAction_CancelTime_Ms = _swig_property(_AlgoSE.Params_CatchPhase_CloseAction_CancelTime_Ms_get, _AlgoSE.Params_CatchPhase_CloseAction_CancelTime_Ms_set)
    __swig_setmethods__["TimeToLive_Ms"] = _AlgoSE.Params_TimeToLive_Ms_set
    __swig_getmethods__["TimeToLive_Ms"] = _AlgoSE.Params_TimeToLive_Ms_get
    if _newclass:
        TimeToLive_Ms = _swig_property(_AlgoSE.Params_TimeToLive_Ms_get, _AlgoSE.Params_TimeToLive_Ms_set)
    __swig_setmethods__["CloseAction_TimeToLive_Ms"] = _AlgoSE.Params_CloseAction_TimeToLive_Ms_set
    __swig_getmethods__["CloseAction_TimeToLive_Ms"] = _AlgoSE.Params_CloseAction_TimeToLive_Ms_get
    if _newclass:
        CloseAction_TimeToLive_Ms = _swig_property(_AlgoSE.Params_CloseAction_TimeToLive_Ms_get, _AlgoSE.Params_CloseAction_TimeToLive_Ms_set)

    def __init__(self):
        this = _AlgoSE.new_Params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Params
    __del__ = lambda self: None
Params_swigregister = _AlgoSE.Params_swigregister
Params_swigregister(Params)

DEFAULT_MAX_CANCEL_COUNT = _AlgoSE.DEFAULT_MAX_CANCEL_COUNT
DEFAULT_MAX_EXEC_COUNT = _AlgoSE.DEFAULT_MAX_EXEC_COUNT
DEFAULT_CANCLE_TIME_MS = _AlgoSE.DEFAULT_CANCLE_TIME_MS
DEFAULT_LIVE_TO_TIME_MS = _AlgoSE.DEFAULT_LIVE_TO_TIME_MS
DEFAULT_UPPER_CANCEL_PRICE_TICKS = _AlgoSE.DEFAULT_UPPER_CANCEL_PRICE_TICKS
DEFAULT_LOWER_CANCEL_PRICE_TICKS = _AlgoSE.DEFAULT_LOWER_CANCEL_PRICE_TICKS
DEFAULT_FLOAT_PRICE_TICK = _AlgoSE.DEFAULT_FLOAT_PRICE_TICK
EXEC_LASTPRICE = _AlgoSE.EXEC_LASTPRICE
EXEC_BIDASKPRICE = _AlgoSE.EXEC_BIDASKPRICE
EXEC_USER_SPECIFIED = _AlgoSE.EXEC_USER_SPECIFIED
class AlgoParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlgoParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlgoParams, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AlgoSE.new_AlgoParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_NormalPhase_PriceType(self, type):
        return _AlgoSE.AlgoParams_set_NormalPhase_PriceType(self, type)

    def get_NormalPhase_PriceType(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_PriceType(self)

    def get_Cancelation_Num_Limit(self):
        return _AlgoSE.AlgoParams_get_Cancelation_Num_Limit(self)

    def set_Cancelation_Num_Limit(self, num):
        return _AlgoSE.AlgoParams_set_Cancelation_Num_Limit(self, num)

    def set_NormalPhase_CloseAction_PriceType(self, type):
        return _AlgoSE.AlgoParams_set_NormalPhase_CloseAction_PriceType(self, type)

    def get_NormalPhase_CloseAction_PriceType(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_CloseAction_PriceType(self)

    def set_NormalPhase_Order_TimeInforce(self, type):
        return _AlgoSE.AlgoParams_set_NormalPhase_Order_TimeInforce(self, type)

    def get_NormalPhase_Order_TimeInforce(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_Order_TimeInforce(self)

    def set_NormalPhase_CloseAction_Order_TimeInforce(self, type):
        return _AlgoSE.AlgoParams_set_NormalPhase_CloseAction_Order_TimeInforce(self, type)

    def get_NormalPhase_CloseAction_Order_TimeInforce(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_CloseAction_Order_TimeInforce(self)

    def set_CatchPhase_PriceType(self, type):
        return _AlgoSE.AlgoParams_set_CatchPhase_PriceType(self, type)

    def get_CatchPhase_PriceType(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_PriceType(self)

    def set_CatchPhase_CloseAction_PriceType(self, type):
        return _AlgoSE.AlgoParams_set_CatchPhase_CloseAction_PriceType(self, type)

    def get_CatchPhase_CloseAction_PriceType(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_CloseAction_PriceType(self)

    def set_CatchPhase_Order_TimeInforce(self, type):
        return _AlgoSE.AlgoParams_set_CatchPhase_Order_TimeInforce(self, type)

    def get_CatchPhase_Order_TimeInforce(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_Order_TimeInforce(self)

    def set_CatchPhase_CloseAction_Order_TimeInforce(self, type):
        return _AlgoSE.AlgoParams_set_CatchPhase_CloseAction_Order_TimeInforce(self, type)

    def get_CatchPhase_CloseAction_Order_TimeInforce(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_CloseAction_Order_TimeInforce(self)

    def set_LowerLimit_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_LowerLimit_PriceTicks(self, num)

    def get_LowerLimit_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_LowerLimit_PriceTicks(self)

    def set_UpperLimit_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_UpperLimit_PriceTicks(self, num)

    def get_UpperLimit_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_UpperLimit_PriceTicks(self)

    def set_Float_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_Float_PriceTicks(self, num)

    def get_Float_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_Float_PriceTicks(self)

    def set_PriceCancel_SeekBestPrice(self, onoff):
        return _AlgoSE.AlgoParams_set_PriceCancel_SeekBestPrice(self, onoff)

    def get_PriceCancel_SeekBestPrice(self):
        return _AlgoSE.AlgoParams_get_PriceCancel_SeekBestPrice(self)

    def set_NormalPhase_LowerCancel_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_NormalPhase_LowerCancel_PriceTicks(self, num)

    def get_NormalPhase_LowerCancel_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_LowerCancel_PriceTicks(self)

    def set_NormalPhase_UpperCancel_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_NormalPhase_UpperCancel_PriceTicks(self, num)

    def get_NormalPhase_UpperCancel_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_UpperCancel_PriceTicks(self)

    def set_NormalPhase_CloseAction_LowerCancel_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_NormalPhase_CloseAction_LowerCancel_PriceTicks(self, num)

    def get_NormalPhase_CloseAction_LowerCancel_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_CloseAction_LowerCancel_PriceTicks(self)

    def set_NormalPhase_CloseAction_UpperCancel_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_NormalPhase_CloseAction_UpperCancel_PriceTicks(self, num)

    def get_NormalPhase_CloseAction_UpperCancel_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_CloseAction_UpperCancel_PriceTicks(self)

    def set_CatchPhase_LowerCancel_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_CatchPhase_LowerCancel_PriceTicks(self, num)

    def get_CatchPhase_LowerCancel_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_LowerCancel_PriceTicks(self)

    def set_CatchPhase_UpperCancel_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_CatchPhase_UpperCancel_PriceTicks(self, num)

    def get_CatchPhase_UpperCancel_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_UpperCancel_PriceTicks(self)

    def set_CatchPhase_CloseAction_LowerCancel_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_CatchPhase_CloseAction_LowerCancel_PriceTicks(self, num)

    def get_CatchPhase_CloseAction_LowerCancel_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_CloseAction_LowerCancel_PriceTicks(self)

    def set_CatchPhase_CloseAction_UpperCancel_PriceTicks(self, num):
        return _AlgoSE.AlgoParams_set_CatchPhase_CloseAction_UpperCancel_PriceTicks(self, num)

    def get_CatchPhase_CloseAction_UpperCancel_PriceTicks(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_CloseAction_UpperCancel_PriceTicks(self)

    def set_NormalPhase_CancelTime_Ms(self, ms):
        return _AlgoSE.AlgoParams_set_NormalPhase_CancelTime_Ms(self, ms)

    def get_NormalPhase_CancelTime_Ms(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_CancelTime_Ms(self)

    def set_NormalPhase_CloseAction_CancelTime_Ms(self, ms):
        return _AlgoSE.AlgoParams_set_NormalPhase_CloseAction_CancelTime_Ms(self, ms)

    def get_NormalPhase_CloseAction_CancelTime_Ms(self):
        return _AlgoSE.AlgoParams_get_NormalPhase_CloseAction_CancelTime_Ms(self)

    def set_CatchPhase_CancelTime_Ms(self, ms):
        return _AlgoSE.AlgoParams_set_CatchPhase_CancelTime_Ms(self, ms)

    def get_CatchPhase_CancelTime_Ms(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_CancelTime_Ms(self)

    def set_CatchPhase_CloseAction_CancelTime_Ms(self, ms):
        return _AlgoSE.AlgoParams_set_CatchPhase_CloseAction_CancelTime_Ms(self, ms)

    def get_CatchPhase_CloseAction_CancelTime_Ms(self):
        return _AlgoSE.AlgoParams_get_CatchPhase_CloseAction_CancelTime_Ms(self)

    def set_TimeToLive_Ms(self, ms):
        return _AlgoSE.AlgoParams_set_TimeToLive_Ms(self, ms)

    def get_TimeToLive_Ms(self):
        return _AlgoSE.AlgoParams_get_TimeToLive_Ms(self)

    def set_ClosePos_TimeToLive_Ms(self, ms):
        return _AlgoSE.AlgoParams_set_ClosePos_TimeToLive_Ms(self, ms)

    def get_ClosePos_TimeToLive_Ms(self):
        return _AlgoSE.AlgoParams_get_ClosePos_TimeToLive_Ms(self)
    __swig_destroy__ = _AlgoSE.delete_AlgoParams
    __del__ = lambda self: None
AlgoParams_swigregister = _AlgoSE.AlgoParams_swigregister
AlgoParams_swigregister(AlgoParams)

class CancelationReason(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CancelationReason, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CancelationReason, name)
    __repr__ = _swig_repr
    Unknown = _AlgoSE.CancelationReason_Unknown
    PriceOutOfRange = _AlgoSE.CancelationReason_PriceOutOfRange
    TimeOut = _AlgoSE.CancelationReason_TimeOut

    def __init__(self):
        this = _AlgoSE.new_CancelationReason()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_CancelationReason
    __del__ = lambda self: None
CancelationReason_swigregister = _AlgoSE.CancelationReason_swigregister
CancelationReason_swigregister(CancelationReason)

class AlgoOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlgoOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlgoOrder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["valid"] = _AlgoSE.AlgoOrder_valid_set
    __swig_getmethods__["valid"] = _AlgoSE.AlgoOrder_valid_get
    if _newclass:
        valid = _swig_property(_AlgoSE.AlgoOrder_valid_get, _AlgoSE.AlgoOrder_valid_set)
    __swig_setmethods__["algoId"] = _AlgoSE.AlgoOrder_algoId_set
    __swig_getmethods__["algoId"] = _AlgoSE.AlgoOrder_algoId_get
    if _newclass:
        algoId = _swig_property(_AlgoSE.AlgoOrder_algoId_get, _AlgoSE.AlgoOrder_algoId_set)
    __swig_setmethods__["signalId"] = _AlgoSE.AlgoOrder_signalId_set
    __swig_getmethods__["signalId"] = _AlgoSE.AlgoOrder_signalId_get
    if _newclass:
        signalId = _swig_property(_AlgoSE.AlgoOrder_signalId_get, _AlgoSE.AlgoOrder_signalId_set)
    __swig_setmethods__["algoType"] = _AlgoSE.AlgoOrder_algoType_set
    __swig_getmethods__["algoType"] = _AlgoSE.AlgoOrder_algoType_get
    if _newclass:
        algoType = _swig_property(_AlgoSE.AlgoOrder_algoType_get, _AlgoSE.AlgoOrder_algoType_set)
    __swig_setmethods__["algoStatus"] = _AlgoSE.AlgoOrder_algoStatus_set
    __swig_getmethods__["algoStatus"] = _AlgoSE.AlgoOrder_algoStatus_get
    if _newclass:
        algoStatus = _swig_property(_AlgoSE.AlgoOrder_algoStatus_get, _AlgoSE.AlgoOrder_algoStatus_set)
    __swig_setmethods__["action"] = _AlgoSE.AlgoOrder_action_set
    __swig_getmethods__["action"] = _AlgoSE.AlgoOrder_action_get
    if _newclass:
        action = _swig_property(_AlgoSE.AlgoOrder_action_get, _AlgoSE.AlgoOrder_action_set)
    __swig_setmethods__["instrument"] = _AlgoSE.AlgoOrder_instrument_set
    __swig_getmethods__["instrument"] = _AlgoSE.AlgoOrder_instrument_get
    if _newclass:
        instrument = _swig_property(_AlgoSE.AlgoOrder_instrument_get, _AlgoSE.AlgoOrder_instrument_set)
    __swig_setmethods__["quantity"] = _AlgoSE.AlgoOrder_quantity_set
    __swig_getmethods__["quantity"] = _AlgoSE.AlgoOrder_quantity_get
    if _newclass:
        quantity = _swig_property(_AlgoSE.AlgoOrder_quantity_get, _AlgoSE.AlgoOrder_quantity_set)
    __swig_setmethods__["price"] = _AlgoSE.AlgoOrder_price_set
    __swig_getmethods__["price"] = _AlgoSE.AlgoOrder_price_get
    if _newclass:
        price = _swig_property(_AlgoSE.AlgoOrder_price_get, _AlgoSE.AlgoOrder_price_set)
    __swig_setmethods__["triggerPx"] = _AlgoSE.AlgoOrder_triggerPx_set
    __swig_getmethods__["triggerPx"] = _AlgoSE.AlgoOrder_triggerPx_get
    if _newclass:
        triggerPx = _swig_property(_AlgoSE.AlgoOrder_triggerPx_get, _AlgoSE.AlgoOrder_triggerPx_set)
    __swig_setmethods__["execPx"] = _AlgoSE.AlgoOrder_execPx_set
    __swig_getmethods__["execPx"] = _AlgoSE.AlgoOrder_execPx_get
    if _newclass:
        execPx = _swig_property(_AlgoSE.AlgoOrder_execPx_get, _AlgoSE.AlgoOrder_execPx_set)
    __swig_setmethods__["tickSize"] = _AlgoSE.AlgoOrder_tickSize_set
    __swig_getmethods__["tickSize"] = _AlgoSE.AlgoOrder_tickSize_get
    if _newclass:
        tickSize = _swig_property(_AlgoSE.AlgoOrder_tickSize_get, _AlgoSE.AlgoOrder_tickSize_set)
    __swig_setmethods__["clOrdId"] = _AlgoSE.AlgoOrder_clOrdId_set
    __swig_getmethods__["clOrdId"] = _AlgoSE.AlgoOrder_clOrdId_get
    if _newclass:
        clOrdId = _swig_property(_AlgoSE.AlgoOrder_clOrdId_get, _AlgoSE.AlgoOrder_clOrdId_set)
    __swig_setmethods__["orderStatus"] = _AlgoSE.AlgoOrder_orderStatus_set
    __swig_getmethods__["orderStatus"] = _AlgoSE.AlgoOrder_orderStatus_get
    if _newclass:
        orderStatus = _swig_property(_AlgoSE.AlgoOrder_orderStatus_get, _AlgoSE.AlgoOrder_orderStatus_set)
    __swig_setmethods__["cumQty"] = _AlgoSE.AlgoOrder_cumQty_set
    __swig_getmethods__["cumQty"] = _AlgoSE.AlgoOrder_cumQty_get
    if _newclass:
        cumQty = _swig_property(_AlgoSE.AlgoOrder_cumQty_get, _AlgoSE.AlgoOrder_cumQty_set)
    __swig_setmethods__["avgTradedPx"] = _AlgoSE.AlgoOrder_avgTradedPx_set
    __swig_getmethods__["avgTradedPx"] = _AlgoSE.AlgoOrder_avgTradedPx_get
    if _newclass:
        avgTradedPx = _swig_property(_AlgoSE.AlgoOrder_avgTradedPx_get, _AlgoSE.AlgoOrder_avgTradedPx_set)
    __swig_setmethods__["timeID"] = _AlgoSE.AlgoOrder_timeID_set
    __swig_getmethods__["timeID"] = _AlgoSE.AlgoOrder_timeID_get
    if _newclass:
        timeID = _swig_property(_AlgoSE.AlgoOrder_timeID_get, _AlgoSE.AlgoOrder_timeID_set)
    __swig_setmethods__["initTick"] = _AlgoSE.AlgoOrder_initTick_set
    __swig_getmethods__["initTick"] = _AlgoSE.AlgoOrder_initTick_get
    if _newclass:
        initTick = _swig_property(_AlgoSE.AlgoOrder_initTick_get, _AlgoSE.AlgoOrder_initTick_set)
    __swig_setmethods__["lastTick"] = _AlgoSE.AlgoOrder_lastTick_set
    __swig_getmethods__["lastTick"] = _AlgoSE.AlgoOrder_lastTick_get
    if _newclass:
        lastTick = _swig_property(_AlgoSE.AlgoOrder_lastTick_get, _AlgoSE.AlgoOrder_lastTick_set)
    __swig_setmethods__["stopTick"] = _AlgoSE.AlgoOrder_stopTick_set
    __swig_getmethods__["stopTick"] = _AlgoSE.AlgoOrder_stopTick_get
    if _newclass:
        stopTick = _swig_property(_AlgoSE.AlgoOrder_stopTick_get, _AlgoSE.AlgoOrder_stopTick_set)
    __swig_setmethods__["execCount"] = _AlgoSE.AlgoOrder_execCount_set
    __swig_getmethods__["execCount"] = _AlgoSE.AlgoOrder_execCount_get
    if _newclass:
        execCount = _swig_property(_AlgoSE.AlgoOrder_execCount_get, _AlgoSE.AlgoOrder_execCount_set)
    __swig_setmethods__["cancelCount"] = _AlgoSE.AlgoOrder_cancelCount_set
    __swig_getmethods__["cancelCount"] = _AlgoSE.AlgoOrder_cancelCount_get
    if _newclass:
        cancelCount = _swig_property(_AlgoSE.AlgoOrder_cancelCount_get, _AlgoSE.AlgoOrder_cancelCount_set)
    __swig_setmethods__["cancelReason"] = _AlgoSE.AlgoOrder_cancelReason_set
    __swig_getmethods__["cancelReason"] = _AlgoSE.AlgoOrder_cancelReason_get
    if _newclass:
        cancelReason = _swig_property(_AlgoSE.AlgoOrder_cancelReason_get, _AlgoSE.AlgoOrder_cancelReason_set)
    __swig_setmethods__["execPhase"] = _AlgoSE.AlgoOrder_execPhase_set
    __swig_getmethods__["execPhase"] = _AlgoSE.AlgoOrder_execPhase_get
    if _newclass:
        execPhase = _swig_property(_AlgoSE.AlgoOrder_execPhase_get, _AlgoSE.AlgoOrder_execPhase_set)
    __swig_setmethods__["execSrvId"] = _AlgoSE.AlgoOrder_execSrvId_set
    __swig_getmethods__["execSrvId"] = _AlgoSE.AlgoOrder_execSrvId_get
    if _newclass:
        execSrvId = _swig_property(_AlgoSE.AlgoOrder_execSrvId_get, _AlgoSE.AlgoOrder_execSrvId_set)
    __swig_setmethods__["params"] = _AlgoSE.AlgoOrder_params_set
    __swig_getmethods__["params"] = _AlgoSE.AlgoOrder_params_get
    if _newclass:
        params = _swig_property(_AlgoSE.AlgoOrder_params_get, _AlgoSE.AlgoOrder_params_set)

    def __init__(self):
        this = _AlgoSE.new_AlgoOrder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_AlgoOrder
    __del__ = lambda self: None
AlgoOrder_swigregister = _AlgoSE.AlgoOrder_swigregister
AlgoOrder_swigregister(AlgoOrder)

class StrategyConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AlgoSE.new_StrategyConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_StrategyConfig
    __del__ = lambda self: None

    def setName(self, name):
        return _AlgoSE.StrategyConfig_setName(self, name)

    def getName(self):
        return _AlgoSE.StrategyConfig_getName(self)

    def setDescription(self, desc):
        return _AlgoSE.StrategyConfig_setDescription(self, desc)

    def getDescription(self):
        return _AlgoSE.StrategyConfig_getDescription(self)

    def setAuthor(self, author):
        return _AlgoSE.StrategyConfig_setAuthor(self, author)

    def getAuthor(self):
        return _AlgoSE.StrategyConfig_getAuthor(self)

    def setSharedLibrary(self, library):
        return _AlgoSE.StrategyConfig_setSharedLibrary(self, library)

    def getSharedLibrary(self):
        return _AlgoSE.StrategyConfig_getSharedLibrary(self)

    def setStrategyCreator(self, creator):
        return _AlgoSE.StrategyConfig_setStrategyCreator(self, creator)

    def getStrategyCreator(self):
        return _AlgoSE.StrategyConfig_getStrategyCreator(self)

    def subscribe(self, *args):
        return _AlgoSE.StrategyConfig_subscribe(self, *args)

    def enableAlgoTrader(self):
        return _AlgoSE.StrategyConfig_enableAlgoTrader(self)

    def disableAlgoTrader(self):
        return _AlgoSE.StrategyConfig_disableAlgoTrader(self)

    def isAlgoTraderEnabled(self):
        return _AlgoSE.StrategyConfig_isAlgoTraderEnabled(self)

    def enableAutoStart(self):
        return _AlgoSE.StrategyConfig_enableAutoStart(self)

    def disableAutoStart(self):
        return _AlgoSE.StrategyConfig_disableAutoStart(self)

    def isAutoStartDisabled(self):
        return _AlgoSE.StrategyConfig_isAutoStartDisabled(self)

    def setAcceptAllOrders(self, onoff):
        return _AlgoSE.StrategyConfig_setAcceptAllOrders(self, onoff)

    def isAcceptAllOrders(self):
        return _AlgoSE.StrategyConfig_isAcceptAllOrders(self)

    def directActOnAcctPos(self, onoff):
        return _AlgoSE.StrategyConfig_directActOnAcctPos(self, onoff)

    def isDirectActOnAcctPos(self):
        return _AlgoSE.StrategyConfig_isDirectActOnAcctPos(self)

    def setPosition(self, instrument, side, quantity, price, ts, highest, lowest):
        return _AlgoSE.StrategyConfig_setPosition(self, instrument, side, quantity, price, ts, highest, lowest)

    def addTradingHour(self, instrument, hour):
        return _AlgoSE.StrategyConfig_addTradingHour(self, instrument, hour)

    def setUserParameter(self, *args):
        return _AlgoSE.StrategyConfig_setUserParameter(self, *args)

    def setOptimizeParameter(self, name, start, end, step):
        return _AlgoSE.StrategyConfig_setOptimizeParameter(self, name, start, end, step)

    def setAlgoTraderParameter(self, *args):
        return _AlgoSE.StrategyConfig_setAlgoTraderParameter(self, *args)

    def getImplementor(self):
        return _AlgoSE.StrategyConfig_getImplementor(self)
StrategyConfig_swigregister = _AlgoSE.StrategyConfig_swigregister
StrategyConfig_swigregister(StrategyConfig)

class Strategy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Strategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Strategy, name)
    __repr__ = _swig_repr
    UNKNOWN = _AlgoSE.Strategy_UNKNOWN
    LOADING = _AlgoSE.Strategy_LOADING
    RUNNING = _AlgoSE.Strategy_RUNNING
    PAUSED = _AlgoSE.Strategy_PAUSED
    STOPPED = _AlgoSE.Strategy_STOPPED
    UNLOADED = _AlgoSE.Strategy_UNLOADED

    def __init__(self):
        if self.__class__ == Strategy:
            _self = None
        else:
            _self = self
        this = _AlgoSE.new_Strategy(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Strategy
    __del__ = lambda self: None

    def attach(self, runtime):
        return _AlgoSE.Strategy_attach(self, runtime)

    def onCreate(self):
        return _AlgoSE.Strategy_onCreate(self)

    def onSetParameter(self, name, type, value, isLast):
        return _AlgoSE.Strategy_onSetParameter(self, name, type, value, isLast)

    def onBarSeriesFeed(self, instrument, resolution, interval, num, buffer):
        return _AlgoSE.Strategy_onBarSeriesFeed(self, instrument, resolution, interval, num, buffer)

    def onStart(self):
        return _AlgoSE.Strategy_onStart(self)

    def onTick(self, tick):
        return _AlgoSE.Strategy_onTick(self, tick)

    def onBar(self, bar):
        return _AlgoSE.Strategy_onBar(self, bar)

    def onOrderSubmitted(self, order):
        return _AlgoSE.Strategy_onOrderSubmitted(self, order)

    def onOrderUpdated(self, order):
        return _AlgoSE.Strategy_onOrderUpdated(self, order)

    def onExecutionReport(self, arg2):
        return _AlgoSE.Strategy_onExecutionReport(self, arg2)

    def onOrderPartiallyFilled(self, order):
        return _AlgoSE.Strategy_onOrderPartiallyFilled(self, order)

    def onOrderFilled(self, order):
        return _AlgoSE.Strategy_onOrderFilled(self, order)

    def onOrderRejected(self, order):
        return _AlgoSE.Strategy_onOrderRejected(self, order)

    def onOrderReplaced(self, order):
        return _AlgoSE.Strategy_onOrderReplaced(self, order)

    def onOrderReplaceRejected(self, order):
        return _AlgoSE.Strategy_onOrderReplaceRejected(self, order)

    def onOrderCancelled(self, order):
        return _AlgoSE.Strategy_onOrderCancelled(self, order)

    def onOrderCancelRejected(self, order):
        return _AlgoSE.Strategy_onOrderCancelRejected(self, order)

    def onAlgoOrderSubmitted(self, order):
        return _AlgoSE.Strategy_onAlgoOrderSubmitted(self, order)

    def onAlgoOrderPartiallyFilled(self, order):
        return _AlgoSE.Strategy_onAlgoOrderPartiallyFilled(self, order)

    def onAlgoOrderUpdated(self, order):
        return _AlgoSE.Strategy_onAlgoOrderUpdated(self, order)

    def onAlgoOrderFilled(self, order):
        return _AlgoSE.Strategy_onAlgoOrderFilled(self, order)

    def onAlgoOrderFailed(self, order):
        return _AlgoSE.Strategy_onAlgoOrderFailed(self, order)

    def onHistoricalDataRequestAck(self, request):
        return _AlgoSE.Strategy_onHistoricalDataRequestAck(self, request)

    def onCommand(self, command):
        return _AlgoSE.Strategy_onCommand(self, command)

    def onTimer(self, timerId):
        return _AlgoSE.Strategy_onTimer(self, timerId)

    def onEnvVariable(self, name, value):
        return _AlgoSE.Strategy_onEnvVariable(self, name, value)

    def onPause(self):
        return _AlgoSE.Strategy_onPause(self)

    def onResume(self):
        return _AlgoSE.Strategy_onResume(self)

    def onStop(self):
        return _AlgoSE.Strategy_onStop(self)

    def onDestory(self):
        return _AlgoSE.Strategy_onDestory(self)

    def run(self, config, srvAddr=None, srvPort=0):
        return _AlgoSE.Strategy_run(self, config, srvAddr, srvPort)

    def sendCommand(self, command):
        return _AlgoSE.Strategy_sendCommand(self, command)

    def setVerbosity(self, onoff):
        return _AlgoSE.Strategy_setVerbosity(self, onoff)

    def pause(self):
        return _AlgoSE.Strategy_pause(self)

    def resume(self):
        return _AlgoSE.Strategy_resume(self)

    def stop(self):
        return _AlgoSE.Strategy_stop(self)

    def getId(self):
        return _AlgoSE.Strategy_getId(self)

    def getStatus(self):
        return _AlgoSE.Strategy_getStatus(self)

    def getName(self):
        return _AlgoSE.Strategy_getName(self)

    def getMainInstrument(self):
        return _AlgoSE.Strategy_getMainInstrument(self)

    def getTickSeries(self, *args):
        return _AlgoSE.Strategy_getTickSeries(self, *args)

    def getBarSeries(self, *args):
        return _AlgoSE.Strategy_getBarSeries(self, *args)

    def enablePaperTrading(self):
        return _AlgoSE.Strategy_enablePaperTrading(self)

    def setFastFlowMode(self, onoff):
        return _AlgoSE.Strategy_setFastFlowMode(self, onoff)

    def openLong(self, instrument, quantity):
        return _AlgoSE.Strategy_openLong(self, instrument, quantity)

    def closeLong(self, instrument):
        return _AlgoSE.Strategy_closeLong(self, instrument)

    def openShort(self, instrument, quantity):
        return _AlgoSE.Strategy_openShort(self, instrument, quantity)

    def closeShort(self, instrument):
        return _AlgoSE.Strategy_closeShort(self, instrument)

    def buy(self, instrument, quantity, price, srvId=0):
        return _AlgoSE.Strategy_buy(self, instrument, quantity, price, srvId)

    def sell(self, instrument, quantity, price, srvId=0):
        return _AlgoSE.Strategy_sell(self, instrument, quantity, price, srvId)

    def sellShort(self, instrument, quantity, price, srvId=0):
        return _AlgoSE.Strategy_sellShort(self, instrument, quantity, price, srvId)

    def buyToCover(self, instrument, quantity, price, srvId=0):
        return _AlgoSE.Strategy_buyToCover(self, instrument, quantity, price, srvId)

    def getDefaultAlgoParams(self):
        return _AlgoSE.Strategy_getDefaultAlgoParams(self)

    def algoBuy(self, instrument, quantity, price, params, srvId=0):
        return _AlgoSE.Strategy_algoBuy(self, instrument, quantity, price, params, srvId)

    def algoSell(self, instrument, quantity, price, params, srvId=0):
        return _AlgoSE.Strategy_algoSell(self, instrument, quantity, price, params, srvId)

    def algoSellShort(self, instrument, quantity, price, params, srvId=0):
        return _AlgoSE.Strategy_algoSellShort(self, instrument, quantity, price, params, srvId)

    def algoBuyToCover(self, instrument, quantity, price, params, srvId=0):
        return _AlgoSE.Strategy_algoBuyToCover(self, instrument, quantity, price, params, srvId)

    def createMarketOrder(self, action, instrument, quantity, srvId=0):
        return _AlgoSE.Strategy_createMarketOrder(self, action, instrument, quantity, srvId)

    def createLimitOrder(self, action, instrument, limitPrice, quantity, srvId=0):
        return _AlgoSE.Strategy_createLimitOrder(self, action, instrument, limitPrice, quantity, srvId)

    def setDefaultExecSrvId(self, id):
        return _AlgoSE.Strategy_setDefaultExecSrvId(self, id)

    def getServiceId(self, name, type):
        return _AlgoSE.Strategy_getServiceId(self, name, type)

    def subscribe(self, *args):
        return _AlgoSE.Strategy_subscribe(self, *args)

    def unsubscribe(self, *args):
        return _AlgoSE.Strategy_unsubscribe(self, *args)

    def submitOrder(self, order):
        return _AlgoSE.Strategy_submitOrder(self, order)

    def splitOrder(self, order, ordGroup):
        return _AlgoSE.Strategy_splitOrder(self, order, ordGroup)

    def getOrderStatus(self, _clOrdId):
        return _AlgoSE.Strategy_getOrderStatus(self, _clOrdId)

    def getOrderSnapshot(self, _clOrdId):
        return _AlgoSE.Strategy_getOrderSnapshot(self, _clOrdId)

    def getPendingOrders(self, *args):
        return _AlgoSE.Strategy_getPendingOrders(self, *args)

    def getAccountPendingOrders(self, *args):
        return _AlgoSE.Strategy_getAccountPendingOrders(self, *args)

    def cancelOrder(self, *args):
        return _AlgoSE.Strategy_cancelOrder(self, *args)

    def isOrderPending(self, _clOrdId):
        return _AlgoSE.Strategy_isOrderPending(self, _clOrdId)

    def registerTimer(self, msFromNow):
        return _AlgoSE.Strategy_registerTimer(self, msFromNow)

    def unregisterTimer(self, timerId):
        return _AlgoSE.Strategy_unregisterTimer(self, timerId)

    def setEnv(self, name, value):
        return _AlgoSE.Strategy_setEnv(self, name, value)

    def unsetEnv(self, name):
        return _AlgoSE.Strategy_unsetEnv(self, name)

    def monitorEnv(self, name):
        return _AlgoSE.Strategy_monitorEnv(self, name)

    def getSysTickCount(self):
        return _AlgoSE.Strategy_getSysTickCount(self)

    def saveUserParameter(self, name, value):
        return _AlgoSE.Strategy_saveUserParameter(self, name, value)

    def loadHistoricalData(self, instrument, resolution, interval, refNum, buffer, srvId=0):
        return _AlgoSE.Strategy_loadHistoricalData(self, instrument, resolution, interval, refNum, buffer, srvId)

    def requestHistoricalData(self, instrument, resolution, interval, refNum, buffer, srvId=0):
        return _AlgoSE.Strategy_requestHistoricalData(self, instrument, resolution, interval, refNum, buffer, srvId)

    def getMultiplier(self, *args):
        return _AlgoSE.Strategy_getMultiplier(self, *args)

    def getTickSize(self, *args):
        return _AlgoSE.Strategy_getTickSize(self, *args)

    def getLastPrice(self, *args):
        return _AlgoSE.Strategy_getLastPrice(self, *args)

    def getAskPrice(self, *args):
        return _AlgoSE.Strategy_getAskPrice(self, *args)

    def getBidPrice(self, *args):
        return _AlgoSE.Strategy_getBidPrice(self, *args)

    def getAccountPositions(self, *args):
        return _AlgoSE.Strategy_getAccountPositions(self, *args)

    def getStrategyPositions(self, *args):
        return _AlgoSE.Strategy_getStrategyPositions(self, *args)

    def getTotalPosSize(self, *args):
        return _AlgoSE.Strategy_getTotalPosSize(self, *args)

    def getLongPosSize(self, *args):
        return _AlgoSE.Strategy_getLongPosSize(self, *args)

    def getLongPos(self, *args):
        return _AlgoSE.Strategy_getLongPos(self, *args)

    def getShortPosSize(self, *args):
        return _AlgoSE.Strategy_getShortPosSize(self, *args)

    def getShortPos(self, *args):
        return _AlgoSE.Strategy_getShortPos(self, *args)

    def getClosableLongPosSize(self, *args):
        return _AlgoSE.Strategy_getClosableLongPosSize(self, *args)

    def getClosableLongPos(self, *args):
        return _AlgoSE.Strategy_getClosableLongPos(self, *args)

    def getClosableShortPosSize(self, *args):
        return _AlgoSE.Strategy_getClosableShortPosSize(self, *args)

    def getClosableShortPos(self, *args):
        return _AlgoSE.Strategy_getClosableShortPos(self, *args)

    def getFrozenLongPosSize(self, *args):
        return _AlgoSE.Strategy_getFrozenLongPosSize(self, *args)

    def getFrozenShortPosSize(self, *args):
        return _AlgoSE.Strategy_getFrozenShortPosSize(self, *args)

    def getUnformedLongPosSize(self, *args):
        return _AlgoSE.Strategy_getUnformedLongPosSize(self, *args)

    def getUnformedShortPosSize(self, *args):
        return _AlgoSE.Strategy_getUnformedShortPosSize(self, *args)

    def getAcctClosableLongPosSize(self, *args):
        return _AlgoSE.Strategy_getAcctClosableLongPosSize(self, *args)

    def getAcctClosableLongPos(self, *args):
        return _AlgoSE.Strategy_getAcctClosableLongPos(self, *args)

    def getAcctClosableShortPosSize(self, *args):
        return _AlgoSE.Strategy_getAcctClosableShortPosSize(self, *args)

    def getAcctClosableShortPos(self, *args):
        return _AlgoSE.Strategy_getAcctClosableShortPos(self, *args)

    def getAcctLongPosSize(self, *args):
        return _AlgoSE.Strategy_getAcctLongPosSize(self, *args)

    def getAcctHistLongPosSize(self, *args):
        return _AlgoSE.Strategy_getAcctHistLongPosSize(self, *args)

    def getAcctLongPos(self, *args):
        return _AlgoSE.Strategy_getAcctLongPos(self, *args)

    def getAcctShortPosSize(self, *args):
        return _AlgoSE.Strategy_getAcctShortPosSize(self, *args)

    def getAcctHistShortPosSize(self, *args):
        return _AlgoSE.Strategy_getAcctHistShortPosSize(self, *args)

    def getAcctShortPos(self, *args):
        return _AlgoSE.Strategy_getAcctShortPos(self, *args)

    def assignLongPosition(self, instrument, quantity, price, timestamp, frozen=0, highest=0, lowest=0):
        return _AlgoSE.Strategy_assignLongPosition(self, instrument, quantity, price, timestamp, frozen, highest, lowest)

    def assignShortPosition(self, instrument, quantity, price, timestamp, frozen=0, highest=0, lowest=0):
        return _AlgoSE.Strategy_assignShortPosition(self, instrument, quantity, price, timestamp, frozen, highest, lowest)

    def writeLogMsg(self, msg):
        return _AlgoSE.Strategy_writeLogMsg(self, msg)

    def isVerbose(self):
        return _AlgoSE.Strategy_isVerbose(self)

    def writeVerboseMsg(self, msg):
        return _AlgoSE.Strategy_writeVerboseMsg(self, msg)

    def writeErrorMsg(self, msg):
        return _AlgoSE.Strategy_writeErrorMsg(self, msg)
    def __disown__(self):
        self.this.disown()
        _AlgoSE.disown_Strategy(self)
        return weakref_proxy(self)
Strategy_swigregister = _AlgoSE.Strategy_swigregister
Strategy_swigregister(Strategy)

class DoubleEventWindow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleEventWindow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleEventWindow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self, windowSize, dtype=0, skipNone=True):
        return _AlgoSE.DoubleEventWindow_init(self, windowSize, dtype, skipNone)

    def onNewValue(self, datetime, value):
        return _AlgoSE.DoubleEventWindow_onNewValue(self, datetime, value)

    def pushNewValue(self, datetime, value):
        return _AlgoSE.DoubleEventWindow_pushNewValue(self, datetime, value)

    def getValues(self):
        return _AlgoSE.DoubleEventWindow_getValues(self)

    def getWindowSize(self):
        return _AlgoSE.DoubleEventWindow_getWindowSize(self)

    def windowFull(self):
        return _AlgoSE.DoubleEventWindow_windowFull(self)

    def getValue(self):
        return _AlgoSE.DoubleEventWindow_getValue(self)

    def clear(self):
        return _AlgoSE.DoubleEventWindow_clear(self)
    __swig_destroy__ = _AlgoSE.delete_DoubleEventWindow
    __del__ = lambda self: None
DoubleEventWindow_swigregister = _AlgoSE.DoubleEventWindow_swigregister
DoubleEventWindow_swigregister(DoubleEventWindow)

class Values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Values, name)
    __repr__ = _swig_repr

    def setDataBuffer(self, buf):
        return _AlgoSE.Values_setDataBuffer(self, buf)

    def mean(self):
        return _AlgoSE.Values_mean(self)

    def minimum(self):
        return _AlgoSE.Values_minimum(self)

    def maximum(self):
        return _AlgoSE.Values_maximum(self)

    def size(self):
        return _AlgoSE.Values_size(self)

    def __init__(self):
        this = _AlgoSE.new_Values()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Values
    __del__ = lambda self: None
Values_swigregister = _AlgoSE.Values_swigregister
Values_swigregister(Values)

class DoubleEventBasedFilter(DoubleSequenceDataSeries, IEventHandler):
    __swig_setmethods__ = {}
    for _s in [DoubleSequenceDataSeries, IEventHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleEventBasedFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleSequenceDataSeries, IEventHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleEventBasedFilter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AlgoSE.new_DoubleEventBasedFilter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self, *args):
        return _AlgoSE.DoubleEventBasedFilter_init(self, *args)

    def getDataSeries(self):
        return _AlgoSE.DoubleEventBasedFilter_getDataSeries(self)

    def getEventWindow(self):
        return _AlgoSE.DoubleEventBasedFilter_getEventWindow(self)

    def reset(self):
        return _AlgoSE.DoubleEventBasedFilter_reset(self)
    __swig_destroy__ = _AlgoSE.delete_DoubleEventBasedFilter
    __del__ = lambda self: None
DoubleEventBasedFilter_swigregister = _AlgoSE.DoubleEventBasedFilter_swigregister
DoubleEventBasedFilter_swigregister(DoubleEventBasedFilter)

class MAEventWindow(DoubleEventWindow):
    __swig_setmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAEventWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MAEventWindow, name)
    __repr__ = _swig_repr

    def init(self, period):
        return _AlgoSE.MAEventWindow_init(self, period)

    def onNewValue(self, datetime, value):
        return _AlgoSE.MAEventWindow_onNewValue(self, datetime, value)

    def getValue(self):
        return _AlgoSE.MAEventWindow_getValue(self)

    def __init__(self):
        this = _AlgoSE.new_MAEventWindow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_MAEventWindow
    __del__ = lambda self: None
MAEventWindow_swigregister = _AlgoSE.MAEventWindow_swigregister
MAEventWindow_swigregister(MAEventWindow)

class MA(DoubleEventBasedFilter):
    __swig_setmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MA, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MA, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AlgoSE.new_MA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self, *args):
        return _AlgoSE.MA_init(self, *args)
    __swig_destroy__ = _AlgoSE.delete_MA
    __del__ = lambda self: None
MA_swigregister = _AlgoSE.MA_swigregister
MA_swigregister(MA)

class EMAEventWindow(DoubleEventWindow):
    __swig_setmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMAEventWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EMAEventWindow, name)
    __repr__ = _swig_repr

    def init(self, period):
        return _AlgoSE.EMAEventWindow_init(self, period)

    def onNewValue(self, datetime, value):
        return _AlgoSE.EMAEventWindow_onNewValue(self, datetime, value)

    def getValue(self):
        return _AlgoSE.EMAEventWindow_getValue(self)

    def __init__(self):
        this = _AlgoSE.new_EMAEventWindow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_EMAEventWindow
    __del__ = lambda self: None
EMAEventWindow_swigregister = _AlgoSE.EMAEventWindow_swigregister
EMAEventWindow_swigregister(EMAEventWindow)

class EMA(DoubleEventBasedFilter):
    __swig_setmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMA, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EMA, name)
    __repr__ = _swig_repr

    def init(self, *args):
        return _AlgoSE.EMA_init(self, *args)

    def __init__(self):
        this = _AlgoSE.new_EMA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_EMA
    __del__ = lambda self: None
EMA_swigregister = _AlgoSE.EMA_swigregister
EMA_swigregister(EMA)

class SMAEventWindow(DoubleEventWindow):
    __swig_setmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMAEventWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SMAEventWindow, name)
    __repr__ = _swig_repr

    def init(self, period, weight):
        return _AlgoSE.SMAEventWindow_init(self, period, weight)

    def onNewValue(self, datetime, value):
        return _AlgoSE.SMAEventWindow_onNewValue(self, datetime, value)

    def getValue(self):
        return _AlgoSE.SMAEventWindow_getValue(self)

    def __init__(self):
        this = _AlgoSE.new_SMAEventWindow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_SMAEventWindow
    __del__ = lambda self: None
SMAEventWindow_swigregister = _AlgoSE.SMAEventWindow_swigregister
SMAEventWindow_swigregister(SMAEventWindow)

class SMA(DoubleEventBasedFilter):
    __swig_setmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMA, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SMA, name)
    __repr__ = _swig_repr

    def init(self, *args):
        return _AlgoSE.SMA_init(self, *args)

    def __init__(self):
        this = _AlgoSE.new_SMA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_SMA
    __del__ = lambda self: None
SMA_swigregister = _AlgoSE.SMA_swigregister
SMA_swigregister(SMA)

class AMAEventWindow(DoubleEventWindow):
    __swig_setmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AMAEventWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AMAEventWindow, name)
    __repr__ = _swig_repr

    def init(self, effRatioLen, fastAvgLen, slowAvgLen):
        return _AlgoSE.AMAEventWindow_init(self, effRatioLen, fastAvgLen, slowAvgLen)

    def onNewValue(self, datetime, value):
        return _AlgoSE.AMAEventWindow_onNewValue(self, datetime, value)

    def getValue(self):
        return _AlgoSE.AMAEventWindow_getValue(self)

    def __init__(self):
        this = _AlgoSE.new_AMAEventWindow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_AMAEventWindow
    __del__ = lambda self: None
AMAEventWindow_swigregister = _AlgoSE.AMAEventWindow_swigregister
AMAEventWindow_swigregister(AMAEventWindow)

class AMA(DoubleEventBasedFilter):
    __swig_setmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AMA, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AMA, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AlgoSE.new_AMA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self, *args):
        return _AlgoSE.AMA_init(self, *args)
    __swig_destroy__ = _AlgoSE.delete_AMA
    __del__ = lambda self: None
AMA_swigregister = _AlgoSE.AMA_swigregister
AMA_swigregister(AMA)

class HighLowEventWindow(DoubleEventWindow):
    __swig_setmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighLowEventWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HighLowEventWindow, name)
    __repr__ = _swig_repr

    def init(self, period, useMin):
        return _AlgoSE.HighLowEventWindow_init(self, period, useMin)

    def onNewValue(self, datetime, value):
        return _AlgoSE.HighLowEventWindow_onNewValue(self, datetime, value)

    def getValue(self):
        return _AlgoSE.HighLowEventWindow_getValue(self)

    def __init__(self):
        this = _AlgoSE.new_HighLowEventWindow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_HighLowEventWindow
    __del__ = lambda self: None
HighLowEventWindow_swigregister = _AlgoSE.HighLowEventWindow_swigregister
HighLowEventWindow_swigregister(HighLowEventWindow)

class High(DoubleEventBasedFilter):
    __swig_setmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, High, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, High, name)
    __repr__ = _swig_repr

    def init(self, *args):
        return _AlgoSE.High_init(self, *args)

    def __init__(self):
        this = _AlgoSE.new_High()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_High
    __del__ = lambda self: None
High_swigregister = _AlgoSE.High_swigregister
High_swigregister(High)

class Low(DoubleEventBasedFilter):
    __swig_setmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Low, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleEventBasedFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Low, name)
    __repr__ = _swig_repr

    def init(self, *args):
        return _AlgoSE.Low_init(self, *args)

    def __init__(self):
        this = _AlgoSE.new_Low()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Low
    __del__ = lambda self: None
Low_swigregister = _AlgoSE.Low_swigregister
Low_swigregister(Low)


def SwingHigh(dataSeries, leftStrength, rightStrength):
    return _AlgoSE.SwingHigh(dataSeries, leftStrength, rightStrength)
SwingHigh = _AlgoSE.SwingHigh

def SwingLow(dataSeries, leftStrength, rightStrength):
    return _AlgoSE.SwingLow(dataSeries, leftStrength, rightStrength)
SwingLow = _AlgoSE.SwingLow
class Cross(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cross, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cross, name)
    __repr__ = _swig_repr
    if _newclass:
        crossAbove = staticmethod(_AlgoSE.Cross_crossAbove)
    else:
        crossAbove = _AlgoSE.Cross_crossAbove
    if _newclass:
        crossBelow = staticmethod(_AlgoSE.Cross_crossBelow)
    else:
        crossBelow = _AlgoSE.Cross_crossBelow

    def __init__(self):
        this = _AlgoSE.new_Cross()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AlgoSE.delete_Cross
    __del__ = lambda self: None
Cross_swigregister = _AlgoSE.Cross_swigregister
Cross_swigregister(Cross)

def Cross_crossAbove(values1, values2, start=0, end=1):
    return _AlgoSE.Cross_crossAbove(values1, values2, start, end)
Cross_crossAbove = _AlgoSE.Cross_crossAbove

def Cross_crossBelow(values1, values2, start=0, end=1):
    return _AlgoSE.Cross_crossBelow(values1, values2, start, end)
Cross_crossBelow = _AlgoSE.Cross_crossBelow

# This file is compatible with both classic and new-style classes.


